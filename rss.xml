<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>HOMEPAGE</title>
    <description>HOMEPAGE</description>
    <link>https://awakening-fong.github.io</link>
    <pubDate>2017-01-15</pubDate>
    <item>
      <title>About Me</title>
      <link>https://awakening-fong.github.io/about-me</link>
      <description>&lt;p&gt;&#x5173;&#x6CE8;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ARM&lt;/li&gt;
&lt;li&gt;I/O &lt;/li&gt;
&lt;li&gt;&#x5185;&#x5B58;&#x7BA1;&#x7406;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&#x90AE;&#x7BB1;: awaken_ing#163#com&lt;br&gt;
&#x4E4B;&#x524D;&#x7684;&#x535A;&#x5BA2;&#x662F;: blog.163.com/awaken_ing/&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Archive</title>
      <link>https://awakening-fong.github.io/archive</link>
      <description>
  &lt;h2&gt;2017&lt;/h2&gt;
    &lt;h3&gt;January&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;2017-01-14&lt;/span&gt; &amp;raquo; &lt;a href="/posts/slub_partial"&gt;SLUB 03:partial&#x548C;cpu partial&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-14&lt;/span&gt; &amp;raquo; &lt;a href="/posts/slub_frozen"&gt;SLUB 02:frozen&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-14&lt;/span&gt; &amp;raquo; &lt;a href="/posts/slub_tid"&gt;SLUB 04:tid&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-12&lt;/span&gt; &amp;raquo; &lt;a href="/posts/slub_slab_alloc"&gt;SLUB 01:the SLUB allocator&#x7684;&#x76F8;&#x5173;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x548C;&#x4E3B;&#x8981;&#x6D41;&#x7A0B;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-11&lt;/span&gt; &amp;raquo; &lt;a href="/posts/scheduler_01_lost_wake-up"&gt;&#x8C03;&#x5EA6;&#x5668;, &#x4ECE;lost wake-up problem&#x8BF4;&#x8D77;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-11&lt;/span&gt; &amp;raquo; &lt;a href="/posts/scheduler_02_preempt"&gt;&#x4EC5;&#x68C0;&#x67E5;TIF_NEED_RESCHED,&#x4E0D;&#x68C0;&#x67E5;preempt_count?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-11&lt;/span&gt; &amp;raquo; &lt;a href="/posts/scheduler_03_switch_to"&gt;arm linux&#x7684;switch_to&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-10&lt;/span&gt; &amp;raquo; &lt;a href="/posts/scheduler_00_implementation"&gt;&#x8C03;&#x5EA6;&#x5668;CFS&#x7684;&#x5B9E;&#x73B0;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-06&lt;/span&gt; &amp;raquo; &lt;a href="/posts/deadline-iosched"&gt;deadline-iosched&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-04&lt;/span&gt; &amp;raquo; &lt;a href="/posts/generic_make_request"&gt;generic_make_request&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-03&lt;/span&gt; &amp;raquo; &lt;a href="/posts/tag_towrie_livelock"&gt;tag TOWRITE to avoid livelocking?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-03&lt;/span&gt; &amp;raquo; &lt;a href="/posts/readahead"&gt;do_generic_file_read&#x4E2D;&#x7684;readahead&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2017-01-01&lt;/span&gt; &amp;raquo; &lt;a href="/posts/writeback_routine"&gt;&#x56DE;&#x5199;&#x8DEF;&#x5F84;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;h2&gt;2016&lt;/h2&gt;
    &lt;h3&gt;December&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;2016-12-31&lt;/span&gt; &amp;raquo; &lt;a href="/posts/set_buffer_new"&gt;set_buffer_new&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2016-12-31&lt;/span&gt; &amp;raquo; &lt;a href="/posts/arm_asm"&gt;ARM&#x7684;&#x4E00;&#x4E9B;&#x6C47;&#x7F16;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2016-12-31&lt;/span&gt; &amp;raquo; &lt;a href="/posts/generic_perform_write"&gt;generic_perform_write&#x6D41;&#x7A0B;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2016-12-31&lt;/span&gt; &amp;raquo; &lt;a href="/posts/flush_dcache_page"&gt;flush_dcache_page&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2016-12-30&lt;/span&gt; &amp;raquo; &lt;a href="/posts/field_of_bh_and_address_space"&gt;address_space&#x548C;buffer_head&#x7684;&#x4E00;&#x4E9B;field&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2016-12-30&lt;/span&gt; &amp;raquo; &lt;a href="/posts/ext2_layout"&gt;ext2 disk layout&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;2016-12-30&lt;/span&gt; &amp;raquo; &lt;a href="/posts/read_write_lock_page"&gt;&#x8BFB;&#x5199;&#x51FD;&#x6570;&#x4E2D;&#x7684;lock_page&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Categories</title>
      <link>https://awakening-fong.github.io/categories</link>
      <description>
&lt;ul class="tag_box inline"&gt;
  &lt;li&gt;
    &lt;a href="/categories#ARM-ref"&gt;ARM &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/categories#I/O-ref"&gt;I/O &lt;span&gt;9&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/categories#file system-ref"&gt;file system &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/categories#&#x5185;&#x5B58;&#x7BA1;&#x7406;-ref"&gt;&#x5185;&#x5B58;&#x7BA1;&#x7406; &lt;span&gt;5&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/categories#&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;-ref"&gt;&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6; &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;h3&gt;ARM (1)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/arm_asm"&gt;ARM&#x7684;&#x4E00;&#x4E9B;&#x6C47;&#x7F16;&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3&gt;I/O (9)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/deadline-iosched"&gt;deadline-iosched&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/field_of_bh_and_address_space"&gt;address_space&#x548C;buffer_head&#x7684;&#x4E00;&#x4E9B;field&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/generic_make_request"&gt;generic_make_request&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/generic_perform_write"&gt;generic_perform_write&#x6D41;&#x7A0B;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/readahead"&gt;do_generic_file_read&#x4E2D;&#x7684;readahead&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/read_write_lock_page"&gt;&#x8BFB;&#x5199;&#x51FD;&#x6570;&#x4E2D;&#x7684;lock_page&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/set_buffer_new"&gt;set_buffer_new&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/tag_towrie_livelock"&gt;tag TOWRITE to avoid livelocking?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/writeback_routine"&gt;&#x56DE;&#x5199;&#x8DEF;&#x5F84;&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3&gt;file system (1)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/ext2_layout"&gt;ext2 disk layout&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3&gt;&#x5185;&#x5B58;&#x7BA1;&#x7406; (5)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/flush_dcache_page"&gt;flush_dcache_page&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/slub_frozen"&gt;SLUB 02:frozen&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/slub_partial"&gt;SLUB 03:partial&#x548C;cpu partial&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/slub_slab_alloc"&gt;SLUB 01:the SLUB allocator&#x7684;&#x76F8;&#x5173;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x548C;&#x4E3B;&#x8981;&#x6D41;&#x7A0B;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/slub_tid"&gt;SLUB 04:tid&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3&gt;&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6; (4)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/scheduler_00_implementation"&gt;&#x8C03;&#x5EA6;&#x5668;CFS&#x7684;&#x5B9E;&#x73B0;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/scheduler_01_lost_wake-up"&gt;&#x8C03;&#x5EA6;&#x5668;, &#x4ECE;lost wake-up problem&#x8BF4;&#x8D77;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/scheduler_02_preempt"&gt;&#x4EC5;&#x68C0;&#x67E5;TIF_NEED_RESCHED,&#x4E0D;&#x68C0;&#x67E5;preempt_count?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/scheduler_03_switch_to"&gt;arm linux&#x7684;switch_to&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Home</title>
      <link>https://awakening-fong.github.io/</link>
      <description>&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/slub_partial"&gt;SLUB 03:partial&#x548C;cpu partial&lt;/a&gt; &lt;span class="date"&gt;2017-01-14&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;&#x4E3B;&#x8981;&#x4ECB;&#x7ECD;partial&#x548C;cpu partial&#x7684;&#x4EA7;&#x751F;.&lt;br&gt;
&#x5185;&#x6838;&#x672A;&#x5B9A;&#x4E49; CONFIG_NUMA&lt;/p&gt;

&lt;p&gt;partial&#x6CA1;&#x6709;&#x6307;&#x660E;&#x662F;node partial&#x8FD8;&#x662F;cpu partial&#x65F6;, &#x5219;&#x6307;&#x7684;&#x662F;node partial.&lt;/p&gt;

&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. node partial&#x7684;&#x4EA7;&#x751F;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x5728;cpu0&#x4E0A;&#x6267;&#x884C;new_slab_objects -&amp;gt; new_slab, &#x7531;&#x4E8E;&#x53EF;&#x80FD;&#x7761;&#x7720;, &#x4E4B;&#x540E;&#x53EF;&#x80FD;&#x8FD0;&#x884C;&#x5728;cpu1&#x4E0A;. &#x8FD9;&#x65F6;&#x82E5;cpu1&#x7684;c-&amp;gt;page&#x975E;&#x7A7A;, &#x5219;&#x6839;&#x636E;&#x60C5;&#x51B5;, &#x53EF;&#x80FD;&#x5C06;&#x5176;&#x653E;&#x5165;node partial&#x4E2D;.&lt;/p&gt;

&lt;p&gt;linux-3.10.86/mm/slub.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__slab_alloc
|--local_irq_save(flags);
|--freelist =new_slab_objects //buddy&#x7684;page&#x7684;&#x9996;&#x4E2A;obj
|    |--page = new_slab(s, flags, node); //&#x5728;cpu0&#x4E0A;
|    |--c = __this_cpu_ptr(s-&amp;gt;cpu_slab) //&#x8FDB;&#x7A0B;&#x53EF;&#x80FD;&#x8FC1;&#x79FB;&#x5230;cpu1&#x4E0A;
|    |--if (c-&amp;gt;page) flush_slab(s, c);

flush_slab(struct kmem_cache *s, struct kmem_cache_cpu *c)
|-- deactivate_slab(s, c-&amp;gt;page, c-&amp;gt;freelist)


static void deactivate_slab(struct kmem_cache *s, struct page *page, void *freelist)
{

    /*
     while&#x5FAA;&#x73AF;&#x524D;:
     obj_t2 -&amp;gt; obj_t1 -&amp;gt; NULL
     ^
     @page-&amp;gt;freelist

     obj_03 -&amp;gt; obj_02 -&amp;gt; obj_01 -&amp;gt; NULL
     ^
     @freelist


     &#x5FAA;&#x73AF;&#x5355;&#x6B21;&#x540E;:   
     obj_03   -&amp;gt;  obj_t2  -&amp;gt; obj_t1 -&amp;gt; NULL
     ^
     page-&amp;gt;freelist 


     obj_02 -&amp;gt; obj_01 -&amp;gt; NULL
     ^
     freelist

     &#x518D;&#x6765;&#x4E00;&#x56DE;:
     obj_02 -&amp;gt; obj_03   -&amp;gt;  obj_t2  -&amp;gt; obj_t1 -&amp;gt; NULL
     ^
     page-&amp;gt;freelist


     obj_01 -&amp;gt; NULL
     ^
     freelist

     &#x95EE;&#x9898;:&#x4E3A;&#x4F55;&#x4E0D;&#x76F4;&#x63A5;&#x4FEE;&#x6539;&#x6307;&#x9488;&#x628A;&#x4E24;&#x4E2A;&#x94FE;&#x8868;&#x4E32;&#x8D77;&#x6765;, &#x800C;&#x662F;&#x8981;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;object&#x7684;&#x653E;&#x5230;&#x94FE;&#x8868;&#x4E2D;?
     &#x7B54;:&#x56E0;&#x4E3A;&#x8981;&#x4FEE;&#x6539;counters, &#x6240;&#x4EE5;&#x8981;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x6570;.
    */
    while (freelist &amp;amp;&amp;amp; (nextfree = get_freepointer(s, freelist))) {
        ...
    }

    ....

    /*
    &#x5982;&#x679C;&#x8FD9;&#x91CC;freelist&#x4E3A;NULL, &#x8BF4;&#x660E;@freelist&#x4F20;&#x5165;&#x65F6;&#x5C31;&#x4E3A;NULL
    */
    /*&#x628A;the last one&#x4E5F;&#x63A5;&#x4E0A;*/
    if (freelist) {
        new.inuse--;
        /* 
        new-&amp;gt;freelist
        v
        obj_01 -&amp;gt; obj_02 -&amp;gt; obj_03   -&amp;gt;  obj_t2  -&amp;gt; obj_t1 -&amp;gt; NULL
        ^
        freelist
        */
        set_freepointer(s, freelist, old.freelist);
        new.freelist = freelist;
    } else
        ...

    new.frozen = 0;

    //&#x6709;M_FREE, M_PARTIAL&#x7B49;&#x60C5;&#x51B5;, &#x8FD9;&#x91CC;&#x53EA;&#x770B;M_PARTIAL
    ...

    if (m == M_PARTIAL) {
        /*&#x95EE;&#x9898;:&#x4E3A;&#x4F55;&#x4E0D;&#x662F;put_cpu_partial()?*/
        add_partial(n, page, tail);

    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/slub_partial" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/slub_frozen"&gt;SLUB 02:frozen&lt;/a&gt; &lt;span class="date"&gt;2017-01-14&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;&#x672C;&#x6587;&#x5047;&#x5B9A;&#x6CA1;&#x6709;&#x6253;&#x5F00;CONFIG_SLUB_DEBUG, &#x6CA1;&#x6709;&#x914D;&#x7F6E;CONFIG_NUMA.&lt;/p&gt;

&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x4EC0;&#x4E48;&#x662F;frozen&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;linux-3.10.86/mm/slub.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; *   If a slab is frozen then it is exempt(&#x514D;&#x9664;) from list management. It is not
 *   on any list. It is not on any list. The processor that froze the slab is the one who can
 *   perform list operations on the page. Other processors may put objects
 *   onto the freelist but the processor that froze the slab is the only
 *   one that can retrieve the objects from the page's freelist.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cpu01&#x7684;c-&amp;gt;page&#x662F;frozen, &#x90A3;&#x4E48;cpu01&#x53EF;&#x4EE5;&#x4ECE;&#x8BE5;page&#x4E2D;&#x53D6;&#x51FA;&#x6216;&#x653E;&#x56DE;obj, 
cpu02&#x4E0D;&#x80FD;&#x4ECE;&#x8BE5;page&#x4E2D;&#x53D6;obj, &#x53EA;&#x80FD;&#x628A;obj&#x8FD8;&#x7ED9;&#x8BE5;page.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. cpu partial&#x4E0A;&#x7684;page&#x90FD;&#x662F;frozen&#x72B6;&#x6001;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;linux-3.10.86/include/linux/slub_def.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct kmem_cache_cpu {
...
    struct page *partial;   /* Partially allocated frozen slabs */
    ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/slub_frozen" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/slub_tid"&gt;SLUB 04:tid&lt;/a&gt; &lt;span class="date"&gt;2017-01-14&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. tid&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;linux-3.10.86/include/linux/slub_def.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct kmem_cache_cpu {
    ...
    unsigned long tid;  /* Globally unique transaction id */
    ..
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;linux-3.10.86/mm/slub.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#ifdef CONFIG_PREEMPT
/*
 * Calculate the next globally unique transaction for disambiguiation
 * during cmpxchg. The transactions start with the cpu number and are then
 * incremented by CONFIG_NR_CPUS.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x95EE;&#x9898;:&#x4E00;&#x6B21;&#x4E0D;&#x662F;&#x52A0;1, &#x800C;&#x662F;&#x52A0;CONFIG_NR_CPUS, &#x4E3A;&#x5565;?&lt;br&gt;
&#x7B54;:&#x8FD9;&#x4E2A;&#x8BBE;&#x8BA1;&#x662F;&#x4E3A;&#x4E86;&#x8BA9;&#x4EFB;&#x4F55;&#x65F6;&#x523B;&#x6BCF;&#x4E2A;cpu&#x7684;tid&#x503C;&#x90FD;&#x4E0D;&#x4E00;&#x6837;.
&#x4E0D;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x6CE8;&#x91CA;&#x6709;&#x70B9;&#x8001;, &#x56E0;&#x4E3A;&#x5B9E;&#x9645;&#x5E76;&#x4E0D;&#x662F;&#x52A0;CONFIG_NR_CPUS, &#x800C;&#x662F;TID_STEP.&lt;/p&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/slub_tid" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/slub_slab_alloc"&gt;SLUB 01:the SLUB allocator&#x7684;&#x76F8;&#x5173;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x548C;&#x4E3B;&#x8981;&#x6D41;&#x7A0B;&lt;/a&gt; &lt;span class="date"&gt;2017-01-12&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;&#x6587;&#x6765;&#x81EA;&#x672C;&#x4EBA;&#x65E7;&#x535A;&#x5BA2;:  blog.163.com/awaken_ing/blog/static/1206131972016316114114855&lt;/p&gt;

&lt;p&gt;&#x5E73;&#x53F0; ARM Versatile Express for Cortex-A9 SMP&lt;br&gt;
&#x5185;&#x6838;&#x7248;&#x672C; 3.10.86 (&#x672A;&#x5B9A;&#x4E49; CONFIG_NUMA)  &lt;/p&gt;

&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x6982;&#x89C8;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;The SLUB allocator &#x76F8;&#x6BD4;SLAB, &#x8BD5;&#x56FE; remove the metadata overhead inside slabs, reduce the number of caches, and so on.
The only metadata present in the SLUB allocator is the in-object &#x201C;next-free-object&#x201D; pointer, which allows us to link free objects together. struct kmem_cache &#x7684;&#x6210;&#x5458; int offset &#x7528;&#x6765;&#x6307;&#x660E; &#x6307;&#x9488;&#x5728; object &#x4E2D;&#x7684;&#x504F;&#x79FB;&#x91CF;, &#x8FD9;&#x4E2A;&#x6307;&#x9488;&#x6307;&#x5411;&#x7684;&#x662F;&#x4E0B;&#x4E00;&#x4E2A;&#x53EF;&#x7528;&#x7684;object. How does the allocator manage to find the first free object? The answer lies in the approach of saving a pointer to such an object inside each page struct associated with the slab page.
SLUB allocator &#x6CA1;&#x6709;SLAB&#x7684;full list &#x548C; empty list.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/media/slub_01.jpg"&gt;&lt;/p&gt;

&lt;p&gt;&#x56FE;&#x7247;&#x6765;&#x81EA; &lt;a href="http://events.linuxfoundation.org/sites/events/files/slides/slaballocators.pdf"&gt;http://events.linuxfoundation.org/sites/events/files/slides/slaballocators.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;linux-3.10.86/mm/slub.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slab_alloc() -&amp;gt; slab_alloc_node()
slab_alloc_node(struct kmem_cache *s, ...
{
    struct kmem_cache_cpu *c=__this_cpu_ptr(s-&amp;gt;cpu_slab);
    object = c-&amp;gt;freelist;
    if fastpath {
        void *next_object = get_freepointer_safe(s, object);
        c-&amp;gt;freelist=next_object; //via  this_cpu_cmpxchg_double()
    }else
        ...
    return object;
}
static inline void *get_freepointer(struct kmem_cache *s, void *object)
{
    return *(void **)(object + s-&amp;gt;offset);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/slub_slab_alloc" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/scheduler_01_lost_wake-up"&gt;&#x8C03;&#x5EA6;&#x5668;, &#x4ECE;lost wake-up problem&#x8BF4;&#x8D77;&lt;/a&gt; &lt;span class="date"&gt;2017-01-11&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;&#x6587;&#x6765;&#x81EA;&#x672C;&#x4EBA;&#x7684;&#x65E7;&#x535A;&#x5BA2; blog.163.com/awaken_ing/blog/static/1206131972016124113539444/&lt;/p&gt;

&lt;h1 id="toc_0"&gt;&lt;h4&gt;0. &#x5F15;&#x8A00;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;The lost wake-up problem &#x8BF7;&#x53C2;&#x8003; &lt;a href="http://www.linuxjournal.com/article/8144"&gt;http://www.linuxjournal.com/article/8144&lt;/a&gt;&lt;br&gt;
&#x672C;&#x7BC7;&#x4E3B;&#x8981;&#x89E3;&#x91CA;&#x4E3A;&#x4F55;&#x4FEE;&#x6539;&#x540E;&#x7684;&#x4EE3;&#x7801;&#x6CA1;&#x6709;&#x95EE;&#x9898;.
&#x4FEE;&#x6539;&#x540E;&#x7684;&#x4EE3;&#x7801;&#x4E3A;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1  set_current_state(TASK_INTERRUPTIBLE);
2  spin_lock(&amp;amp;list_lock);
3  if(list_empty(&amp;amp;list_head)) {
4         spin_unlock(&amp;amp;list_lock); //&#x5982;&#x679C;&#x8FD9;&#x91CC;&#x9762;&#x8BA9;&#x51FA;cpu?
//&#x5982;&#x679C;&#x5728;&#x8FD9;&#x4E2A;&#x70B9;&#x88AB;&#x751F;&#x4EA7;&#x8005;&#x5524;&#x9192;&#x4F1A;&#x5982;&#x4F55;?
5         schedule();
6         spin_lock(&amp;amp;list_lock);
7  }
8  set_current_state(TASK_RUNNING);
9
10 /* Rest of the code ... */
11 spin_unlock(&amp;amp;list_lock);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/scheduler_01_lost_wake-up" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="pagination"&gt;
  &lt;ul&gt;
      &lt;li class="active"&gt;&lt;a href="/posts/index/1"&gt;1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/2"&gt;2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/3"&gt;3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/4"&gt;4&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Pages</title>
      <link>https://awakening-fong.github.io/pages</link>
      <description>
&lt;ul&gt;
  
    &lt;li&gt;&lt;a href="/about-me"&gt;About Me&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
  
    &lt;li class="active"&gt;&lt;a href="/pages" class="active"&gt;Pages&lt;/a&gt;&lt;/li&gt;
  
  
  
    &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
  
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Tags</title>
      <link>https://awakening-fong.github.io/tags</link>
      <description>
&lt;ul class="tag_box inline"&gt;
  &lt;li&gt;
    &lt;a href="/tags#assembly-ref"&gt;assembly &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#ARM-ref"&gt;ARM &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#iosched-ref"&gt;iosched &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#ext2-ref"&gt;ext2 &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#buffer_head-ref"&gt;buffer_head &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#address_space-ref"&gt;address_space &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#flush_dcache_page-ref"&gt;flush_dcache_page &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#tag_null_yet-ref"&gt;tag_null_yet &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#readahead-ref"&gt;readahead &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#lock_page-ref"&gt;lock_page &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#scheduler-ref"&gt;scheduler &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#SLUB-ref"&gt;SLUB &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#writeback-ref"&gt;writeback &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;h3 id="assembly-ref"&gt;assembly&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arm_asm"&gt;ARM&#x7684;&#x4E00;&#x4E9B;&#x6C47;&#x7F16;&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="ARM-ref"&gt;ARM&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arm_asm"&gt;ARM&#x7684;&#x4E00;&#x4E9B;&#x6C47;&#x7F16;&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="iosched-ref"&gt;iosched&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/deadline-iosched"&gt;deadline-iosched&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="ext2-ref"&gt;ext2&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/ext2_layout"&gt;ext2 disk layout&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="buffer_head-ref"&gt;buffer_head&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/field_of_bh_and_address_space"&gt;address_space&#x548C;buffer_head&#x7684;&#x4E00;&#x4E9B;field&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/set_buffer_new"&gt;set_buffer_new&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="address_space-ref"&gt;address_space&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/field_of_bh_and_address_space"&gt;address_space&#x548C;buffer_head&#x7684;&#x4E00;&#x4E9B;field&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="flush_dcache_page-ref"&gt;flush_dcache_page&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/flush_dcache_page"&gt;flush_dcache_page&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="tag_null_yet-ref"&gt;tag_null_yet&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/generic_make_request"&gt;generic_make_request&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/generic_perform_write"&gt;generic_perform_write&#x6D41;&#x7A0B;&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="readahead-ref"&gt;readahead&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/readahead"&gt;do_generic_file_read&#x4E2D;&#x7684;readahead&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="lock_page-ref"&gt;lock_page&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/read_write_lock_page"&gt;&#x8BFB;&#x5199;&#x51FD;&#x6570;&#x4E2D;&#x7684;lock_page&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="scheduler-ref"&gt;scheduler&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/scheduler_00_implementation"&gt;&#x8C03;&#x5EA6;&#x5668;CFS&#x7684;&#x5B9E;&#x73B0;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/scheduler_01_lost_wake-up"&gt;&#x8C03;&#x5EA6;&#x5668;, &#x4ECE;lost wake-up problem&#x8BF4;&#x8D77;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/scheduler_02_preempt"&gt;&#x4EC5;&#x68C0;&#x67E5;TIF_NEED_RESCHED,&#x4E0D;&#x68C0;&#x67E5;preempt_count?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/scheduler_03_switch_to"&gt;arm linux&#x7684;switch_to&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="SLUB-ref"&gt;SLUB&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/slub_frozen"&gt;SLUB 02:frozen&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/slub_partial"&gt;SLUB 03:partial&#x548C;cpu partial&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/slub_slab_alloc"&gt;SLUB 01:the SLUB allocator&#x7684;&#x76F8;&#x5173;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x548C;&#x4E3B;&#x8981;&#x6D41;&#x7A0B;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/slub_tid"&gt;SLUB 04:tid&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="writeback-ref"&gt;writeback&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/tag_towrie_livelock"&gt;tag TOWRITE to avoid livelocking?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/writeback_routine"&gt;&#x56DE;&#x5199;&#x8DEF;&#x5F84;&lt;/a&gt;&lt;/li&gt;
 
</description>
    </item>
  </channel>
</rss>
