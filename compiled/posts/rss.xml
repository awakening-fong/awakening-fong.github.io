<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>&#x9996;&#x9875;</title>
    <description>&#x9996;&#x9875;</description>
    <link>https://awakening-fong.github.io</link>
    <pubDate>2018-12-21</pubDate>
    <item>
      <title>JBD&#x521D;&#x6B65;</title>
      <link>https://awakening-fong.github.io/posts/fs/jbd</link>
      <pubDate>2018-10-25</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x6982;&#x5FF5;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x5355;&#x4E2A;handle&#x662F;&#x539F;&#x5B50;&#x64CD;&#x4F5C;. 
&#x591A;&#x4E2A;handle&#x6253;&#x5305;&#x4E3A;&#x4E00;&#x4E2A;transaction.&lt;/p&gt;

&lt;p&gt;disk is used to indicate the actual block device,
whereas the term journal is used for the log area.&lt;/p&gt;

&lt;p&gt;Log record: Describes a single update of a disk block of the journaling filesystem.(&#x6765;&#x81EA;[Understanding the Linux Kernel, 3rd Edition]) &lt;/p&gt;

&lt;p&gt;commit record:
a special block, called the commit record, is written to the journal. The commit record is used to indicate that all the blocks belonging to a single atomic operation are written to the journal.
fong:&#x8FD9;&#x6837;, &#x5982;&#x679C;crash, &#x5C31;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x90A3;&#x4E9B;log&#x662F;&#x5B8C;&#x6210;&#x7684;.
The commit record indicates that this is a completed operation and could be written to the disk. &lt;/p&gt;

&lt;p&gt;checkpointing: &#x5C06; finished transactions &#x5199;&#x5165;&#x78C1;&#x76D8;(&#x975E;log&#x533A;&#x57DF;), &#x7528;&#x4E8E;&#x56DE;&#x6536;&#x76F8;&#x5E94;log&#x7A7A;&#x95F4;&#x7684;&#x8FC7;&#x7A0B;.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x72B6;&#x6001;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;T_RUNNING&lt;/code&gt;&lt;br&gt;
the transaction can accept new handles. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_LOCKED&lt;/code&gt;&lt;br&gt;
the transaction does not accept any new handles but existing handles are not complete. 
fong:&#x8FD9;&#x91CC;&#x7684;handle completed, &#x610F;&#x601D;&#x662F;&#x666E;&#x901A;&#x7684;&#x5199;&#x5165;&#x5B8C;&#x6210;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_FLUSH&lt;/code&gt;&lt;br&gt;
all the handles in a transaction are complete. The transaction is writing itself to the journal. 
itself&#x6307;&#x7684;&#x662F; log, &#x5C06;log&#x5199;&#x5165;log&#x533A;&#x57DF;.
&#x4EE3;&#x7801;&#x4E2D;journal&lt;em&gt;submit&lt;/em&gt;data&lt;em&gt;buffers()&#x5E76;unplug, 
+ journal&lt;/em&gt;write&lt;em&gt;revoke&lt;/em&gt;records()&lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_COMMIT&lt;/code&gt;&lt;br&gt;
&#x53C2;&#x8003; linux-3.10.86_utf8/fs/jbd/commit.c
we have now written out all of the data for a transaction.  Now comes the tricky part: we need to write out metadata. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_COMMIT_RECORD&lt;/code&gt;&lt;br&gt;
&#x5F00;&#x59CB;&#x5199; write commit record and do cleanup.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_FINISHED&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;[Understanding the Linux Kernel, 3rd Edition]
All log records included in the transaction have been physically written onto the journal. When recovering from a system failure, e2fsck considers every complete transaction of the journal and writes the corresponding blocks into the filesystem. 
&#x56E0;&#x4E3A;checkpointing&#x4F1A;&#x5C06;transaction&#x4ECE;&#x65E5;&#x5FD7;&#x533A;&#x79FB;&#x9664;, &#x6240;&#x4EE5;, &#x5728;&#x65E5;&#x5FD7;&#x533A;&#x5C31;&#x9700;&#x8981;replay.&lt;/p&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. &#x4E3B;&#x8981;&#x8FC7;&#x7A0B;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;Phase 1: the transaction enters into the flush state (T_FLUSH).&lt;br&gt;
Phase 2: the actual buffers of the transaction are flushed to the disk. Data buffers go first. There are no complications here, as data buffers are not saved in the log area. Instead, they are flushed directly to their actual positions on the disk. This phase ends when the I/O completion notifications for all such buffers are received.&lt;br&gt;
date&#x4E0D;&#x4F1A;&#x5148;&#x5199;&#x5230;log&#x533A;&#x57DF;, &#x800C;&#x662F;&#x76F4;&#x63A5;&#x5199;&#x5F80;&#x5B9E;&#x9645;&#x7684;&#x78C1;&#x76D8;.&lt;/p&gt;

&lt;p&gt;(&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x5C42;&#x9762;&#x624D;&#x6709;data=writeback, ordered, journal&#x8FD9;&#x4E2A;&#x6982;&#x5FF5;, &#x6240;&#x4EE5;, &#x5728;jbd&#x770B;&#x6765;, data&#x4E0D;&#x4F1A;journal)&lt;/p&gt;

&lt;p&gt;Phase 3: all the data buffers are written to a disk but their metadata still is in the volatile memory.   &#x8FD9;&#x65F6;, metadata&#x8FD8;&#x5728;&#x6613;&#x5931;&#x6027;&#x5B58;&#x50A8;&#x4E2D;.  Metadata flushing is not as straightforward as data buffer flushing, because metadata needs to be written to the log area and the actual positions on the disk need to be remembered.  &#x5199;metadata, &#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x6620;&#x5C04;&#x5173;&#x7CFB;.
This phase starts with flushing these metadata buffers, for which a journal descriptor block is acquired. The journal descriptor block stores the mapping of each metadata buffer in the journal to its actual location on the disk in the form of tags. 
&#x4EE5;tag&#x65B9;&#x5F0F;&#x6765;&#x8BB0;&#x5F55;&#x6620;&#x5C04;&#x5173;&#x7CFB;.&lt;/p&gt;

&lt;p&gt;Phase 4 and Phase 5: both phase 4 and phase 5 wait on I/O completion notifications.  &lt;/p&gt;

&lt;p&gt;Phase 6: all the data and metadata is on safe storage, data at its actual locations and metadata in the journal. Now transactions need to be marked as committed so that it can be known that all the updates are safe in the journal. After this, the transaction is moved to the committed state, T_COMMIT.&lt;/p&gt;

&lt;p&gt;Phase 7:do checkpoint processing.
Phase 8: the transaction is marked as being in the finished state, T_FINISHED. &lt;/p&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;4. revoke(&#x64A4;&#x9500;)&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;For example consider the following sequence of steps when the filesystem is mounted in metadata only journalling mode. &#x8003;&#x8651;&#x5728;&#x4EC5;&#x5BF9;metadata&#x4F5C;&#x65E5;&#x5FD7;&#x4E0B;&#x7684;&#x5982;&#x4E0B;&#x60C5;&#x666F;:&lt;/p&gt;

&lt;p&gt;a) A metadata block &amp;#39;B&amp;#39; is journalled and contents are copied to journal.&lt;br&gt;
b) Later &amp;#39;B&amp;#39; gets freed&lt;br&gt;
c) &amp;#39;B&amp;#39; is now used to write contents of user data, this is not journalled.&lt;br&gt;
&#x539F;&#x5148;&#x5757;&#x5185;&#x5BB9;&#x662F;metadata, &#x540E;&#x6765;&#x6539;&#x5176;&#x7528;&#x9014;&#x4E3A;&#x5B58;&#x50A8;data.&lt;/p&gt;

&lt;p&gt;Now if we crash and replay, we need to avoid replaying the contents of block &amp;#39;B&amp;#39; in journal over the user contents.&lt;/p&gt;

&lt;p&gt;&#x5728;crash&#x4E4B;&#x540E;&#x7684;replay&#x4E2D;, &#x6211;&#x4EEC;&#x8981;&#x907F;&#x514D;&#x5BF9; &#x539F;&#x5148;&#x662F;&#x65E5;&#x5FD7;&#x5757;, &#x4E4B;&#x540E;&#x6539;&#x4F5C;&#x4ED6;&#x7528;&#x7684;&#x5757; &#x8FDB;&#x884C;&#x64CD;&#x4F5C;.&lt;/p&gt;

&lt;p&gt;If there are transactions for the block after the last revoke record of a block, these ops are safe to replay. Any transactions which appear before the revoke record aren&amp;#39;t replayed.
 &#x5757;&#x51FA;&#x73B0;&#x5728;revoke record&#x4E4B;&#x540E;&#x7684;&#x4E8B;&#x52A1;&#x4E2D;, &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5B89;&#x5168;&#x5730;replay.
 The basic idea is that you don&amp;#39;t want to replay ops corresponding to a block which may have been freed. Also note that if there are multiple revoke records corresponding to a block in a journal, we only need to worry about the latest record ie...one with highest transaction id.
&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#x4E0D;&#x8981;&#x5BF9;&#x5DF2;&#x7ECF;&#x91CA;&#x653E;&#x6389;&#x7684;&#x5757;&#x8FDB;&#x884C;replay&#x64CD;&#x4F5C;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;linux-3.10.86/fs/jbd/revoke.c&lt;/p&gt;

&lt;p&gt;Revoke is the mechanism used to prevent old log records for deleted metadata from being replayed on top of newer data(data&#x65E0;&#x9700;&#x65E5;&#x5FD7;) using the same  blocks.  The revoke mechanism is used in two separate places:&lt;br&gt;
 Commit: during commit we write the entire list of the current transaction&amp;#39;s revoked blocks to the journal&lt;br&gt;
 Recovery: during recovery we record the transaction ID of all revoked blocks.  If there are multiple revoke records in the log for a single block, only the last one counts, and if there is a log entry for a block beyond the last revoke(&#x8FD9;&#x91CC;&#x7684;beyond&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x5728;revoke&#x7684;&#x8303;&#x56F4;&#x4E4B;&#x5916;, &#x4E5F;&#x5C31;&#x662F;&#x65F6;&#x95F4;&#x4E0A;&#x53D1;&#x751F;&#x5728;revoke&#x4E4B;&#x540E;), then that log entry still  gets replayed.&lt;/p&gt;

&lt;p&gt;We can get interactions between revokes and new log data within a single transaction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Block is revoked and then journaled:&lt;br&gt;
The desired end result is the journaling of the new block, so we cancel the revoke before the transaction commits.&lt;br&gt;
&#x6211;&#x4EEC;&#x5148;&#x5BF9;&#x5757;revoked, &#x7136;&#x540E;&#x5BF9;&#x8BE5;&#x5757;journaled, &#x8FD9;&#x6837;, &#x8FD9;&#x4E2A;&#x5757;&#x7684;&#x6700;&#x7EC8;&#x6548;&#x679C;&#x662F;&#x8981;&#x8BB0;&#x5F55;&#x5230;log&#x533A;&#x57DF;.
&#x6240;&#x4EE5;, &#x5728;transaction commits&#x65F6;, &#x65E0;&#x9700;&#x8BB0;&#x5F55;&#x8FD9;&#x4E2A;revoked&#x52A8;&#x4F5C;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Block is journaled and then revoked:&lt;br&gt;
The revoke must take precedence over the write of the block, so we need either to cancel the journal entry or to write the revoke later in the log than the log block.  In this case(&#x6307;&#x7684;&#x662F;Block is journaled and then revoked), we choose the latter: journaling a block cancels any revoke record for that block in the current transaction, so any revoke for that block in the transaction must have happened after the block was journaled and so the revoke must take precedence(&#x4F18;&#x5148;&#x6743;).&lt;br&gt;
&#x6709;&#x4E24;&#x79CD;&#x5904;&#x7406;&#x65B9;&#x5F0F;, &#x7B2C;2&#x79CD;&#x662F; &#x5148;&#x5B8C;&#x6210;journaled, &#x4E4B;&#x540E;&#x5199;revoked. TODO &#x539F;&#x56E0;&#x7684;&#x8BDD;, &#x8FD9;&#x91CC;&#x7684;&#x89E3;&#x91CA;&#x8FD8;&#x6CA1;&#x770B;&#x61C2;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Block is revoked and then written as data:&lt;br&gt;
The data write is allowed to succeed, but the revoke is &lt;em&gt;not&lt;/em&gt; cancelled.  We still need to prevent old log records from overwriting the new data.  We don&amp;#39;t even need to clear the revoke bit here.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="toc_4"&gt;&lt;h4&gt;5. &#x53C2;&#x8003;&#x8D44;&#x6599;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;Linux: The Journaling Block Device
&lt;a href="https://web.archive.org/web/20070926223043/http://kerneltrap.org/node/6741"&gt;https://web.archive.org/web/20070926223043/http://kerneltrap.org/node/6741&lt;/a&gt;
&lt;a href="http://mkatiyar.blogspot.com/2011/07/journal-jbd-revoke-mechanism.html"&gt;http://mkatiyar.blogspot.com/2011/07/journal-jbd-revoke-mechanism.html&lt;/a&gt;&lt;br&gt;
Understanding the Linux Kernel, 3rd Edition&lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x6570;&#x636E;&#x5E93;recovery&#x7684;&#x4E00;&#x4E9B;&#x57FA;&#x672C;&#x6982;&#x5FF5;</title>
      <link>https://awakening-fong.github.io/posts/database/db_recovery_concept.MD</link>
      <pubDate>2018-10-24</pubDate>
      <description>&lt;h2 id="toc_0"&gt;&lt;h5&gt;1. REDO, UNDO, checkpoint&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;Write Ahead Logging (WAL) is a standard approach to transaction logging.  Briefly, WAL&amp;#39;s central concept is that changes to data files (where tables and indexes reside) must be written only after those changes have been logged - that is, when log records have been flushed to permanent storage. When we follow this procedure, we do not need to flush data pages to disk on every transaction commit, because we know that in the event of a crash we will be able to recover the database using the log: any changes that have not been applied to the data pages will first be redone from the log records (this is roll-forward recovery, also known as REDO) and then changes made by uncommitted transactions will be removed from the data pages (roll-backward recovery - UNDO).  [1]&lt;br&gt;
&#x5DF2;commit&#x4F46;&#x672A;apply&#x7684;, &#x6267;&#x884C;REDO, &#x800C;&#x7531; &#x672A;commit&#x7684;&#x4E8B;&#x52A1; &#x7684;&#x4FEE;&#x6539; &#x9700;&#x8981;&#x6267;&#x884C;UNDO.   &lt;/p&gt;

&lt;p&gt;------------------ &lt;/p&gt;

&lt;p&gt;Its transaction recovery log contains log records of the following form:&lt;br&gt;
&lt;code&gt;
&amp;lt;txnId, objectId, beforeValue, afterValue&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&#x6709;&#x5982;&#x4E0B;log:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 &amp;lt;T1 BEGIN&amp;gt;
2 &amp;lt;T1, X, 1, 2&amp;gt;
3 &amp;lt;T2 BEGIN&amp;gt;
4 &amp;lt;T3 BEGIN&amp;gt;
5 &amp;lt;T2, Y, 1, 2&amp;gt;
6 &amp;lt;T2 COMMIT&amp;gt;
7 &amp;lt;T1, Y, 2, 3&amp;gt;
8 &amp;lt;T3, Z, 1, 2&amp;gt;
9 &amp;lt;CHECKPOINT&amp;gt;
10 &amp;lt;T1, X, 2, 3&amp;gt;
11 &amp;lt;T1, Y, 3, 4&amp;gt;
12 &amp;lt;T3, Z, 2, 3&amp;gt;
13 &amp;lt;T3 COMMIT&amp;gt;
14 &amp;lt;T1, Z, 3, 4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assume that the DBMS flushes all dirty pages when the recovery process finishes. What are the values of X, Y, and Z after the DBMS recovers the state of the database ?&lt;br&gt;
&#x7B54;: X=1, Y=2, Z=3&lt;br&gt;
checkpoint &#x5E76;&#x4E0D;&#x6697;&#x793A;&#x7740;commit, &#x672C;&#x4F8B;&#x4E2D;&#x6CA1;&#x6709;&#x5BF9;T1&#x8FDB;&#x884C;commit,&lt;br&gt;
&#x6240;&#x4EE5;, x&#x7EF4;&#x6301;&#x65E7;&#x503C;, &#x4E3A;1.&lt;br&gt;
Y&#x7684;&#x8BDD;, &#x770B; 6 &lt;T2 COMMIT&gt; &#x4E4B;&#x524D;, &#x4E3A;2.&lt;br&gt;
Z&#x7684;&#x8BDD;, &#x770B; 13 &lt;T3 COMMIT&gt;&#x4E4B;&#x524D;, &#x4E3A;3.  &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;While doing deferred updates with WAL, if we prevent the DBMS from writing dirty records to disk until the transaction commits, then we do not need to store their original values.
fong:&#x7531;&#x4E8E;&#x4E0D;&#x662F;steal, &#x4E0D;commit&#x5C31;&#x4E0D;&#x4F1A;&#x56DE;&#x5199;, &#x8FD9;&#x6837;, &#x5C31;&#x4E0D;&#x9700;&#x8981;undo, &#x4E5F;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x65E7;&#x503C;.&lt;/p&gt;

&lt;p&gt;The undo operation not only restores the data items to their old value,
but also writes log records to record the updates performed as part of the undo process. These log records are special &lt;strong&gt;&lt;em&gt;redo-only log&lt;/em&gt;&lt;/strong&gt; records, since they do not need to contain the old-value of the updated data item. [2]
&#x4E4B;&#x6240;&#x4EE5;&#x79F0;&#x4E3A; redo-only log, &#x5728;recovery&#x65F6;, &#x65E0;&#x9700;&#x8FDB;&#x884C;undo&#x64CD;&#x4F5C;.
&#x6BD4;&#x5982;&#x8BF4;,&lt;br&gt;
T1, X, 1, 2  (&#x683C;&#x5F0F;&#x4E3A; &#x4E8B;&#x52A1;id, key, &#x65E7;&#x503C;1, &#x65B0;&#x503C;2)&lt;br&gt;
&#x6CA1;&#x6709;commit, &#x7136;&#x540E;&#x6389;&#x7535;(&#x7B2C;1&#x56DE;)&lt;br&gt;
&#x91CD;&#x542F;&#x540E;, &#x6267;&#x884C;recovery, &#x5BF9;&#x4E8E;T1, &#x751F;&#x6210;&lt;br&gt;
CLR undo T1 ....&lt;br&gt;
&#x7136;&#x540E;&#x8FD8;&#x6709;&#x5176;&#x4ED6;log&#x8981;recovery, &#x7ED3;&#x679C;&#x7A81;&#x7136;&#x6389;&#x7535;(&#x7B2C;2&#x56DE;)&#x4E86;,&lt;br&gt;
&#x91CD;&#x542F;&#x540E;, &#x6267;&#x884C;recovery, &#x770B;&#x5230;&#x6709;CLR undo T1 ....&lt;br&gt;
&#x5BF9;&#x4E8E;&#x8FD9;&#x6761;&#x8BB0;&#x5F55;&#x662F;&#x4E0D;&#x4F1A; undo such an undo operation, &#x6240;&#x4EE5;,&#x662F; redo-only log.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;&lt;h5&gt;2. no-steal, force policy&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;One might expect that transactions would force-output all modified blocks to disk when they commit. Such a policy is called &lt;strong&gt;&lt;em&gt;the force policy&lt;/em&gt;&lt;/strong&gt;. The alternative, the no-force policy, allows a transaction to commit even if it has modified some blocks that have not yet been written back to disk. [2]&lt;br&gt;
&#x5982;&#x679C;&#x662F;the force policy, &#x90A3;&#x4E48;, &#x5F53;commit&#x65F6;, &#x5F3A;&#x5236;&#x8981;&#x6C42;&#x6240;&#x6709;&#x4FEE;&#x6539;&#x8FC7;&#x7684;&#x5757;&#x90FD;&#x5DF2;&#x7ECF;&#x5199;&#x5165;&#x78C1;&#x76D8;. &#x800C;no-force&#x7B56;&#x7565;, &#x5219;&#x4E0D;&#x8981;&#x6C42;&#x5DF2;&#x5199;&#x5165;&#x78C1;&#x76D8;, &#x5C31;&#x53EF;&#x4EE5;commit.  &lt;/p&gt;

&lt;p&gt;one might expect that blocks modified by a transaction that is still active should not be written to disk. This policy is called &lt;strong&gt;&lt;em&gt;the no-steal policy&lt;/em&gt;&lt;/strong&gt;. The alternative, &lt;strong&gt;&lt;em&gt;the steal policy&lt;/em&gt;&lt;/strong&gt;, allows the system to write modified blocks to disk even if the transactions that made those modifications have not all committed. [2]  &lt;/p&gt;

&lt;h2 id="toc_2"&gt;&lt;h5&gt;3. &#x53C2;&#x8003;&#x8D44;&#x6599;&lt;/h4&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.postgresql.org/docs/7.3/static/wal.html"&gt;https://www.postgresql.org/docs/7.3/static/wal.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Database System Concepts 6th edition&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>&#x4F7F;&#x7528;lab&#x6765;&#x7406;&#x89E3;raft</title>
      <link>https://awakening-fong.github.io/posts/distributed_system/raft_mit_6-824.MD</link>
      <pubDate>2018-10-16</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x80CC;&#x666F;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x4E3A;&#x7406;&#x89E3;raft, &#x53C2;&#x7167;2018&#x5E74;&#x7684; &lt;a href="https://pdos.csail.mit.edu/6.824/labs/lab-raft.html"&gt;https://pdos.csail.mit.edu/6.824/labs/lab-raft.html&lt;/a&gt; 
&#x8FDB;&#x884C;&#x5176;&#x4E2D;&#x7684;lab 2A &#x548C; 2B.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x4EE3;&#x7801;&#x5B9E;&#x73B0;/&#x534F;&#x8BAE;&#x7EC6;&#x8282;&lt;/h4&gt;&lt;/h1&gt;

&lt;h2 id="toc_2"&gt;&lt;h4&gt;2.1 &#x6587;&#x7AE0;&#x6458;&#x5F55;&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://thesquareplanet.com/blog/students-guide-to-raft/"&gt;https://thesquareplanet.com/blog/students-guide-to-raft/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;you might reasonably reset a peer&#x2019;s election timer whenever you receive an AppendEntries or RequestVote RPC, as both indicate that some other peer either thinks it&#x2019;s the leader, or is trying to become the leader. Intuitively, this means that we shouldn&#x2019;t be interfering. However, if you read Figure 2 carefully, it says:&lt;/p&gt;

&lt;p&gt;If election timeout elapses without receiving AppendEntries RPC &lt;strong&gt;&lt;em&gt;from current leader&lt;/em&gt;&lt;/strong&gt; or granting vote to candidate: convert to candidate. 
&#x200B;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;many would simply reset their election timer when they received a heartbeat, and then return success, without performing any of the checks specified in Figure 2. This is extremely dangerous. By accepting the RPC, the follower is implicitly telling the leader that their log matches the leader&#x2019;s log up to and including the prevLogIndex included in the AppendEntries arguments. Upon receiving the reply, the leader might then decide (incorrectly) that some entry has been replicated to a majority of servers, and start committing it.
&#x63A5;&#x6536;&#x5230;&#x5FC3;&#x8DF3;, &#x4E0D;&#x80FD;&#x7B80;&#x5355;&#x5730;&#x8FD4;&#x56DE;&#x6210;&#x529F;, &#x800C;&#x5E94;&#x8BE5; &#x5BF9;&#x6BD4;leader&#x53D1;&#x8FC7;&#x6765;&#x7684;prevLogIndex &#x548C; &#x81EA;&#x5DF1;(follower)&#x5DF2;&#x6709;&#x7684;log.
&#x8FD9;&#x6837;, &#x53EF;&#x4EE5;&#x5E94;&#x5BF9;&#x5982;&#x4E0B;&#x60C5;&#x51B5;: &#x5F53;&#x67D0;&#x4E2A;&#x8282;&#x70B9;&#x7F51;&#x7EDC;&#x65AD;&#x5F00;, &#x91CD;&#x65B0;&#x52A0;&#x5165;&#x96C6;&#x7FA4;&#x65F6;, &#x5C31;&#x80FD;&#x591F;&#x53CA;&#x65F6;&#x5730;&#x66F4;&#x65B0;&#x81EA;&#x8EAB;&#x6570;&#x636E;&#x5230;&#x6700;&#x65B0;&#x72B6;&#x6001;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://thesquareplanet.com/blog/raft-qa/"&gt;https://thesquareplanet.com/blog/raft-qa/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;applied &#x548C; committed &#x7684;&#x5173;&#x7CFB;:&lt;/p&gt;

&lt;p&gt;Any log entry that you have applied to the application state machine is &#x201C;applied&#x201D;. An entry should never be applied unless it has already been committed. An entry can be committed, but not yet applied. You will likely apply committed entries very soon after they become committed.
&#x5148;commit, &#x540E;apply.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_3"&gt;&lt;h4&gt;2.2 apply&#x7684;&#x5B9E;&#x73B0;&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;&#x56E0;&#x4E3A;follower&#x8981;&#x80FD;&#x591F;&#x4ECE;&#x53C2;&#x6570;&#x4E2D;&#x770B;&#x51FA;leader&#x7684;apply&#x53D8;&#x52A8;, &#x6545;&lt;br&gt;
&#x65B9;&#x6848;1: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;leader &#x5F80;[commitIndex] &#x5199;&#x5165;logA&lt;br&gt;&lt;/li&gt;
&lt;li&gt;args.LeaderCommit=commitIndex&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&#x53D1;&#x9001;&#x7F51;&#x7EDC;&#x5305;, follower&#x6DFB;&#x52A0;log&lt;br&gt;&lt;/li&gt;
&lt;li&gt;leader&#x6839;&#x636E;&#x6536;&#x5230;&#x7684;&#x5305;, &#x82E5;&#x8FC7;&#x534A;&#x6570;&#x5B8C;&#x6210;, &#x6267;&#x884C;apply,  commitIndex++&lt;br&gt;&lt;/li&gt;
&lt;li&gt;follower &#x63A5;&#x6536;&#x7684;&#x5FC3;&#x8DF3;&#x4E2D;LeaderCommit &#x53D8;&#x52A8;&#x4E86;, &#x6267;&#x884C;apply&#x52A8;&#x4F5C;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&#x65B9;&#x6848;2:&lt;br&gt;
AppendEntriesArgs &#x4E2D;&#x6DFB;&#x52A0;&#x65B0;&#x7684;&#x5B57;&#x6BB5; LeaderLastApply &#x6765;&#x5B9E;&#x73B0;&lt;/p&gt;

&lt;h2 id="toc_4"&gt;&lt;h4&gt;2.3 &#x4EE3;&#x7801;&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/awakening-fong/mit_6.824"&gt;https://github.com/awakening-fong/mit_6.824&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="toc_5"&gt;&lt;h4&gt;3 &#x5176;&#x4ED6;&#x65E0;&#x5173;&#x7D27;&#x8981;&#x7684;&lt;/h4&gt;&lt;/h1&gt;

&lt;h2 id="toc_6"&gt;&lt;h4&gt;3.1 &#x4F1A;&#x53D1;&#x751F;split vote&#x5417;?&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;&#x56E0;&#x4E3A; &#x8BBA;&#x6587;&#x4E2D;&#x7684; Figure 2&lt;br&gt;
&#x5BF9;RequestVote RPC, Receiver implementation:&lt;br&gt;
If votedFor is null or candidateId, and ....&lt;br&gt;
&#x6240;&#x4EE5;, &#x5BF9;&#x540C;&#x4E00;&#x4E2A;term, &#x4E00;&#x4E2A;follower&#x4E0D;&#x4F1A;&#x6295;&#x7ED9;2&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x5019;&#x9009;&#x4EBA;.&lt;/p&gt;

&lt;p&gt;&#x6240;&#x4EE5;, &#x53D1;&#x751F;split vote&#x7684;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#x662F;,&lt;br&gt;
votedFor &#x672A;&#x5199;&#x5165;&#x5B8C;&#x6210;, &#x56DE;&#x590D;&#x5019;&#x9009;&#x4EBA;. follower crash&#x5E76;&#x91CD;&#x542F;, &#x518D;&#x6295;&#x7ED9;&#x53E6;&#x4E00;&#x4E2A;&#x5019;&#x9009;&#x4EBA;.&lt;br&gt;
&#x90A3;&#x4E48;, &#x5982;&#x679C;&#x662F;  votedFor &#x5199;&#x5165;&#x5B8C;&#x6210;&#x540E;, &#x5728;&#x56DE;&#x590D;&#x5019;&#x9009;&#x4EBA;, &#x5C31;&#x4E0D;&#x4F1A;&#x53D1;&#x751F;split vote.&lt;/p&gt;

&lt;h1 id="toc_7"&gt;&lt;h4&gt;4. &#x53C2;&#x8003;&#x8D44;&#x6599;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf"&gt;https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf&lt;/a&gt;&lt;br&gt;
&lt;a href="https://thesquareplanet.com/blog/raft-qa/"&gt;https://thesquareplanet.com/blog/raft-qa/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://thesquareplanet.com/blog/students-guide-to-raft/"&gt;https://thesquareplanet.com/blog/students-guide-to-raft/&lt;/a&gt;  &lt;/p&gt;
</description>
    </item>
    <item>
      <title>RCU&#x5E38;&#x89C1;&#x95EE;&#x9898;</title>
      <link>https://awakening-fong.github.io/posts/other/rcu</link>
      <pubDate>2018-03-22</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x6CA1;&#x6709;&#x9501;&#x4FDD;&#x62A4;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x6709;&#x5982;&#x4E0B;&#x7ED3;&#x6784;&#x4F53;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct your_obj {
    struct hlist_node obj_node_hlist;
    struct rcu_head rcu_head;   
    atomic_t refcnt;
    int id;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x9519;&#x8BEF;&#x5199;&#x6CD5;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hlist_del_init_rcu(&amp;amp;your_obj-&amp;gt;obj_node_hlist);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6B63;&#x786E;&#x5199;&#x6CD5;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spin_lock(&amp;amp;obj_hash_lock[hash]);
hlist_del_init_rcu(&amp;amp;your_obj-&amp;gt;obj_node_hlist);
spin_unlock(&amp;amp;obj_hash_lock[hash]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x9519;&#x8BEF;&#x539F;&#x56E0;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rcu_read_lock
hash = xxx
hlist_for_each_entry_rcu(tpos, pos, &amp;amp;obj_hlist[hash], obj_node_hlist) {
    xxx
}
rcu_read_unlock();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x5047;&#x5982;&#x6211;&#x4EEC;&#x4F7F;&#x7528; &lt;code&gt;hlist_for_each_entry_rcu&lt;/code&gt; &#x6765;&#x904D;&#x5386;&#x94FE;&#x8868;, &#x5728;&#x6CA1;&#x6709;&#x9501;&#x4FDD;&#x62A4;&#x65F6;, &#x5F53;&#x6709;&#x4E24;&#x4E2A;&lt;code&gt;hlist_del_init_rcu&lt;/code&gt;&#x5728;&#x5E76;&#x884C;&#x6267;&#x884C;&#x65F6;, &#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x6211;&#x4EEC;&#x904D;&#x5386;&#x51FA;&#x9519;.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2 &#x5185;&#x5B58;&#x91CA;&#x653E;01&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x9519;&#x8BEF;&#x5199;&#x6CD5;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void your_obj_unregister(struct your_obj *your_obj)
{
    unsigned int hash = 0;

    hash = your_hash(your_obj-&amp;gt;id);
    spin_lock(&amp;amp;obj_hash_lock[hash]);
    hlist_del_init_rcu(&amp;amp;your_obj-&amp;gt;obj_node_hlist);
    spin_unlock(&amp;amp;obj_hash_lock[hash]);
    your_obj_put(your_obj);
    return;
}

int your_obj_get_if_registered(struct your_obj *your_obj)
{
    unsigned int hash = 0;
    struct hlist_node *pos;
    struct your_obj *tpos;
    int is_registered = 0;
    rcu_read_lock(); 

    hash = your_hash(your_obj-&amp;gt;id);

    hlist_for_each_entry_rcu(tpos, pos, &amp;amp;obj_hlist[hash], obj_node_hlist) {
        if (tpos == your_obj) {
            is_registered = 1;
            your_obj_get(your_obj);
            break;
        }
    }
    rcu_read_unlock();
    return is_registered ? 0 : 1;

}

your_obj_put(struct your_obj *t)
{
    if(atomic_dec_and_test(&amp;amp;t-&amp;gt;refcnt)){
        kfree(t);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6B63;&#x786E;&#x7684;&#x5199;&#x6CD5;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void your_obj_free_rcu_callback(struct rcu_head *h)
{
    struct your_obj *t = container_of(h, struct your_obj, rcu_head);
    if (!atomic_read(&amp;amp;t-&amp;gt;refcnt)) {
        t-&amp;gt;obj_node_hlist.next = NULL;
        kfree(t);
    }
}

your_obj_put(struct your_obj *t)
{
    if(atomic_dec_and_test(&amp;amp;t-&amp;gt;refcnt)){        
        call_rcu(&amp;amp;t-&amp;gt;rcu_head, your_obj_free_rcu_callback);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x9519;&#x8BEF;&#x539F;&#x56E0;:
&#x6CA1;&#x6709;&#x4F7F;&#x7528;&lt;code&gt;call_rcu()&lt;/code&gt;&#x65F6;, 
&#x904D;&#x5386;&#x94FE;&#x8868;&#x65F6;, &#x5141;&#x8BB8;&lt;code&gt;hlist_del_init_rcu&lt;/code&gt;&#x628A;&#x8282;&#x70B9;&#x4ECE;&#x94FE;&#x8868;&#x4E0A;&#x8131;&#x79BB;, &#x5E76;&#x91CA;&#x653E;&#x5185;&#x5B58;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int your_obj_get_if_registered(struct your_obj *your_obj)
{
    ...
    if (tpos == your_obj) {
                                //&#x8FD9;&#x65F6;&#x8003;&#x8651;&#x53D1;&#x751F; your_obj_put -&amp;gt; kfree
        is_registered = 1;
        your_obj_get(your_obj);  //&#x4FEE;&#x6539;&#x5DF2;&#x7ECF;&#x91CA;&#x653E;&#x7684;&#x5185;&#x5B58;, &#x89E6;&#x53D1;BUG
        break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3 &#x5185;&#x5B58;&#x91CA;&#x653E;02&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x8003;&#x8651;&#x5982;&#x4E0B;&#x5E8F;&#x5217;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int your_obj_get_if_registered()                |          your_obj_unregister
{                                               |         {
    rcu_read_lock();                            |
                                                |
    hlist_for_each_entry_rcu( ... ) {           |
        if (tpos == your_obj) {                 | 
            is_registered = 1;                  |   
                                                |
                                                |           hlist_del_init_rcu
                                                |           your_obj_put
                                                |       }

            your_obj_get(your_obj); //&#x540E;&#x7EED;&#x5BFC;&#x81F4;rcu callback&#x91CD;&#x590D;&#x6CE8;&#x518C;, &#x7B2C;2&#x4E2A;callback&#x91CA;&#x653E;&#x5DF2;&#x91CA;&#x653E;&#x7684;&#x5185;&#x5B58;, &#x6545;BUG.
            break;
        }
    }
    rcu_read_unlock();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x4F7F;&#x7528;&#x5F15;&#x7528;&#x8BA1;&#x6570;&#x65F6;, get&#x5927;&#x6982;&#x7387;&#x662F;&#x9519;&#x8BEF;&#x7684;, &#x9700;&#x8981;&#x6539;&#x6210;&lt;code&gt;kref_get_unless_zero()&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;4 &#x6A21;&#x5757;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x6A21;&#x5757;&#x5185;&#x6709;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(atomic_dec_and_test(&amp;amp;t-&amp;gt;refcnt)){
        call_rcu(&amp;amp;t-&amp;gt;rcu_head, your_obj_free_rcu_callback);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x90A3;&#x4E48;, &#x6A21;&#x5757;&#x5378;&#x8F7D;&#x524D;&#x9700;&#x8981;rcu_barrier().
&#x5426;&#x5219;&#x9020;&#x6210;BUG, &#x56E0;&#x4E3A;callback&#x662F;&#x6A21;&#x5757;&#x5185;&#x7684;&#x51FD;&#x6570;, &#x800C;&#x6A21;&#x5757;&#x5DF2;&#x5378;&#x8F7D;&#x4E86;, &#x6545;BUG.&lt;/p&gt;

&lt;h1 id="toc_4"&gt;&lt;h4&gt;5. &#x76F8;&#x5173;&#x8D44;&#x6599;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;RCU Usage In the Linux Kernel: One Decade Later &lt;a href="https://pdos.csail.mit.edu/6.828/2017/readings/rcu-decade-later.pdf"&gt;https://pdos.csail.mit.edu/6.828/2017/readings/rcu-decade-later.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.kernel.org/doc/Documentation/RCU/checklist.txt"&gt;https://www.kernel.org/doc/Documentation/RCU/checklist.txt&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x4EC0;&#x4E48;&#x60C5;&#x51B5;&#x4E0B;bio-&gt;bi_end_io&#x53D1;&#x751F;&#x65F6;&#x4E2D;&#x65AD;&#x662F;&#x7981;&#x6B62;&#x7684;?</title>
      <link>https://awakening-fong.github.io/posts/io/bi_end_io_occur_but_irqs_disabled</link>
      <pubDate>2018-03-11</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x95EE;&#x9898;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x901A;&#x5E38;&#x6765;&#x8BF4;, &lt;code&gt;bio-&amp;gt;bi_end_io&lt;/code&gt;&#x662F;&#x8F6F;&#x4E2D;&#x65AD;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x8FD0;&#x884C;&#x7684;, 
&#x5728;&lt;code&gt;bio-&amp;gt;bi_end_io&lt;/code&gt;&#x4E2D;&#x5BF9;&lt;code&gt;in_irq()&lt;/code&gt;, &lt;code&gt;in_softirq()&lt;/code&gt;, &lt;code&gt;in_serving_softirq()&lt;/code&gt;,&lt;code&gt;irqs_disabled()&lt;/code&gt;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#x7684;&#x8BDD;,
&#x4EC5;&#x6709;&lt;code&gt;in_softirq()&lt;/code&gt;, &lt;code&gt;in_serving_softirq()&lt;/code&gt;&#x4F1A;&#x6210;&#x7ACB;.&lt;/p&gt;

&lt;p&gt;&#x73B0;&#x6709;&#x5982;&#x4E0B;&#x95EE;&#x9898;, &lt;code&gt;spin_lock_bh()&lt;/code&gt;&#x65E0;&#x6CD5;&#x7981;&#x6B62;&#x8F6F;&#x4E2D;&#x65AD;&#x8FD0;&#x884C;, why?&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x89E3;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x6D4B;&#x8BD5;&#x53D1;&#x73B0;, 
&lt;code&gt;bio-&amp;gt;bi_end_io()&lt;/code&gt;&#x4E2D;&#x6709;&#x65F6;&lt;code&gt;in_irq()&lt;/code&gt;, &lt;code&gt;in_softirq()&lt;/code&gt;, &lt;code&gt;in_serving_softirq()&lt;/code&gt;,&lt;code&gt;irqs_disabled()&lt;/code&gt;&#x90FD;&#x6210;&#x7ACB;, 
&#x6709;&#x65F6; &#x4EC5;&lt;code&gt;in_irq()&lt;/code&gt;, &lt;code&gt;irqs_disabled()&lt;/code&gt;&#x6210;&#x7ACB;.&lt;/p&gt;

&lt;p&gt;&#x67E5;&#x770B;&#x8C03;&#x7528;&#x6808;, &#x53D1;&#x73B0;&#x6709;&lt;code&gt;virtio_blk&lt;/code&gt;&#x6A21;&#x5757;, &#x4E5F;&#x5C31;&#x662F;&#x8FD0;&#x884C;&#x5728;&#x865A;&#x62DF;&#x673A;&#x73AF;&#x5883;&#x4E2D;.
&#x4EC5;&lt;code&gt;in_irq()&lt;/code&gt;, &lt;code&gt;irqs_disabled()&lt;/code&gt;&#x6210;&#x7ACB;&#x65F6;&#x7684;&#x8C03;&#x7528;&#x6808;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Pid: 3660, comm: mount Not tainted 2.6.32-debug #2
Call Trace:
 &amp;lt;IRQ&amp;gt;  [&amp;lt;ffffffffa03e18f5&amp;gt;] ? your_bio_end_io+0x2b5/0x310 [your_kmod]
 [&amp;lt;ffffffff811e3a5d&amp;gt;] ? bio_endio+0x1d/0x40
 [&amp;lt;ffffffffa0003efc&amp;gt;] ? dec_pending+0x1cc/0x320 [dm_mod]
 [&amp;lt;ffffffffa0003d7d&amp;gt;] ? dec_pending+0x4d/0x320 [dm_mod]
 [&amp;lt;ffffffffa00040ef&amp;gt;] ? clone_endio+0x9f/0xd0 [dm_mod]
 [&amp;lt;ffffffff811e3a5d&amp;gt;] ? bio_endio+0x1d/0x40
 [&amp;lt;ffffffff8128ef7b&amp;gt;] ? req_bio_endio+0x9b/0xe0
 [&amp;lt;ffffffff812906dc&amp;gt;] ? blk_update_request+0x11c/0x520
 [&amp;lt;ffffffff81290999&amp;gt;] ? blk_update_request+0x3d9/0x520
 [&amp;lt;ffffffff81290b07&amp;gt;] ? blk_update_bidi_request+0x27/0xa0
 [&amp;lt;ffffffff81291aae&amp;gt;] ? __blk_end_request_all+0x2e/0x60
 [&amp;lt;ffffffffa006321a&amp;gt;] ? blk_done+0x4a/0x110 [virtio_blk]
 [&amp;lt;ffffffffa005638c&amp;gt;] ? vring_interrupt+0x3c/0xe0 [virtio_ring]
 [&amp;lt;ffffffff810fc970&amp;gt;] ? handle_IRQ_event+0x50/0x160
 [&amp;lt;ffffffff810ff2f0&amp;gt;] ? handle_edge_irq+0xe0/0x170
 [&amp;lt;ffffffff8100fdc9&amp;gt;] ? handle_irq+0x49/0xa0
 [&amp;lt;ffffffff81570e7c&amp;gt;] ? do_IRQ+0x6c/0xf0
 [&amp;lt;ffffffff8100ba93&amp;gt;] ? ret_from_intr+0x0/0x11
 &amp;lt;EOI&amp;gt;  [&amp;lt;ffffffff8118dd73&amp;gt;] ? __kmalloc+0x143/0x2c0
 [&amp;lt;ffffffffa00c4e87&amp;gt;] ? ext4_mb_add_groupinfo+0xd7/0x1e0 [ext4]
 [&amp;lt;ffffffffa00c4e87&amp;gt;] ? ext4_mb_add_groupinfo+0xd7/0x1e0 [ext4]
 [&amp;lt;ffffffffa00c5152&amp;gt;] ? ext4_mb_init+0x1c2/0x450 [ext4]
 [&amp;lt;ffffffffa00b7128&amp;gt;] ? ext4_fill_super+0x2358/0x2950 [ext4]
 [&amp;lt;ffffffff812b8684&amp;gt;] ? snprintf+0x34/0x40
 [&amp;lt;ffffffff811ac141&amp;gt;] ? get_sb_bdev+0x191/0x1d0
 [&amp;lt;ffffffffa00b4dd0&amp;gt;] ? ext4_fill_super+0x0/0x2950 [ext4]
 [&amp;lt;ffffffffa00b04f8&amp;gt;] ? ext4_get_sb+0x18/0x20 [ext4]
 [&amp;lt;ffffffff811ab51b&amp;gt;] ? vfs_kern_mount+0x7b/0x1b0
 [&amp;lt;ffffffff811ab6c2&amp;gt;] ? do_kern_mount+0x52/0x130
 [&amp;lt;ffffffff811cdc5b&amp;gt;] ? do_mount+0x2fb/0x920
 [&amp;lt;ffffffff8115a6d4&amp;gt;] ? strndup_user+0x64/0xc0
 [&amp;lt;ffffffff811ce310&amp;gt;] ? sys_mount+0x90/0xe0
 [&amp;lt;ffffffff8100b0d2&amp;gt;] ? system_call_fastpath+0x16/0x1b
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>&#x4F7F;&#x7528;ftrace&#x5206;&#x6790;&#x4E24;&#x65F6;&#x95F4;&#x70B9;&#x95F4;&#x9694;</title>
      <link>https://awakening-fong.github.io/posts/debug/ftrace_data_analysis_interval</link>
      <pubDate>2018-02-03</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x4F7F;&#x7528; python &#x63D0;&#x53D6;&#x51FA; interval&lt;/h4&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*

#&#x6DFB;&#x52A0;&#x76F8;&#x5E94;trace_printk, ftrace&#x8F93;&#x51FA;&#x7C7B;&#x4F3C;:
#           &amp;lt;...&amp;gt;-3084  [000] 352166.459260: your_func_01: your_point_01
#           &amp;lt;...&amp;gt;-2892  [000] 352166.459529: your_func_02: your_point_02

read_point_start = 1
f_in=open(&amp;#39;interval.ftrace&amp;#39;, &amp;#39;r&amp;#39;)
f_out = open(&amp;quot;interval.dat&amp;quot;, &amp;quot;wb&amp;quot;)
line_no = 1

while 1:
    line = f_in.readline()
    if not line:
        break
    #print line

    if read_point_start == 1:
        if &amp;quot;your_func_01&amp;quot; in line:
            val_point_start=line.split(&amp;quot;:&amp;quot;)[0].split(&amp;quot; &amp;quot;)[-1]
            read_point_start = 0
            print val_point_start,
    elif &amp;quot;your_func_02&amp;quot; in line:
            val_point_end=line.split(&amp;quot;:&amp;quot;)[0].split(&amp;quot; &amp;quot;)[-1]
            print val_point_end,
            interval = int((float(val_point_end) - float(val_point_start)) * 1000 * 1000)
            print interval
            f_out.write(str(line_no) + &amp;quot; &amp;quot; + str(interval)+&amp;#39;\n&amp;#39;)    
            line_no+=1
            read_point_start = 1

f_out.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x8F93;&#x51FA;&#x6587;&#x4EF6;&#x5185;&#x5BB9;  interval.dat&lt;/h4&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;1 269
2 150
3 161
4 78
5 21
6 18
7 63
8 134
9 453
10 139
11 26
12 57
13 34
14 18
15 46
16 312
17 17
18 101
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. your_plot_cmds.plt&#x5185;&#x5BB9;&lt;/h4&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;set terminal jpeg small
set output &amp;quot;gnuplot_interval.jpg&amp;quot;
#set terminal png  
#set output &amp;quot;interval.png&amp;quot;

#set key right bottom
set key left top
#set key 6,100

set xlabel &amp;quot;point&amp;quot;
set ylabel &amp;quot;(10^-3ms)&amp;quot;
set title &amp;quot;cnt&amp;quot;

#set xrange [0.5:12.5]
#set xtics 1, 1, 12
plot &amp;quot;interval.dat&amp;quot; with linespoints pointtype 7  pointsize 1

set output
unset key
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;4. &#x8FD0;&#x884C;gnuplot&lt;/h4&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;gnuplot  your_plot_cmds.plt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6548;&#x679C;:&lt;br&gt;
&lt;img src="/assets/media/gnuplot_interval.jpg"&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x8BA9;blktrace&#x8F93;&#x51FA;trace_printk&#x7684;&#x5185;&#x5BB9;</title>
      <link>https://awakening-fong.github.io/posts/debug/blktrace_insert_print</link>
      <pubDate>2018-01-20</pubDate>
      <description>&lt;p&gt;&#x6709;&#x65F6;&#x9700;&#x8981;&#x5728;blktrace&#x8F93;&#x51FA;&#x4E2D;&#x63D2;&#x5165;&#x4E00;&#x4E9B;&#x6253;&#x5370;. &#x7531;&#x4E8E;blktrace&#x662F;&#x57FA;&#x4E8E;ftrace&#x7684;, &#x6545;&#x8003;&#x8651;&#x8F6C;&#x7528;ftrace&#x6765;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x76EE;&#x7684;.&lt;/p&gt;

&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. ftrace&#x7684;&#x8FC7;&#x6EE4;&lt;/h4&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# cat /sys/kernel/debug/tracing/events/block/block_rq_complete/format 
name: block_rq_complete
ID: 828
format:
    field:unsigned short common_type;   offset:0;   size:2; signed:0;
    field:unsigned char common_flags;   offset:2;   size:1; signed:0;
    field:unsigned char common_preempt_count;   offset:3;   size:1; signed:0;
    field:int common_pid;   offset:4;   size:4; signed:1;

    field:dev_t dev;    offset:8;   size:4; signed:0;
    field:sector_t sector;  offset:16;  size:8; signed:0;
    field:unsigned int nr_sector;   offset:24;  size:4; signed:0;
    field:int errors;   offset:28;  size:4; signed:1;
    field:char rwbs[8]; offset:32;  size:8; signed:1;
    field:__data_loc char[] cmd;    offset:40;  size:4; signed:1;

print fmt: &amp;quot;%d,%d %s (%s) %llu + %u [%d]&amp;quot;, ((unsigned int) ((REC-&amp;gt;dev) &amp;gt;&amp;gt; 20)), ((unsigned int) ((REC-&amp;gt;dev) &amp;amp; ((1U &amp;lt;&amp;lt; 20) - 1))), REC-&amp;gt;rwbs, __get_str(cmd), (unsigned long long)REC-&amp;gt;sector, REC-&amp;gt;nr_sector, REC-&amp;gt;errors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8BBE;&#x7F6E;&#x8FC7;&#x6EE4;&#x6761;&#x4EF6;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;#39;dev == 264241152&amp;#39; &amp;gt; /sys/kernel/debug/tracing/events/block/filter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8BBE;&#x7F6E;&#x8FC7;&#x6EE4;&#x6761;&#x4EF6;&#x540E;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /sys/kernel/debug/tracing/events/block/block_rq_complete/filter 
dev == 264241152
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# cat /sys/kernel/debug/tracing/events/block/filter 
### global filter ###
# Use this to set filters for multiple events.
# Only events with the given fields will be affected.
# If no events are modified, an error message will be displayed here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x597D;&#x50CF;&#x6CA1;&#x6709;&#x751F;&#x6548;&#x4F3C;&#x7684;,  &#x4F46;&#x5DF2;&#x751F;&#x6548;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /sys/kernel/debug/tracing/events/block/block_bio_bounce/filter 
dev == 264241152
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x7531;&#x4E8E;block_unplug&#x7B49;&#x683C;&#x5F0F;&#x6CA1;&#x6709;dev, &#x6545;&#x4E0D;&#x4F1A;&#x8FC7;&#x6EE4;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /sys/kernel/debug/tracing/events/block/block_unplug/filter 
none
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; &#x6216;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;#39;dev == 264241152 || dev == 265289729 || dev ==265289732&amp;#39; &amp;gt; /sys/kernel/debug/tracing/events/block/filter
echo 1 &amp;gt; /sys/kernel/debug/tracing/events/block/enable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6548;&#x679C;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /sys/kernel/debug/tracing/trace_pipe
   systemd-udevd-25619 [000] .... 84980.888417: block_bio_queue: 252,0 R 2056064 + 8 [systemd-udevd]
   systemd-udevd-25619 [000] .N.. 84980.888429: block_bio_queue: 253,4 R 2056064 + 8 [systemd-udevd]
   systemd-udevd-25619 [000] .N.. 84980.888439: block_plug: [systemd-udevd]
   systemd-udevd-25619 [000] .N.. 84980.888441: block_unplug: [systemd-udevd] 1
            sshd-21711 [000] d.H. 84980.888658: block_bio_complete: 253,4 R 2056064 + 8 [0]
            sshd-21711 [000] d.H. 84980.888661: block_bio_complete: 253,4 R 2056064 + 8 [0]
   systemd-udevd-25619 [000] .... 84980.888742: block_bio_queue: 252,0 R 2056064 + 8 [systemd-udevd]
   systemd-udevd-25619 [000] .N.. 84980.888746: block_bio_queue: 253,4 R 2056064 + 8 [systemd-udevd]
            sshd-21711 [000] d.H. 84980.888930: block_bio_complete: 253,4 R 2056064 + 8 [0]
            sshd-21711 [000] d.H. 84980.888932: block_bio_complete: 253,4 R 2056064 + 8 [0]
             fio-25618 [000] .... 84980.988455: block_bio_queue: 252,0 WS 0 + 8 [fio]
        biowr_00-21649 [000] .... 84980.988511: block_bio_queue: 253,1 W 230796 + 9 [biowr_00]
        biowr_00-21649 [000] .... 84980.988526: block_plug: [biowr_00]
        biowr_00-21649 [000] .... 84980.988527: block_unplug: [biowr_00] 1
          &amp;lt;idle&amp;gt;-0     [000] d.h. 84980.998134: block_bio_complete: 253,1 W 230796 + 9 [0]
          &amp;lt;idle&amp;gt;-0     [000] dNh. 84980.998145: block_bio_complete: 252,0 WS 0 + 8 [-2128359984]
        lsync_00-21650 [000] .... 84980.998158: block_bio_queue: 253,4 WS 0 + 8 [lsync_00]
        lsync_00-21650 [000] .... 84980.998164: block_plug: [lsync_00]
        lsync_00-21650 [000] .... 84980.998164: block_unplug: [lsync_00] 1
            sshd-21711 [000] d.H. 84980.998469: block_bio_complete: 253,4 WS 0 + 8 [0]
   systemd-udevd-25619 [000] .... 84980.999310: block_bio_queue: 252,0 R 2056064 + 8 [systemd-udevd]
   systemd-udevd-25619 [000] .N.. 84980.999323: block_bio_queue: 253,4 R 2056064 + 8 [systemd-udevd]
   systemd-udevd-25619 [000] .N.. 84980.999329: block_plug: [systemd-udevd]
   systemd-udevd-25619 [000] .N.. 84980.999330: block_unplug: [systemd-udevd] 1
          &amp;lt;idle&amp;gt;-0     [000] d.h. 84980.999668: block_bio_complete: 253,4 R 2056064 + 8 [0]
          &amp;lt;idle&amp;gt;-0     [000] d.h. 84980.999675: block_bio_complete: 253,4 R 2056064 + 8 [0]
   systemd-udevd-25619 [000] .... 84981.000032: block_bio_queue: 252,0 R 2056064 + 8 [systemd-udevd]
   systemd-udevd-25619 [000] .N.. 84981.000045: block_bio_queue: 253,4 R 2056064 + 8 [systemd-udevd]
            sshd-21711 [000] d.H. 84981.000366: block_bio_complete: 253,4 R 2056064 + 8 [0]
            sshd-21711 [000] d.H. 84981.000370: block_bio_complete: 253,4 R 2056064 + 8 [0]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x6548;&#x679C;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x4E0D;&#x542B;&#x6709;trace printk&#x65F6;, ftrace&#x7684;&#x8F93;&#x51FA;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;idle&amp;gt;-0     [000] dNh. 84980.998145: block_bio_complete: 252,0 WS 0 + 8 [-2128359984]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6DFB;&#x52A0; trace printk&#x540E;, &#x6BD4;&#x5982;, &lt;code&gt;my_read_endio()&lt;/code&gt;&#x6709;&#x4EE3;&#x7801;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(wrapper-&amp;gt;err)
    trace_printk(&amp;quot;%s error:%d\n&amp;quot;, __func__, wrapper-&amp;gt;err);
trace_block_bio_complete(bdev_get_queue(wrapper-&amp;gt;bio-&amp;gt;bi_bdev), wrapper-&amp;gt;bio, wrapper-&amp;gt;err);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ftrace&#x7684;&#x8F93;&#x51FA;&#x6548;&#x679C;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sshd-2911  [000] d.H.   246.153491: my_read_endio: my_read_endio error:1935632128
sshd-2911  [000] d.H.   246.153491: block_bio_complete: 252,0 R 2056064 + 8 [1935632128]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>x86-64&#x4E0B;, crash&#x901A;&#x8FC7;bt -f&#x627E;&#x51FA;&#x51FD;&#x6570;&#x53C2;&#x6570;</title>
      <link>https://awakening-fong.github.io/posts/debug/crash_func_args_x86_64</link>
      <pubDate>2018-01-20</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x80CC;&#x666F;/&#x5F15;&#x8A00;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x4E0D;&#x540C;&#x4E8E;x86, x86-64&#x7684;&#x524D;6&#x4E2A;&#x53C2;&#x6570;&#x6CA1;&#x6709;&#x538B;&#x6808;, &#x800C;&#x662F;&#x901A;&#x8FC7;&#x5BC4;&#x5B58;&#x5668;&#x4F20;&#x9012;. &#x8FD9;&#x6837;, &#x4F3C;&#x4E4E;&#x65E0;&#x6CD5;&#x901A;&#x8FC7;bt -f&#x6765;&#x83B7;&#x5F97;&#x53C2;&#x6570;.
&#x672C;&#x6587;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;, &#x8BF4;&#x660E;x86-64&#x5728;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;, &#x4F9D;&#x65E7;&#x80FD;&#x591F;&#x83B7;&#x5F97;&#x51FD;&#x6570;&#x7684;&#x53C2;&#x6570;.&lt;/p&gt;

&lt;p&gt;&#x524D;6&#x4E2A;&#x53C2;&#x6570;&#x5206;&#x522B;&#x5B58;&#x653E;&#x5230;rdi, rsi, rdx, rcx, r8d, r9d.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x4F8B;&#x5B50;&lt;/h4&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;crash&amp;gt; bt
PID: 4392   TASK: ffff8801b7af0880  CPU: 0   COMMAND: &amp;quot;your_cmd&amp;quot;
 #0 [ffff8801836b3af0] schedule at ffffffff8157cc1d
 #1 [ffff8801836b3bc8] schedule_timeout at ffffffff8157dc75
 #2 [ffff8801836b3c98] structone_mod_free at ffffffffa0771156 [your_kmod]
 #3 [ffff8801836b3d08] free_structone at ffffffffa077146b [your_kmod]
 ...&#x7565;...
 #9 [ffff8801836b3eb8] kthread at ffffffff810ac69e
#10 [ffff8801836b3f48] kernel_thread at ffffffff8100c38a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8FD9;&#x91CC;&#x60F3;&#x77E5;&#x9053;&#x4F20;&#x9012;&#x7ED9;&lt;code&gt;structone_mod_free&lt;/code&gt;&#x7684;&#x53C2;&#x6570;&#x7684;&#x5177;&#x4F53;&#x503C;.
&#x5176;&#x539F;&#x578B;&#x662F; &lt;code&gt;void structone_mod_free(struct structone *structone)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;crash&amp;gt; bt -f
...&#x7701;&#x7565;...
 #1 [ffff8801836b3bc8] schedule_timeout at ffffffff8157dc75
    ffff8801836b3bd0: ffffffff8302e658 ffffffff810ace2a 
    ffff8801836b3be0: ffffffff8302e640 ffff8801bb635810 
    ffff8801836b3bf0: ffff8801bb635828 0000000000000046 
    ffff8801836b3c00: ffff8801bb635810 0000000000000282 
    ffff8801836b3c10: 0000000000000282 ffff8801bb635810 
    ffff8801836b3c20: ffff8801836b3c30 ffffffff810c6cad 
    ffff8801836b3c30: ffff8801836b3c50 0000000000000282 
    ffff8801836b3c40: ffff8801bb635810 0000000000000000 
    ffff8801836b3c50: ffff8801836b3c90 00000000bc3fea60 
    ffff8801836b3c60: ffff8801836b3ce0 ffff8801bb635800 
    ffff8801836b3c70: ffff8801836b3ca0 ffff8801b6d5eb60 (r13)
    ffff8801836b3c80: ffff8801bb635810(r14) 7fffffffffffffff  (r15)
    ffff8801836b3c90: ffff8801836b3d00 (bp)    ffffffffa0771156(ra) 
 #2 [ffff8801836b3c98] structone_mod_free at ffffffffa0771156 [your_kmod]
    ffff8801836b3ca0: 0000000000000000 ffff8801b7af0880 
    ffff8801836b3cb0: ffffffff810acb20 ffff8801bb635850 
    ffff8801836b3cc0: ffff8801bb635850 0000000000000282 
    ffff8801836b3cd0: ffff8801836b3ce0 ffff8801b6d5eb60 
    ffff8801836b3ce0: ffff8801b5fe76b8 ffff8801bb1091e0 
    ffff8801836b3cf0: 0000000000000000 0000000000000000 
    ffff8801836b3d00: ffff8801836b3d30 ffffffffa077146b 
 #3 [ffff8801836b3d08] free_structone at ffffffffa077146b [your_kmod]
 ...&#x7701;&#x7565;...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;crash&amp;gt; disass structone_mod_free
Dump of assembler code for function structone_mod_free:
   0xffffffffa07710b0 &amp;lt;+0&amp;gt;:     push   %rbp   #&#x5E94;&#x8BE5;&#x662F; ffff8801836b3d30
   0xffffffffa07710b1 &amp;lt;+1&amp;gt;:     mov    %rsp,%rbp
   0xffffffffa07710b4 &amp;lt;+4&amp;gt;:     sub    $0x60,%rsp
   0xffffffffa07710b8 &amp;lt;+8&amp;gt;:     mov    %rbx,-0x28(%rbp)  #
   0xffffffffa07710bc &amp;lt;+12&amp;gt;:    mov    %r12,-0x20(%rbp)
   0xffffffffa07710c0 &amp;lt;+16&amp;gt;:    mov    %r13,-0x18(%rbp)
   0xffffffffa07710c4 &amp;lt;+20&amp;gt;:    mov    %r14,-0x10(%rbp)
   0xffffffffa07710c8 &amp;lt;+24&amp;gt;:    mov    %r15,-0x8(%rbp)



   0xffffffffa07710cc &amp;lt;+28&amp;gt;:    nopl   0x0(%rax,%rax,1)
   0xffffffffa07710d1 &amp;lt;+33&amp;gt;:    mov    0x88(%rdi),%rbx   #&#x8BBF;&#x95EE;structone&#x7684;&#x6210;&#x5458;
   0xffffffffa07710d8 &amp;lt;+40&amp;gt;:    mov    %rdi,%r13  #&#x5907;&#x4EFD;&#x53C2;&#x6570;struct structone *structone
   0xffffffffa07710db &amp;lt;+43&amp;gt;:    test   %rbx,%rbx

   ...
   0xffffffffa077114e &amp;lt;+158&amp;gt;:   mov    %r15,%rdi
   0xffffffffa0771151 &amp;lt;+161&amp;gt;:   callq  0xffffffff8157da10 &amp;lt;schedule_timeout&amp;gt;  #&#x8FD9;&#x91CC;
   0xffffffffa0771156 &amp;lt;+166&amp;gt;:   test   %rax,%rax    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x4E0A;&#x9762;&#x7701;&#x7565;&#x4E86;&#x90E8;&#x5206;&#x6C47;&#x7F16;, &#x7701;&#x7565;&#x7684;&#x90A3;&#x90E8;&#x5206;&#x6CA1;&#x6709;&#x4FEE;&#x6539;&#x5230; %r13.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;crash&amp;gt; disass schedule_timeout
Dump of assembler code for function schedule_timeout:
   0xffffffff8157da10 &amp;lt;+0&amp;gt;:     push   %rbp
   0xffffffff8157da11 &amp;lt;+1&amp;gt;:     mov    %rsp,%rbp
   0xffffffff8157da14 &amp;lt;+4&amp;gt;:     sub    $0xc0,%rsp
   0xffffffff8157da1b &amp;lt;+11&amp;gt;:    mov    %rbx,-0x28(%rbp)
   0xffffffff8157da1f &amp;lt;+15&amp;gt;:    mov    %r12,-0x20(%rbp)
   0xffffffff8157da23 &amp;lt;+19&amp;gt;:    mov    %r13,-0x18(%rbp)
   0xffffffff8157da27 &amp;lt;+23&amp;gt;:    mov    %r14,-0x10(%rbp)
   0xffffffff8157da2b &amp;lt;+27&amp;gt;:    mov    %r15,-0x8(%rbp)   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x770B;&#x5230;&#x5C06;r13&#x7B2C;3&#x4E2A;&#x538B;&#x6808;. &lt;/p&gt;

&lt;p&gt;&#x7ED3;&#x5408;bt -f, &#x53EF;&#x77E5;&#x53C2;&#x6570;&#x5B58;&#x653E;&#x7684;&#x5730;&#x5740;&#x662F; 0xffff8801b6d5eb60.&lt;br&gt;
crash&amp;gt; p *(struct structone *)0xffff8801b6d5eb60&lt;br&gt;
&#x6216;&#x8005;  crash&amp;gt; structone 0xffff8801b6d5eb60&lt;br&gt;
&#x5373;&#x53EF;&#x77E5; structone &#x7684;&#x5177;&#x4F53;&#x503C;&#x4E86;.&lt;/p&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. &#x53C2;&#x8003;&#x8D44;&#x6599;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://people.redhat.com/anderson/crash_whitepaper/help_pages/bt.html"&gt;https://people.redhat.com/anderson/crash_whitepaper/help_pages/bt.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.x86-64.org/documentation/abi.pdf"&gt;http://www.x86-64.org/documentation/abi.pdf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x8BA9;source insight&#x8BC6;&#x522B;&#x975E;&#x6807;&#x51C6;&#x7684;&#x51FD;&#x6570;&#x5B9E;&#x73B0;</title>
      <link>https://awakening-fong.github.io/posts/tools/source_insight_custom_parsing</link>
      <pubDate>2018-01-12</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x95EE;&#x9898;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;drbd-8.4&#x4E2D;&#x6709;&#x5982;&#x4E0B;&#x4EE3;&#x7801;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BIO_ENDIO_TYPE drbd_request_endio BIO_ENDIO_ARGS(struct bio *bio, int error)
{
&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x7565;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8FD9;&#x91CC; &lt;code&gt;drbd_request_endio&lt;/code&gt; &#x4E0D;&#x4F1A;&#x88AB;source insight&#x5F53;&#x6210;&#x51FD;&#x6570;&#x540D;.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x5904;&#x7406;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;source insight&#x7248;&#x672C;4.0&lt;br&gt;
option- file type option -&lt;br&gt;
&#x5DE6;&#x4FA7;file type &#x9009; c/c++ source file,  &#x53F3;&#x4FA7; parsing,  language...&lt;br&gt;
&#x5F39;&#x51FA;&#x7684;&#x5BF9;&#x8BDD;&#x6846;&#x4E2D;,&lt;br&gt;
&#x5DE6;&#x4FA7;&#x9009; c/c++ language, &#x53F3;&#x4FA7;&#x70B9;&#x51FB; properties...  &lt;/p&gt;

&lt;p&gt;&#x5F39;&#x51FA;&#x7684;&#x5BF9;&#x8BDD;&#x6846;&#x4E2D;, 
&#x6807;&#x7B7E;&#x9875; custom parsing&lt;br&gt;
&#x6253;&#x94A9; Enable expressions below for parsing  &lt;/p&gt;

&lt;p&gt;Regular expression pattern:&lt;br&gt;
&#x586B;&#x5199; &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BIO_ENDIO_TYPE\w+\(.*\)\w+BIO_ENDIO_ARGS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Regular expression syntax:
&#x9009;Source Insight&lt;/p&gt;

&lt;p&gt;Finds this symbol type:
&#x9009; function
&#x5982;&#x56FE;&#x6240;&#x793A;:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/media/si_custom_parsing_expression.png" width="60%"  height="60%"&gt;&lt;/p&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. &#x6548;&#x679C;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;f7 &#x8F93;&#x5165;  &lt;code&gt;drbd_request_endio&lt;/code&gt; , &#x53EF;&#x4EE5;&#x5B9A;&#x4F4D;&#x5230;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x5B9E;&#x73B0;.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/media/si_custom_parsing_result.png" width="50%"  height="50%"&gt;&lt;/p&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;4. &#x9644;&#x4E0A;&#x5143;&#x5B57;&#x7B26;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x548C;vim&#x7B49;&#x4E0D;&#x592A;&#x4E00;&#x6837;. &#x5982;&#x4E0B;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\s matches a single space character.

\w matches a single white space character. In other words, \w matches either a tab or space character.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>&#x63A2;&#x6D4B;softlockup&#x7684;&#x539F;&#x7406;</title>
      <link>https://awakening-fong.github.io/posts/debug/softlockup</link>
      <pubDate>2017-06-10</pubDate>
      <description>&lt;p&gt;&#x672C;&#x6587;&#x4EE5;2.6.18&#x5185;&#x6838;&#x6765;&#x8BF4;&#x660E;.&lt;/p&gt;

&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x68C0;&#x6D4B;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x6BCF;&#x95F4;&#x9694;HZ, &#x4F1A;&#x5582;watchdog.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tick                         watchdog
|                              |
|           wakup              |
|- - - - -  - - -  - - - &amp;gt;     |
|check                         | touch
|                              |
|                              |
|           wakup              |
|- - - - -  - - -  - - - &amp;gt;     |
|check                         | touch
|                              |
|                              |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x82E5;watchdog&#x7EBF;&#x7A0B;&#x8FDF;&#x8FDF;&#x6CA1;&#x6709;&#x88AB;&#x8C03;&#x5EA6;&#x5230;, &#x5219;&#x5BFC;&#x81F4;watchdog&#x6CA1;&#x6709;touch, &#x8FD9;&#x6837;, tick &#x65F6;&#x949F;&#x4F1A;&#x68C0;&#x67E5;&#x5230;&#x8BE5;&#x95EE;&#x9898;, &#x62A5; soft lockup .&lt;/p&gt;

&lt;h2 id="toc_1"&gt;&lt;h4&gt;2. &#x6253;&#x5370;&#x51FA;&#x6765;&#x7684;&#x662F;&#x8C01;&#x7684;&#x6808;&lt;/h4&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;softlockup_tick
{
    if (time_after(jiffies, touch_timestamp + 10*HZ))
    {
        ...
        per_cpu(print_timestamp, this_cpu) = touch_timestamp;

        dump_stack(); 
        ...
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x95EE;&#x9898;:&#x4E0A;&#x9762;&#x8FD9;&#x4E2A;dump_stack()&#x6709;&#x610F;&#x4E49;&#x5417;? &#x6253;&#x5370;&#x51FA;&#x6765;&#x7684;&#x662F;&#x8C01;&#x7684;&#x6808;?&lt;/p&gt;

&lt;p&gt;&#x7B54;: &#x7531;&#x4E8E; watchdog &#x7EBF;&#x7A0B;&#x65E0;&#x6CD5;&#x8C03;&#x5EA6;&#x5230;, &#x90A3;&#x4E48;, &#x4E5F;&#x5C31;&#x662F;&#x6709; task &#x957F;&#x671F;&#x5360;&#x7528;&#x7740;cpu, &#x6240;&#x4EE5;, &#x65F6;&#x949F;&#x4E2D;&#x65AD;&#x53D1;&#x751F;&#x65F6;, &#x5927;&#x6982;&#x7387;&#x662F;&#x5904;&#x5728;&#x8FD9;&#x4E2A; &#x957F;&#x671F;&#x5360;&#x7528;&#x7684;cpu&#x7684;task&#x4E0A;, &#x6545; &#x8FD9;&#x91CC;dump_stack()&#x5927;&#x6982;&#x7387;&#x6253;&#x5370;&#x51FA; &#x8FD9;&#x4E2A;task. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x4E3A;&#x4F55;&#x4E2D;&#x65AD;handler&#x4E2D;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;current</title>
      <link>https://awakening-fong.github.io/posts/arm/current_in_interrupt_handler</link>
      <pubDate>2017-05-13</pubDate>
      <description>&lt;p&gt;&#x672C;&#x535A;&#x6587;&#x4EC5;&#x63D0;&#x51FA;&#x95EE;&#x9898;, &#x4E0D;&#x7ED9;&#x51FA;&#x7B54;&#x6848;. &#x795D;&#x73A9;&#x5F97;&#x5F00;&#x5FC3;.   &lt;/p&gt;

&lt;p&gt;&#x95EE;&#x9898;: &#x6211;&#x4EEC;&#x77E5;&#x9053; &#x5F53;&#x524D;task&#x53EF;&#x4EE5;&#x901A;&#x8FC7;current&#x6765;&#x83B7;&#x5F97;. ARM&#x4E0A;, &#x5176;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define current (get_current()) 
#define get_current() (current_thread_info()-&amp;gt;task)
static inline struct thread_info *current_thread_info(void)
{
    register unsigned long sp asm (&amp;quot;sp&amp;quot;);
    return (struct thread_info *)(sp &amp;amp; ~(THREAD_SIZE - 1));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x5BF9;&#x4E8E;ARM, &#x5176;sp&#x662F;banked&#x7684;, irq&#x6A21;&#x5F0F;&#x548C;SVC&#x6A21;&#x5F0F;&#x7684;sp&#x4E0D;&#x662F;&#x540C;&#x4E00;&#x4E2A;. &#x8FD9;&#x6837;, &#x4E2D;&#x65AD;handler&#x8FD8;&#x80FD;&#x901A;&#x8FC7;sp&#x6765;&#x83B7;&#x5F97;&#x5F53;&#x524D;task&#x5417;?&lt;/p&gt;

&lt;p&gt;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x662F;&#x672C;&#x95EE;&#x9898;&#x7684;&#x63D0;&#x793A;.&lt;br&gt;
&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x5E72;&#x6270;&#x5404;&#x4F4D;&#x601D;&#x8003;, &#x5DF2;&#x8BBE;&#x7F6E;&#x80CC;&#x666F;&#x8272;&#x4E3A;&#x9ED1;&#x8272;, &#x82E5;&#x8981;&#x67E5;&#x770B;&#x6587;&#x5B57;, &#x53EF;&#x901A;&#x8FC7;&#x6309;ctrl+a&#x7B49;&#x65B9;&#x6CD5;&#x67E5;&#x770B;.  &lt;/p&gt;

&lt;p style="background-color: rgb(0, 0, 0);"&gt;&#x4E2D;&#x65AD;handler&#x5728;SVC&#x6A21;&#x5F0F;&#x4E0B;&#x6267;&#x884C;&#x7684;.
&lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x4FE1;&#x53F7;</title>
      <link>https://awakening-fong.github.io/posts/other/signal</link>
      <pubDate>2017-02-26</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x53D1;&#x9001;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x4EE5;tkill&#x4E3A;&#x4F8B;&#x6765;&#x8BF4;&#x660E;.
linux-3.10.86/kernel/signal.c
&#x5047;&#x5B9A;&#x4E0D;&#x662F;&#x53D1;&#x9001;&#x7ED9;&#x7EC4;&#x7684;, &#x5373;_&lt;em&gt;send&lt;/em&gt;signal()&#x7684;@group&#x4E3A;0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do_tkill -&amp;gt; do_send_specific
|--find_task_by_vpid
|--check_kill_permission
|--do_send_sig_info -&amp;gt; send_signal
|   |--__send_signal


__send_signal
|--q=__sigqueue_alloc //new sigqueue instance
|--list_add_tail(&amp;amp;q-&amp;gt;list, &amp;amp;pending-&amp;gt;list);
|--&#x8BBE;&#x7F6E;q-&amp;gt;info&#x7684;&#x5404;&#x57DF;
|   |--q-&amp;gt;info.si_signo =
|   |--q-&amp;gt;info.si_pid =
|--complete_signal
|   |--signal_wake_up -&amp;gt; signal_wake_up_state
|   |   |--set_tsk_thread_flag(t, TIF_SIGPENDING);
|   |   |--wake_up_state(, |TASK_INTERRUPTIBLE) -&amp;gt; try_to_wake_up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x53D1;&#x9001;&#x4FE1;&#x53F7;&#x662F;&#x5C06;&#x4FE1;&#x53F7;&#x7684;&#x4FE1;&#x606F;&#x653E;&#x5165;&#x8FDB;&#x7A0B;&#x7684;&#x67D0;&#x94FE;&#x8868;&#x4E2D;, &#x5E76;&#x5728;thread info&#x4E2D;&#x7F6E;&#x4F4D;TIF_SIGPENDING.&lt;/p&gt;

&lt;p&gt;&#x6211;&#x4EEC;&#x4EC5;&#x5524;&#x9192;&#x5904;&#x4E8E;TASK&lt;em&gt;INTERRUPTIBLE&#x72B6;&#x6001;&#x7684;&#x8FDB;&#x7A0B;, 
&#x4E0D;&#x53BB;&#x5524;&#x9192;TASK&lt;/em&gt;UNINTERRUPTIBLE&#x72B6;&#x6001;&#x7684;&#x8FDB;&#x7A0B;.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x68C0;&#x6D4B;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;[Professional Linux Kernel Architecture] p388&lt;br&gt;
Signal queue processing is initiated by the kernel each time a switch is made from kernel mode to user mode.&lt;/p&gt;

&lt;p&gt;&#x5404;&#x4F53;&#x7CFB;&#x5B9E;&#x73B0;&#x4E0A;&#x4E0D;&#x4E00;&#x6837;, &#x4F46;&#x6700;&#x540E;&#x90FD;&#x662F;&#x8C03;&#x7528;&#x5230; do_signal.&lt;/p&gt;

&lt;p&gt;linux-3.10.86/arch/arm/kernel/signal.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do_work_pending 
{
    if (thread_flags &amp;amp; _TIF_SIGPENDING) {
        do_signal
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x95EE;&#x9898;:do&lt;em&gt;work&lt;/em&gt;pending&#x662F;&#x5426;&#x4F1A;&#x88AB; _&lt;em&gt;irq&lt;/em&gt;usr &#x8C03;&#x7528;?&lt;br&gt;
&#x7B54;: &#x4F1A;.&lt;br&gt;
linux-3.10.86/arch/arm/kernel/entry-armv.S&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__irq_usr:
...
b   ret_to_user_from_irq

ENTRY(ret_to_user_from_irq)
...
bne work_pending

work_pending:
    ...
    bl  do_work_pending  @&#x5B9A;&#x4E49;&#x5728;signal.c
    ...
    movlt   scno, #(__NR_restart_syscall - __NR_SYSCALL_BASE)
    ldmia   sp, {r0 - r6}           @ have to reload r0 - r6
    b   local_restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8FDB;&#x7A0B;&#x8FD0;&#x884C;&#x65F6;, &#x88AB;&#x786C;&#x4EF6;&#x4E2D;&#x65AD;, &#x4E2D;&#x65AD;&#x6267;&#x884C;&#x540E;, &#x4ECE;&#x5185;&#x6838;&#x8FD4;&#x56DE;&#x5230;&#x7528;&#x6237;&#x6001;, &#x4F1A;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x6709;&#x4FE1;&#x53F7;&#x9700;&#x8981;&#x5904;&#x7406;.
&#x8FD9;&#x6837;, &#x8FDB;&#x7A0B;&#x5728;&#x7528;&#x6237;&#x6001;&#x7684;&#x4EE3;&#x7801;&#x5C31;&#x88AB;&#x4FE1;&#x53F7;handler&#x6253;&#x65AD;&#x4E86;. &#x6240;&#x4EE5;, [Understanding the Linux Kernel, 3rd Edition]&#x4E2D;&#x6709;
this means that the current process must first execute the signal handler in User Mode before being allowed to resume its &#x201C;normal&#x201D; execution.
&#x8FD9;&#x91CC;&#x7684;its &#x201C;normal&#x201D; execution &#x5C31;&#x662F;&#x6CA1;&#x6709;&#x4FE1;&#x53F7;&#x65F6;, &#x7A0B;&#x5E8F;&#x6240;&#x5728;&#x6267;&#x884C;&#x7684;&#x6D41;&#x7A0B;.&lt;/p&gt;

&lt;h2 id="toc_2"&gt;&lt;h4&gt;2.1 &#x5185;&#x6838;&#x7EBF;&#x7A0B;&#x5BF9;&#x4FE1;&#x53F7;&#x7684;&#x68C0;&#x6D4B;&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;&#x7531;&#x4E8E;&#x662F;&#x5185;&#x6838;&#x7EBF;&#x7A0B;, &#x6240;&#x4EE5;, &#x5E76;&#x4E0D;&#x5B58;&#x5728;&#x8FD4;&#x56DE;&#x7528;&#x6237;&#x6001;&#x7684;&#x4E8B;&#x60C5;, &#x6240;&#x4EE5;, &#x4E0D;&#x4F1A;&#x7406;&#x4F1A;kill&#x53D1;&#x9001;&#x7684;&#x4FE1;&#x53F7;.
&#x5982;&#x679C;&#x5185;&#x6838;&#x7EBF;&#x7A0B;&#x9700;&#x8981;&#x54CD;&#x5E94;&#x4FE1;&#x53F7;&#xFF0C;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0;&#x4EE3;&#x7801;&#xFF1A;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (signal_pending(current))
{
    // &#x81EA;&#x5B9A;&#x4E49;&#x4FE1;&#x53F7;&#x5904;&#x7406;&#x51FD;&#x6570;
}
flush_signals(current);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;3. &#x6267;&#x884C;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x4FE1;&#x53F7;&#x7684;handler&#x662F;&#x5728;&#x7528;&#x6237;&#x6001;&#x6267;&#x884C;&#x7684;,  &#x9700;&#x8981;manipulates the user mode stack of the process &#x7684;&#x90A3;&#x4E9B;&#x9EBB;&#x70E6;&#x4E8B;.&lt;br&gt;
&#x8FD9;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#x672C;&#x6587;&#x672A;&#x5B8C;&#x6210;, &#x4EC5;&#x5199;&#x4E86;&#x4E00;&#x90E8;&#x5206;, &#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x5C31;&#x662F;&#x4E86;.&lt;/p&gt;

&lt;h1 id="toc_4"&gt;&lt;h4&gt;sandbox (&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x5F85;&#x6574;&#x7406;)&lt;/h4&gt;&lt;/h1&gt;

&lt;h1 id="toc_5"&gt;&lt;h4&gt;3.1 &#x6C47;&#x7F16;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;linux-3.10.86/arch/arm/kernel/entry-common.S&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;work_pending:
    mov r0, sp              @ &amp;#39;regs&amp;#39;
    mov r2, why             @ &amp;#39;syscall&amp;#39;
    @r1&#x662F;? &#x7B54;:see ENTRY(ret_to_user_from_irq)
    @r1&#x662F;struct thread_info&#x7684;&#x57DF;unsigned long     flags
    bl  do_work_pending  @&#x5B9A;&#x4E49;&#x5728;signal.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;linux-3.10.86/arch/arm/kernel/entry-header.S&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tbl .req    r8      @ syscall table pointer
/*
&#x5982;&#x679C;&#x662F;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;, &#x5219;r8&#x975E;0, &#x662F;&#x8FD9;&#x4E2A;&#x610F;&#x601D;&#x5417;?
&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x662F;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;, &#x5219;&#x4F1A;&#x7ED9;&#x51FA;syscall table pointer (&#x5C31;&#x662F;&#x4E0A;&#x9762;&#x7684;tbl  .req    r8), 
&#x6240;&#x4EE5;, &#x4E24;&#x8005;&#x662F;&#x5171;&#x7528;r8&#x7684;.
*/
/*
&#x95EE;&#x9898;:&#x5728;&#x90A3;&#x4E2A;&#x5730;&#x65B9;&#x7ED9;r8&#x8D4B;&#x503C;&#x7684;? 
&#x7B54;:linux-3.10.86/arch/arm/kernel/entry-common.S
    ENTRY(vector_swi)
    ...
    adr tbl, sys_call_table     @ load syscall table pointer
*/
why .req    r8      @ Linux syscall (!= 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;linux-3.10.86/arch/arm/kernel/signal.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;asmlinkage int
do_work_pending(struct pt_regs *regs, unsigned int thread_flags, int syscall)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3&#x4E2A;&#x53C2;&#x6570;&#x8DDF;&#x4E0A;&#x9762;&#x7684;&#x6CE8;&#x91CA;&#x543B;&#x5408;.
&#x8FD9;&#x91CC;@syscall&#x8868;&#x793A;&#x662F;&#x5426;&#x662F;&#x56E0;&#x4E3A;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;&#x800C;&#x9677;&#x5165;&#x5185;&#x6838;&#x7684;.&lt;/p&gt;

&lt;h1 id="toc_6"&gt;&lt;h4&gt;3.2 stack&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;do&lt;em&gt;work&lt;/em&gt;pending&#x7684;&#x76F8;&#x5173;&#x53C2;&#x6570;&#x4F20;&#x9012;&#x7ED9;&#x4E86; do_signal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static int do_signal(struct pt_regs *regs, int syscall)
{
    ...
    if (get_signal(&amp;amp;ksig)) { //&#x586B;&#x5145;ksig
        handle_signal(&amp;amp;ksig, regs);
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&#x4FEE;&#x6539;pt&lt;em&gt;regs&#x7684;pc, &#x8FD9;&#x6837;&#x540E;&#x7EED;&#x8BA9;&#x4FE1;&#x53F7;handler&#x8FD0;&#x884C;, &#x800C;&#x4E0D;&#x662F; the normal program code.
&#x5728;&#x6B64;&#x4E4B;&#x524D;, &#x8981;&#x5907;&#x4EFD;pt&lt;/em&gt;regs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;setup&lt;em&gt;rt&lt;/em&gt;frame&#x548C;setup&lt;em&gt;frame&#x7684;&#x533A;&#x522B;???  &#x5148;&#x4E0D;&#x7BA1;, &#x770B;setup&lt;/em&gt;frame.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;handle_signal
|--setup_frame
|   |--struct sigframe __user *frame = get_sigframe(ksig, regs, sizeof(*frame));
|   |   |--&#x53EF;&#x7B80;&#x5316;&#x7406;&#x89E3;&#x4E3A; return regs-&amp;gt;ARM_sp
|   |--setup_sigframe(struct sigframe __user *sf, struct pt_regs *regs, sigset_t *set)
|   |   |--//&#x4EE5;&#x4E0B; &#x5907;&#x4EFD;pt_regs&#x5230; __user&#x7684;&#x67D0;&#x5904;
|   |   |--__put_user_error(regs-&amp;gt;ARM_r0, &amp;amp;sf-&amp;gt;uc.uc_mcontext.arm_r0, ...);
|   |   |--__put_user_error(regs-&amp;gt;ARM_r1, &amp;amp;sf-&amp;gt;uc.uc_mcontext.arm_r1, err);
|   |   |--....
|   |   |--__put_user_error(regs-&amp;gt;ARM_pc, &amp;amp;sf-&amp;gt;uc.uc_mcontext.arm_pc, err);
|   |   |--__put_user_error(regs-&amp;gt;ARM_cpsr, &amp;amp;sf-&amp;gt;uc.uc_mcontext.arm_cpsr, err);
|   |--setup_return
|   |   |--unsigned long handler = (unsigned long)ksig-&amp;gt;ka.sa.sa_handler;
|   |   |--regs-&amp;gt;ARM_sp = (unsigned long)frame;
|   |   |--regs-&amp;gt;ARM_pc = handler;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x7B97;&#x4E86;, &#x5148;&#x4E0D;&#x770B;&#x4E86;.   &lt;/p&gt;
</description>
    </item>
    <item>
      <title>fixup_exception</title>
      <link>https://awakening-fong.github.io/posts/mm/fixup_exception</link>
      <pubDate>2017-02-25</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x4EC0;&#x4E48;&#x60C5;&#x51B5;&#x4E0B;&#x4F1A;&#x8C03;&#x7528;fixup_exception&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;linux-3.10.86/arch/arm/mm/fault.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static int __kprobes
do_page_fault(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
{

    if (!user_mode(regs))
        goto no_context;


no_context:
    __do_kernel_fault(mm, addr, fsr, regs);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6240;&#x4EE5;,  &#x7528;&#x6237;&#x6001;(user&lt;em&gt;mode(regs))&#x53D1;&#x8D77;&#x7684; &#x8BFB;&#x6216;&#x5199; , 
copy to/from user&#x7B49;&lt;em&gt;&#x4E0D;&#x4F1A;&lt;/em&gt;&#x8C03;&#x7528;&#x5230; _&lt;/em&gt;do&lt;em&gt;kernel&lt;/em&gt;fault, &#x4E5F;&#x5C31;&#x4E0D;&#x4F1A;&#x8C03;&#x7528;fixup&lt;em&gt;exception&#x7684;.
(fixup&lt;/em&gt;exception &#x4EC5;&#x4F1A;&#x88AB; _&lt;em&gt;do&lt;/em&gt;kernel_fault&#x8C03;&#x7528;.)&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. get&lt;em&gt;user &#x548C; _&lt;/em&gt;ex_table&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;linux-3.10.86/arch/arm/include/asm/uaccess.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define __get_user_asm_byte(x,addr,err)             \
    __asm__ __volatile__(                   \
    &amp;quot;1: &amp;quot; TUSER(ldrb) &amp;quot; %1,[%2],#0\n&amp;quot;           \
    &amp;quot;2:\n&amp;quot;                          \
    &amp;quot;   .pushsection .fixup,\&amp;quot;ax\&amp;quot;\n&amp;quot;           \
    &amp;quot;   .align  2\n&amp;quot;                    \
    &amp;quot;3: mov %0, %3\n&amp;quot;               \
    &amp;quot;   mov %1, #0\n&amp;quot;               \
    &amp;quot;   b   2b\n&amp;quot;                   \
    &amp;quot;   .popsection\n&amp;quot;                  \
    &amp;quot;   .pushsection __ex_table,\&amp;quot;a\&amp;quot;\n&amp;quot;        \
    &amp;quot;   .align  3\n&amp;quot;                    \
    &amp;quot;   .long   1b, 3b\n&amp;quot;               \
    &amp;quot;   .popsection&amp;quot;                    \
    : &amp;quot;+r&amp;quot; (err), &amp;quot;=&amp;amp;r&amp;quot; (x)                 \
    : &amp;quot;r&amp;quot; (addr), &amp;quot;i&amp;quot; (-EFAULT)             \
    : &amp;quot;cc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x5728; _&lt;em&gt;ex&lt;/em&gt;table section&#x4E2D;&#x5B9A;&#x4E49;&#x4E86;&#x5982;&#x4E0B;&#x6570;&#x636E;:
.long   1b, 3b&lt;br&gt;
3b&#x662F; 1b&#x5904;&#x7684;&#x4FEE;&#x590D;&#x6307;&#x4EE4;&lt;br&gt;
&#x5F53;1b&#x5904;&#x53D1;&#x751F;&#x5F02;&#x5E38;&#x65F6;, &#x7CFB;&#x7EDF;&#x6839;&#x636E;&#x60C5;&#x51B5;, &#x4F1A;&#x8DF3;&#x8F6C;&#x5230;&#x6807;&#x53F7;3&#x7684;&#x6307;&#x4EE4;&#x5904;&#x7EE7;&#x7EED;&#x6267;&#x884C;.&lt;br&gt;
&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;, &#x5C06;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#x8BBE;&#x7F6E;&#x4E3A;-EFAULT, get&#x5230;&#x7684;&#x503C;&#x8BBE;&#x7F6E;&#x4E3A;0.&lt;/p&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. fixup_exception&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;linux-3.10.86/include/asm-generic/vmlinux.lds.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * Exception table
 */
#define EXCEPTION_TABLE(align)                      \
    . = ALIGN(align);                       \
    __ex_table : AT(ADDR(__ex_table) - LOAD_OFFSET) {       \
        VMLINUX_SYMBOL(__start___ex_table) = .;         \
        *(__ex_table)                       \
        VMLINUX_SYMBOL(__stop___ex_table) = .;          \
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;linux-3.10.86/arch/arm/mm/fault.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__do_kernel_fault(struct mm_struct *mm, unsigned long addr, unsigned int fsr,
          struct pt_regs *regs)
{
    /*
     * Are we prepared to handle this kernel fault?
     */
    if (fixup_exception(regs))
        return;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;linux-3.10.86/arch/arm/mm/extable.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int fixup_exception(struct pt_regs *regs)
{
    const struct exception_table_entry *fixup;
    fixup = search_exception_tables(instruction_pointer(regs));
    if (fixup) {
        regs-&amp;gt;ARM_pc = fixup-&amp;gt;fixup;
        ...
    }

    return fixup != NULL;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8FD9;&#x91CC;&#x4FEE;&#x6539;&#x4E86;pt&lt;em&gt;regs&#x7684;pc&#x503C;, &#x540E;&#x7EED;&#x5C06;pt&lt;/em&gt;regs&#x8FD8;&#x539F;, &#x4E5F;&#x5C31;&#x662F;&#x4FEE;&#x6539;&#x4E86;&#x7A0B;&#x5E8F;&#x7684;&#x6267;&#x884C;.&lt;/p&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;4. &#x4F8B;&lt;/h4&gt;&lt;/h1&gt;

&lt;h2 id="toc_4"&gt;&lt;h4&gt;4.1 &#x65AD;&#x70B9;&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;&#x4E0B;&#x65AD;&#x70B9;, &#x770B;&#x770B; &#x53D1;&#x751F;fixup&lt;em&gt;exception&#x7684;&#x4E0A;&#x4E0B;&#x6587;.
&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4EC5;&#x5728;fixup&lt;/em&gt;exception()&#x4E2D;if (fixup) &#x6210;&#x7ACB;&#x65F6;&#x7684;&#x65AD;&#x70B9;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) disass fixup_exception
Dump of assembler code for function fixup_exception:
   0xc001cf40 &amp;lt;+0&amp;gt;: mov r12, sp
   0xc001cf44 &amp;lt;+4&amp;gt;: push    {r3, r4, r11, r12, lr, pc}
   0xc001cf48 &amp;lt;+8&amp;gt;: sub r11, r12, #4
   0xc001cf4c &amp;lt;+12&amp;gt;:    push    {lr}        ; (str lr, [sp, #-4]!)
   0xc001cf50 &amp;lt;+16&amp;gt;:    bl  0xc000efa8 &amp;lt;__gnu_mcount_nc&amp;gt;
=&amp;gt; 0xc001cf54 &amp;lt;+20&amp;gt;:    mov r4, r0
   0xc001cf58 &amp;lt;+24&amp;gt;:    ldr r0, [r0, #60]   ; 0x3c
   0xc001cf5c &amp;lt;+28&amp;gt;:    bl  0xc00475c4 &amp;lt;search_exception_tables&amp;gt;
   0xc001cf60 &amp;lt;+32&amp;gt;:    cmp r0, #0
   0xc001cf64 &amp;lt;+36&amp;gt;:    ldrne   r3, [r0, #4] ;&#x8FD9;&#x4E2A;&#x504F;&#x79FB;&#x91CF;4, &#x6307;&#x5411;&#x4E86;fixup, &#x5BF9;&#x5E94;&#x4EE3;&#x7801;fixup-&amp;gt;fixup
   0xc001cf68 &amp;lt;+40&amp;gt;:    strne   r3, [r4, #60]   ; 0x3c
   0xc001cf6c &amp;lt;+44&amp;gt;:    subs    r0, r0, #0
   0xc001cf70 &amp;lt;+48&amp;gt;:    movne   r0, #1  ; fixup != NULL
   0xc001cf74 &amp;lt;+52&amp;gt;:    ldm sp, {r3, r4, r11, sp, pc}
End of assembler dump

(gdb) bt
#0  0xc001cf70 in fixup_exception (regs=0xc05706e8)
    at arch/arm/mm/extable.c:21
#1  0xc001d1a8 in __do_kernel_fault (mm=0x0, addr=0, fsr=5, 
    regs=0xc7827e78) at arch/arm/mm/fault.c:138
#2  0xc001d3d0 in do_page_fault (addr=0, fsr=5, regs=0xc7827e78)
    at arch/arm/mm/fault.c:393
#3  0xc001d6e4 in do_translation_fault (addr=&amp;lt;value optimized out&amp;gt;, 
    fsr=5, regs=&amp;lt;value optimized out&amp;gt;) at arch/arm/mm/fault.c:432
#4  0xc0008474 in do_DataAbort (addr=0, fsr=3226928864, 
    regs=0xc7827e78) at arch/arm/mm/fault.c:549
#5  0xc000e9d8 in __dabt_svc () at arch/arm/kernel/entry-armv.S:194
---Type &amp;lt;return&amp;gt; to continue, or q &amp;lt;return&amp;gt; to quit--- 
Backtrace stopped: frame did not save the PC



0xc001cf64 &amp;lt;+36&amp;gt;:   ldrne   r3, [r0, #4]
0xc001cf68 &amp;lt;+40&amp;gt;:   strne   r3, [r4, #60]   ; 0x3c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x65AD;&#x70B9;&#x5E94;&#x8BE5;&#x8BBE;&#x7F6E;&#x5728;  strne    r3, [r4, #60] ; regs-&amp;gt;ARM&lt;em&gt;pc = fixup-&amp;gt;fixup
&#x8FD9;&#x6837;&#x624D;&#x80FD;&#x901A;&#x8FC7;pt&lt;/em&gt;regs&#x77E5;&#x9053;&#x5F02;&#x5E38;&#x53D1;&#x751F;&#x524D; &#x53D1;&#x751F;&#x4E86;&#x4EC0;&#x4E48;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) b *0xc001cf68
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_5"&gt;&lt;h4&gt;4.2 &#x5F02;&#x5E38;&#x53D1;&#x751F;&#x524D;&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;b *0xc001cf68 &#x505C;&#x4E0B;&#x6765;&#x540E;, &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) disass $pc
Dump of assembler code for function fixup_exception:
   0xc001cf40 &amp;lt;+0&amp;gt;: mov r12, sp
   0xc001cf44 &amp;lt;+4&amp;gt;: push    {r3, r4, r11, r12, lr, pc}
   0xc001cf48 &amp;lt;+8&amp;gt;: sub r11, r12, #4
   0xc001cf4c &amp;lt;+12&amp;gt;:    push    {lr}        ; (str lr, [sp, #-4]!)
   0xc001cf50 &amp;lt;+16&amp;gt;:    bl  0xc000efa8 &amp;lt;__gnu_mcount_nc&amp;gt;
   0xc001cf54 &amp;lt;+20&amp;gt;:    mov r4, r0
   0xc001cf58 &amp;lt;+24&amp;gt;:    ldr r0, [r0, #60]   ; 0x3c
   0xc001cf5c &amp;lt;+28&amp;gt;:    bl  0xc00475c4 &amp;lt;search_exception_tables&amp;gt;
   0xc001cf60 &amp;lt;+32&amp;gt;:    cmp r0, #0
   0xc001cf64 &amp;lt;+36&amp;gt;:    ldrne   r3, [r0, #4]
=&amp;gt; 0xc001cf68 &amp;lt;+40&amp;gt;:    strne   r3, [r4, #60]   ; 0x3c
   0xc001cf6c &amp;lt;+44&amp;gt;:    subs    r0, r0, #0
   0xc001cf70 &amp;lt;+48&amp;gt;:    movne   r0, #1
   0xc001cf74 &amp;lt;+52&amp;gt;:    ldm sp, {r3, r4, r11, sp, pc}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;r3&#x5B58;&#x50A8;&#x7684;&#x662F; fixup&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) p /x $r3
$14 = 0xc044a79c
(gdb) info symbol $r3
__idmap_text_end + 1724 in section .text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[r4, #60]&#x539F;&#x5148;&#x8981;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#x7684;&#x4F4D;&#x7F6E;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) p /x $r4+60
$4 = 0xc7827eb4
(gdb) p /x  *0xc7827eb4
$5 = 0xc006e5dc  #&#x51FA;&#x9519;&#x6307;&#x4EE4;&#x662F;
(gdb) i sym 0xc006e5dc
cmpxchg_futex_value_locked + 80 in section .text

(gdb) i sym (*($r4+56))  # &#x539F;&#x672C;&#x8FD4;&#x56DE;
futex_init + 36 in section .init.text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6240;&#x4EE5;, &#x8C03;&#x7528;fixup_exception&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x662F;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;futex_init
|--futex_detect_cmpxchg
|   |--cmpxchg_futex_value_locked  //&#x8FD9;&#x91CC;&#x9762;&#x53D1;&#x751F;&#x5F02;&#x5E38;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_6"&gt;&lt;h4&gt;4.3 fixup &lt;/h4&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(gdb) disass (*($r4+60))
Dump of assembler code for function cmpxchg_futex_value_locked:
   0xc006e58c &amp;lt;+0&amp;gt;: mov r12, sp
   0xc006e590 &amp;lt;+4&amp;gt;: push    {r3, r4, r5, r6, r11, r12, lr, pc}
   0xc006e594 &amp;lt;+8&amp;gt;: sub r11, r12, #4
   0xc006e598 &amp;lt;+12&amp;gt;:    push    {lr}        ; (str lr, [sp, #-4]!)
   0xc006e59c &amp;lt;+16&amp;gt;:    bl  0xc000efa8 &amp;lt;__gnu_mcount_nc&amp;gt;
   0xc006e5a0 &amp;lt;+20&amp;gt;:    mov r4, sp
   0xc006e5a4 &amp;lt;+24&amp;gt;:    bic r12, r4, #8128  ; 0x1fc0
   0xc006e5a8 &amp;lt;+28&amp;gt;:    bic r12, r12, #63   ; 0x3f
   0xc006e5ac &amp;lt;+32&amp;gt;:    ldr r5, [r12, #4]
   0xc006e5b0 &amp;lt;+36&amp;gt;:    add r4, r5, #1
   0xc006e5b4 &amp;lt;+40&amp;gt;:    str r4, [r12, #4]
   0xc006e5b8 &amp;lt;+44&amp;gt;:    ldr r4, [r12, #8]
   0xc006e5bc &amp;lt;+48&amp;gt;:    adds    r5, r1, #4
   0xc006e5c0 &amp;lt;+52&amp;gt;:    sbcscc  r5, r5, r4
   0xc006e5c4 &amp;lt;+56&amp;gt;:    movcc   r4, #0
   0xc006e5c8 &amp;lt;+60&amp;gt;:    cmp r4, #0
   0xc006e5cc &amp;lt;+64&amp;gt;:    mvnne   r4, #13  ;&#x6839;&#x636E;&#x8FD9;&#x91CC;&#x7684;13, &#x5927;&#x6982;&#x5BF9;&#x5E94;if !access_ok  return -EFAULT
   0xc006e5d0 &amp;lt;+68&amp;gt;:    bne 0xc006e5fc &amp;lt;cmpxchg_futex_value_locked+112&amp;gt;
   0xc006e5d4 &amp;lt;+72&amp;gt;:    dmb sy
   0xc006e5d8 &amp;lt;+76&amp;gt;:    mvn r5, #13   
   0xc006e5dc &amp;lt;+80&amp;gt;:    ldrex   r6, [r1] ;===&#x5F15;&#x53D1;&#x5F02;&#x5E38;===
   0xc006e5e0 &amp;lt;+84&amp;gt;:    teq r6, r2
   0xc006e5e4 &amp;lt;+88&amp;gt;:    strexeq r4, r3, [r1]
   0xc006e5e8 &amp;lt;+92&amp;gt;:    movne   r4, #0
   0xc006e5ec &amp;lt;+96&amp;gt;:    teq r4, #0
   0xc006e5f0 &amp;lt;+100&amp;gt;:   bne 0xc006e5dc &amp;lt;cmpxchg_futex_value_locked+80&amp;gt;
   0xc006e5f4 &amp;lt;+104&amp;gt;:   dmb sy
   0xc006e5f8 &amp;lt;+108&amp;gt;:   str r6, [r0]
   0xc006e5fc &amp;lt;+112&amp;gt;:   ldr r1, [r12, #4]  ;access_ok()&#x5931;&#x8D25;&#x540E;&#x5230;&#x8FD9;&#x91CC;
   0xc006e600 &amp;lt;+116&amp;gt;:   sub r0, r1, #1
   0xc006e604 &amp;lt;+120&amp;gt;:   str r0, [r12, #4]
   0xc006e608 &amp;lt;+124&amp;gt;:   ldr r3, [r12]
   0xc006e60c &amp;lt;+128&amp;gt;:   tst r3, #2
   0xc006e610 &amp;lt;+132&amp;gt;:   bne 0xc006e61c &amp;lt;cmpxchg_futex_value_locked+144&amp;gt;
   0xc006e614 &amp;lt;+136&amp;gt;:   mov r0, r4
   0xc006e618 &amp;lt;+140&amp;gt;:   ldm sp, {r3, r4, r5, r6, r11, sp, pc}
   0xc006e61c &amp;lt;+144&amp;gt;:   bl  0xc04488e8 &amp;lt;preempt_schedule&amp;gt;
   0xc006e620 &amp;lt;+148&amp;gt;:   b   0xc006e614 &amp;lt;cmpxchg_futex_value_locked+136&amp;gt;
---Type &amp;lt;return&amp;gt; to continue, or q &amp;lt;return&amp;gt; to quit---
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x7EFC;&#x5408;&#x4E0A;&#x9762;&#x6765;&#x770B;, pt_regs&#x4E2D;&#x7684;pc&#x503C;&#x662F;&#x5DF2;&#x7ECF;&#x4FEE;&#x6B63;&#x8FC7;(&#x6839;&#x636E;&#x60C5;&#x51B5;-8 -4)&#x7684;&#x503C;&#x4E86;, &#x5BF9;&#x5417;?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmpxchg_futex_value_locked -&amp;gt; futex_atomic_cmpxchg_inatomic
{
...
: &amp;quot;=&amp;amp;r&amp;quot; (ret), &amp;quot;=&amp;amp;r&amp;quot; (val)
: &amp;quot;r&amp;quot; (oldval), &amp;quot;r&amp;quot; (newval), &amp;quot;r&amp;quot; (uaddr), &amp;quot;Ir&amp;quot; (-EFAULT)

}

#define EFAULT      14  /* Bad address */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x88AB;&#x7FFB;&#x8BD1;&#x4E3A;:  mvn  r5, #13  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ldrex   r6, [r1] ;&#x5F15;&#x53D1;&#x5F02;&#x5E38;

static inline int
futex_atomic_cmpxchg_inatomic(u32 *uval, u32 __user *uaddr,
                  u32 oldval, u32 newval)
{


}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;r1&#x662F; u32 __user *uaddr&lt;/p&gt;

&lt;p&gt;fixup&#x4EE3;&#x7801;&#x662F;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0xc044a79c &amp;lt;+1724&amp;gt;: mov r4, r5
0xc044a7a0 &amp;lt;+1728&amp;gt;: b   0xc006e5f4 &amp;lt;cmpxchg_futex_value_locked+104&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;r5&#x662F;-EFAULT, r4&#x662F;ret,&lt;br&gt;
&#x8BBE;&#x7F6E;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;-EFAULT, &#x4E24; dmb  sy &#x4E4B;&#x95F4;&#x7684;&#x4EE3;&#x7801;&#x5C31;&#x4E0D;&#x6267;&#x884C;&#x4E86;. &lt;/p&gt;

&lt;h2 id="toc_7"&gt;&lt;h4&gt;4.4 &#x770B;&#x4E0B;_&lt;em&gt;ex&lt;/em&gt;table&#x7684;&#x8BBE;&#x7F6E;&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;linux-3.10.86/arch/arm/include/asm/futex.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;futex_atomic_cmpxchg_inatomic
{
    ...
    smp_mb();
    __asm__ __volatile__(&amp;quot;@futex_atomic_cmpxchg_inatomic\n&amp;quot;
    &amp;quot;1: ldrex   %1, [%4]\n&amp;quot;
    &amp;quot;   teq %1, %2\n&amp;quot;
    &amp;quot;   ite eq  @ explicit IT needed for the 2b label\n&amp;quot;
    &amp;quot;2: strexeq %0, %3, [%4]\n&amp;quot;
    &amp;quot;   movne   %0, #0\n&amp;quot;
    &amp;quot;   teq %0, #0\n&amp;quot;
    &amp;quot;   bne 1b\n&amp;quot;
    __futex_atomic_ex_table(&amp;quot;%5&amp;quot;)
    : &amp;quot;=&amp;amp;r&amp;quot; (ret), &amp;quot;=&amp;amp;r&amp;quot; (val)
    : &amp;quot;r&amp;quot; (oldval), &amp;quot;r&amp;quot; (newval), &amp;quot;r&amp;quot; (uaddr), &amp;quot;Ir&amp;quot; (-EFAULT)
    : &amp;quot;cc&amp;quot;, &amp;quot;memory&amp;quot;);
    smp_mb();
...
}


#define __futex_atomic_ex_table(err_reg)            \
    &amp;quot;3:\n&amp;quot;                          \
    &amp;quot;   .pushsection __ex_table,\&amp;quot;a\&amp;quot;\n&amp;quot;        \
    &amp;quot;   .align  3\n&amp;quot;                    \
    &amp;quot;   .long   1b, 4f, 2b, 4f\n&amp;quot;           \
    &amp;quot;   .popsection\n&amp;quot;                  \
    &amp;quot;   .pushsection .fixup,\&amp;quot;ax\&amp;quot;\n&amp;quot;           \
    &amp;quot;   .align  2\n&amp;quot;                    \
    &amp;quot;4: mov %0, &amp;quot; err_reg &amp;quot;\n&amp;quot;          \
    &amp;quot;   b   3b\n&amp;quot;                   \
    &amp;quot;   .popsection&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8FD9;&#x91CC;1b, 4f,&lt;br&gt;
1b&#x6307;&#x7684;&#x662F;1:   ldrex   %1, [%4], &#x4E5F;&#x5C31;&#x662F;&#x5F15;&#x53D1;&#x5F02;&#x5E38;&#x7684;ldrex r6, [r1].&lt;br&gt;
4f&#x662F;4: mov %0, %5  &#x548C;       b 3b&lt;br&gt;
&#x4E5F;&#x5C31;&#x662F;mov    r4, r5 &#x548C; b    0xc006e5f4 &lt;/p&gt;

&lt;h2 id="toc_8"&gt;&lt;h4&gt;4.5 &#x5C0F;&#x7ED3;&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;linux-3.10.86/kernel/futex.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static void __init futex_detect_cmpxchg(void)
{
#ifndef CONFIG_HAVE_FUTEX_CMPXCHG
    u32 curval;

    if (cmpxchg_futex_value_locked(&amp;amp;curval, NULL, 0, 0) == -EFAULT)
        futex_cmpxchg_enabled = 1;
#endif
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8FD9;&#x91CC;&#x8981;&#x5224;&#x65AD;cmpxchg&lt;em&gt;futex&lt;/em&gt;value_locked&#x7684;&#x8FD4;&#x56DE;&#x503C;, &#x6B63;&#x597D;, fixup&#x4EE3;&#x7801;&#x5B8C;&#x6210;&#x4E86;&#x8FD9;&#x4EFB;&#x52A1;.
&#x5185;&#x6838;&#x8FD9;&#x6837;, &#x5B8C;&#x6210;&#x4E86;&#x4E00;&#x4E9B;&#x9700;&#x8981;detect&#x7684;&#x521D;&#x59CB;&#x5316;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>mmap&#x548C;fault handler</title>
      <link>https://awakening-fong.github.io/posts/mm/mmap_fault</link>
      <pubDate>2017-02-24</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x95EE;&#x9898;&#x5F15;&#x5165;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x6211;&#x4EEC;&#x60F3;&#x77E5;&#x9053;, &#x901A;&#x8FC7;mmap&#x6620;&#x5C04;&#x6587;&#x4EF6;, &#x7136;&#x540E;&#x8BFB;&#x53D6;, &#x662F;&#x5982;&#x4F55;&#x8BFB;&#x53D6;&#x5230;&#x6587;&#x4EF6;&#x7684;, &#x5176;&#x4E2D;&#x7684;fault handler&#x76F8;&#x5173;&#x7684;&#x5185;&#x5BB9;.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. ftrace&lt;/h4&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code class="c"&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;strings.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;

#define MEMSIZE 1024*4
#define MPFILE &amp;quot;./.ash_history&amp;quot;

//#define ON_OFF //tracing_on

void write_ftrace(char *path, char *val)
{
    char ftrace_d[50]=&amp;quot;/sys/kernel/debug/tracing/&amp;quot;;
    int len_d=strlen(ftrace_d);


    int fd_trace=open(strcat(ftrace_d,path), O_RDWR|O_TRUNC);
    if (fd_trace &amp;lt; 0) {
        printf(&amp;quot;open %s:%s\n&amp;quot;,path,strerror(errno));
        exit(1);
    }

    printf(&amp;quot;to write:%s %s\n&amp;quot;,path,val);

    int ret=write(fd_trace, val, strlen(val));
    if(ret&amp;lt;0)
    {
        printf(&amp;quot;write %s %s\n&amp;quot;,path,strerror(errno));
        exit(1);
    }


    if (0==strncmp(&amp;quot;trace&amp;quot;,path, sizeof(&amp;quot;trace&amp;quot;)))
    {
        close(fd_trace);
        return;
    }

    char val_read[20];
    memset(val_read,0,sizeof(val_read));
    pread(fd_trace, val_read, sizeof(val_read),0);
    printf(&amp;quot;read val:%s\n&amp;quot;,val_read);
    close(fd_trace);

}

void write_val(char *path, char *val)
{
    int fd=open(path, O_RDWR);
    if (fd &amp;lt; 0) {
        printf(&amp;quot;open %s:%s\n&amp;quot;,path,strerror(errno));
        exit(1);
    }

    printf(&amp;quot;to write:%s %s\n&amp;quot;,path, val);
    int ret=write(fd, val, strlen(val));
    if(ret&amp;lt;0)
    {
        printf(&amp;quot;write %s %s\n&amp;quot;,path,strerror(errno));
        exit(1);
    }

    char val_read[20];
    memset(val_read,0,sizeof(val_read));
    pread(fd, val_read, sizeof(val_read),0);
    printf(&amp;quot;read val:%s\n&amp;quot;,val_read);
    close(fd);
}


int main()
{
    char *ptr;
    int fd;
    int ret=-1;
    int i=-1;

    fd = open(MPFILE, O_RDWR);
    if (fd &amp;lt; 0) {
        perror(&amp;quot;open()&amp;quot;);
        exit(1);
    }

    ptr = mmap(NULL, MEMSIZE, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
    if (ptr == NULL) {
        perror(&amp;quot;malloc()&amp;quot;);
        exit(1);
    }

    /*&#x907F;&#x514D;page cache&#x5E72;&#x6270;*/
    if( posix_fadvise(fd,0,4096,POSIX_FADV_DONTNEED) != 0) {  
        printf(&amp;quot;Cache FADV_DONTNEED failed, %s\n&amp;quot;,strerror(errno));  
    }  
    else {  
        printf(&amp;quot;Cache FADV_DONTNEED done\n&amp;quot;);  
    }  

    //mount -t debugfs nodev /sys/kernel/debug/
    system(&amp;quot;mount -t debugfs nodev /sys/kernel/debug/&amp;quot;);



    /*
    ~ # echo 1 &amp;gt; /proc/sys/kernel/ftrace_enabled
    */

    write_val(&amp;quot;/proc/sys/kernel/ftrace_enabled&amp;quot;, &amp;quot;1&amp;quot;);

    int pid_cur=getpid();
    printf(&amp;quot;pid:%d\n&amp;quot;,pid_cur);
    char str_pid[25];
    memset(str_pid,0, sizeof(str_pid));
    snprintf(str_pid, sizeof(str_pid),&amp;quot;%d&amp;quot;, pid_cur);
    //  /sys/kernel/debug/tracing/set_ftrace_pid
    write_ftrace(&amp;quot;set_ftrace_pid&amp;quot;, str_pid);


    write_ftrace(&amp;quot;tracing_on&amp;quot;, &amp;quot;1&amp;quot;);


    /*# can set other filtering here
    echo function &amp;gt; ${ROOT_FTRACE}/current_tracer
    */
    write_ftrace(&amp;quot;current_tracer&amp;quot;, &amp;quot;function&amp;quot;);

    write_ftrace(&amp;quot;trace&amp;quot;, &amp;quot;0&amp;quot;);

    /*
    #echo 0 &amp;gt; ${ROOT_FTRACE}/trace
    echo start_trace_marker &amp;gt; ${ROOT_FTRACE}/trace_marker
    exec $* 
    */

    //write_ftrace(&amp;quot;trace_marker&amp;quot;, &amp;quot;start_trace_marker&amp;quot;);

   i=*ptr;  //&#x8FD9;&#x4E2A;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x8981;&#x8DDF;&#x8E2A;&#x7684;


    /*
    echo end_trace_marker &amp;gt; ${ROOT_FTRACE}/trace_marker
    echo 0  &amp;gt; ${ROOT_FTRACE}/tracing_on  #stop record to buffer
    */

    //write_ftrace(&amp;quot;trace_marker&amp;quot;, &amp;quot;end_trace_marker&amp;quot;);

    write_ftrace(&amp;quot;tracing_on&amp;quot;, &amp;quot;0&amp;quot;);
    system(&amp;quot;cat /sys/kernel/debug/tracing/trace &amp;gt; mmap.ftrace&amp;quot;);

    printf(&amp;quot;%x\n&amp;quot;, i);


    munmap(ptr, MEMSIZE);
    close(fd);

    exit(1);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. &#x7ED3;&#x679C;&#x5206;&#x6790;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;ARM&#x5E73;&#x53F0;, linux-3.10.86, ftrace&#x8F93;&#x51FA;&#x4E2D;&#x6709;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do_DataAbort &amp;lt;-__dabt_usr
do_page_fault &amp;lt;-do_DataAbort
down_read_trylock &amp;lt;-do_page_fault
_raw_spin_lock_irqsave &amp;lt;-__down_read_trylock
_raw_spin_unlock_irqrestore &amp;lt;-__down_read_trylock
find_vma &amp;lt;-do_page_fault
handle_mm_fault &amp;lt;-do_page_fault
handle_pte_fault &amp;lt;-handle_mm_fault
__do_fault &amp;lt;-handle_pte_fault
filemap_fault &amp;lt;-__do_fault
find_get_page &amp;lt;-filemap_fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x5206;&#x6790;: &#x7565;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>do_fork&#x548C;COW</title>
      <link>https://awakening-fong.github.io/posts/mm/do_fork_cow</link>
      <pubDate>2017-02-24</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x95EE;&#x9898;&#x5F15;&#x5165;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x6458;&#x81EA;APUE:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&#x7531;&#x4E8E;&#x5728;fork&#x4E4B;&#x540E;&#x8FDB;&#x7A0B;&#x8DDF;&#x968F;&#x7740;exec, &#x6240;&#x4EE5;&#x73B0;&#x5728;&#x7684;&#x5F88;&#x591A;&#x5B9E;&#x73B0;&#x5E76;&#x4E0D;&#x6267;&#x884C;&#x4E00;&#x4E2A;&#x7236;&#x8FDB;&#x7A0B;&#x6570;&#x636E;&#x6BB5;, &#x6808;&#x548C;&#x5806;&#x7684;&#x5B8C;&#x5168;&#x590D;&#x5236;. &#x4F5C;&#x4E3A;&#x66FF;&#x4EE3;, &#x4F7F;&#x7528;&#x4E86;COW&#x6280;&#x672F;. &#x8FD9;&#x4E9B;&#x533A;&#x57DF;&#x7531;&#x7236;&#x5B50;&#x8FDB;&#x7A0B;&#x5171;&#x4EAB;, &#x800C;&#x4E14;&#x5185;&#x6838;&#x5C06;&#x5B83;&#x4EEC;&#x7684;&#x8BBF;&#x95EE;&#x6743;&#x9650;&#x6539;&#x53D8;&#x4E3A;&#x53EA;&#x8BFB;&#x7684;. &#x5982;&#x679C;&#x7236;&#x5B50;&#x8FDB;&#x7A0B;&#x4E2D;&#x7684;&#x4EFB;&#x4E00;&#x4E2A;&#x8BD5;&#x56FE;&#x4FEE;&#x6539;&#x8FD9;&#x4E9B;&#x533A;&#x57DF;, &#x5219;&#x5185;&#x6838;&#x53EA;&#x4E3A;&#x4FEE;&#x6539;&#x533A;&#x57DF;&#x7684;&#x90A3;&#x5757;&#x5185;&#x5B58;&#x5236;&#x4F5C;&#x4E00;&#x4E2A;&#x526F;&#x672C;, &#x901A;&#x5E38;&#x662F;&#x865A;&#x62DF;&#x5B58;&#x50A8;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x4E00;&amp;quot;&#x9875;&amp;quot;.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&#x95EE;&#x9898;:&#x54EA;&#x91CC;&#x8BBE;&#x7F6E;&#x53EA;&#x8BFB;, &#x5982;&#x4F55;&#x77E5;&#x9053;&#x53EA;&#x8BFB;?&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x89E3;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x5FEB;&#x901F;tips:&lt;br&gt;
PTE entry is marked as un-writeable.&lt;br&gt;
But VMA is marked as writeable.  &lt;/p&gt;

&lt;p&gt;copy&lt;em&gt;one&lt;/em&gt;pte()&#x4F1A;&#x8C03;&#x7528; ptep&lt;em&gt;set&lt;/em&gt;wrprotect()&lt;/p&gt;

&lt;p&gt;&#x8FD8;&#x662F;&#x5148;&#x4ECE;dup_mm()&#x5F00;&#x59CB;&#x770B;&#x5427;.&lt;br&gt;
linux-3.10.86/kernel/fork.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct mm_struct *dup_mm(struct task_struct *tsk)
{
    struct mm_struct *mm, *oldmm = current-&amp;gt;mm;
    mm = allocate_mm();
    memcpy(mm, oldmm, sizeof(*mm)); 

    mm_init(mm, tsk)); //&#x91CC;&#x9762;&#x6D89;&#x53CA;&#x9875;&#x8868;
    err = dup_mmap(mm, oldmm);

}

static struct mm_struct *mm_init(struct mm_struct *mm, struct task_struct *p)
|-- mm_alloc_pgd(mm)
|   |--mm-&amp;gt;pgd = pgd_alloc(mm); //&#x5206;&#x914D;&#x9875;&#x8868;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;linux-3.10.86/arch/arm/mm/pgd.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pgd_alloc
{
    new_pgd = __pgd_alloc();
    memset(new_pgd, 0, USER_PTRS_PER_PGD * sizeof(pgd_t));  //&#x6E05;&#x7A7A;&#x9875;&#x8868;

    /*
     * Copy over the kernel and IO PGD entries  &#x62F7;&#x8D1D;&#x5185;&#x6838;&#x7684;&#x9875;&#x8868;, &#x4E14;&#x662F;first level&#x9875;&#x8868;
     */
    init_pgd = pgd_offset_k(0);  //&#x5185;&#x6838;&#x7684;&#x9875;&#x8868;
    memcpy(new_pgd + USER_PTRS_PER_PGD, init_pgd + USER_PTRS_PER_PGD,
               (PTRS_PER_PGD - USER_PTRS_PER_PGD) * sizeof(pgd_t)); 

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;linux-3.10.86/kernel/fork.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static int dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)
{
    struct vm_area_struct *mpnt;
    //&#x8FD9;&#x4E2A;&#x662F;&#x8FDB;&#x7A0B;&#x7684;&#x865A;&#x62DF;&#x5730;&#x5740;&#x533A;&#x57DF;, &#x975E;&#x5185;&#x6838;&#x7684;&#x865A;&#x62DF;&#x5730;&#x5740;&#x533A;&#x57DF;
    for (mpnt = oldmm-&amp;gt;mmap; mpnt; mpnt = mpnt-&amp;gt;vm_next) { 
        copy_page_range(mm, oldmm, mpnt);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8FD9;&#x91CC;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x8981;&#x5173;&#x6CE8;&#x7684;&#x90E8;&#x5206;&#x4E86;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;copy_page_range
|--copy_pud_range
|   |--copy_pmd_range
|   |   |--copy_pte_range
|   |   |   |--copy_one_pte

copy_one_pte
{
    /*
     * If it&amp;#39;s a COW mapping, write protect it both
     * in the parent and the child
     */
    if (is_cow_mapping(vm_flags)) {
        ptep_set_wrprotect(src_mm, addr, src_pte);
        pte = pte_wrprotect(pte);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>&#x5185;&#x6838;&#x4E2D; &#x901A;&#x8FC7; struct pt_regs &#x6765;&#x83B7;&#x53D6;  &#x7528;&#x6237;&#x4F20;&#x9012;&#x7684;&#x53C2;&#x6570;</title>
      <link>https://awakening-fong.github.io/posts/other/pt_regs_for_debug</link>
      <pubDate>2017-02-23</pubDate>
      <description>&lt;p&gt;&#x57FA;&#x4E8E; linux-2.6.35.7/drivers/char/mem.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;asm/ptrace.h&amp;gt;
#include &amp;lt;asm/uaccess.h&amp;gt;

static ssize_t kmsg_write(struct file *file, const char __user *buf,
              size_t count, loff_t *ppos)
{
    char *tmp;
    ssize_t ret;

    tmp = kmalloc(count + 1, GFP_KERNEL);
    if (tmp == NULL)
        return -ENOMEM;
    ret = -EFAULT;
    if (!copy_from_user(tmp, buf, count)) {
        tmp[count] = 0;
        //add
        #define STR_FOUND &amp;quot;sth_will_show_in_dmesg&amp;quot;
        if(NULL!=strstr(tmp,STR_FOUND))
        {
            struct pt_regs *usr_regs; 
            usr_regs=task_pt_regs(current); 
            if(valid_user_regs(usr_regs))
            {
                int fd=usr_regs-&amp;gt;ARM_r0;
                char *write_buf=usr_regs-&amp;gt;ARM_r1;
                int len=usr_regs-&amp;gt;ARM_r2;
                /*&#x7528;&#x6237;&#x6001;&#x7A0B;&#x5E8F;:
                #define STR_TMP &amp;quot;sth_will_show_in_dmesg&amp;quot;
                int fd=open(&amp;quot;/dev/kmsg&amp;quot;, O_WRONLY);
                write(fd,STR_TMP,strlen(STR_TMP));
                */

                /*
                &#x5185;&#x6838;&#x6253;&#x5370;:
                kmsg_write(),969:3 0x6fee0 22
                kmsg_write(),971:buf:sth_will_show_in_dmesg
                &#x4E5F;&#x5C31;&#x662F;&#x6253;&#x5370;&#x51FA;&#x4E86; &#x7528;&#x6237;&#x6001;&#x4F20;&#x9012;&#x7684;&#x53C2;&#x6570;
                */
                tmp_print(&amp;quot;%d 0x%x %d&amp;quot;,fd,write_buf,len);
                if(access_ok(VERIFY_READ, (void *) write_buf,strlen(write_buf)))
                    tmp_print(&amp;quot;buf:%s\n&amp;quot;,write_buf);
            }
            else
            {
                tmp_print(&amp;quot;not valid_user_regs\n&amp;quot;);
            }


        }
        //end add
        ret = printk(&amp;quot;%s&amp;quot;, tmp);
        if (ret &amp;gt; count)
            /* printk can add a prefix */
            ret = count;
    }
    kfree(tmp);
    return ret;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>&#x5185;&#x6838;&#x4E2D;&#x5E38;&#x89C1;&#x7684;&#x4F18;&#x5316;&#x65B9;&#x6CD5;</title>
      <link>https://awakening-fong.github.io/posts/other/optimize</link>
      <pubDate>2017-02-23</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x6279;&#x91CF;&#x5904;&#x7406;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;add&lt;em&gt;to&lt;/em&gt;page&lt;em&gt;cache&lt;/em&gt;lru,  &#x64CD;&#x4F5C;lru&#x7684;&#x8BDD;, &#x5148;&#x653E;&#x5230;per cpu&#x7684;lru cache (struct pagevec), &#x5F85;lru cache&#x5B58;&#x6EE1;&#x540E;drain.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x541E;&#x5410;&#x91CF;&#xFF08;Throughput&#xFF09;&#x548C;&#x65F6;&#x5EF6;&#xFF08;Latency&#xFF09;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;2.1   HZ &#x8BBE;&#x7F6E;&#x4E3A; 250, 1000&#x7B49;.&lt;/p&gt;

&lt;p&gt;2.2 
&#x4E2D;&#x65AD;&#x7EBF;&#x7A0B;&#x5316;&#x540E;, &#x541E;&#x5410;&#x91CF;&#x53EF;&#x80FD;&#x4E0B;&#x964D;, &#x4F46;&#x7CFB;&#x7EDF;&#x5176;&#x5B83;&#x5730;&#x65B9;&#x7684;&#x65F6;&#x5EF6;&#x53EF;&#x80FD;&#x6539;&#x5584;.&lt;/p&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. &#x7528;&#x7A7A;&#x95F4;&#x6362;&#x65F6;&#x95F4;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x7F13;&#x5B58;&#x4E4B;&#x7C7B;&#x7684;, &#x6BD4;&#x5982; &#x4E00;&#x4E9B;&#x6570;&#x503C;&#x8BA1;&#x7B97;, &#x5F00;&#x6839;&#x53F7;&#x4EC0;&#x4E48;&#x7684;.&lt;/p&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;4. &#x6536;&#x655B;?&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;radix tree&#x7684;tag, &#x4E0D;&#x5FC5;&#x9010;&#x4E2A;&#x5224;&#x65AD;&#x8BE5;&#x8282;&#x70B9; &#x5B50;&#x6811; &#x4E0B;&#x7684;&#x53F6;&#x5B50;. &#x8FD9;&#x4E2A;&#x53EF;&#x80FD;&#x4E5F;&#x53EF;&#x4EE5;&#x5F52;&#x5230;  &#x7F13;&#x5B58; &#x4E2D;.&lt;/p&gt;

&lt;p&gt;hash&#x5E94;&#x8BE5;&#x4E5F;&#x7B97;&#x8FD9;&#x4E2A;&#x7C7B;&#x522B;.&lt;/p&gt;

&lt;h1 id="toc_4"&gt;&lt;h4&gt;5. &#x7F13;&#x5B58;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;buddy system &#x4E00;&#x5F00;&#x59CB;&#x4ECE;zone&#x7684;&#x94FE;&#x8868;&#x4E2D;&#x5206;&#x914D;, &#x91CA;&#x653E;&#x65F6;&#x653E;&#x5230;per cpu&#x7684;pcp, &#x540E;&#x7EED;&#x4ECE;pcp&#x4E2D;&#x53D6;, &#x51CF;&#x5C11;&#x4E86;&#x9501;&#x7684;&#x95EE;&#x9898;.&lt;/p&gt;

&lt;h1 id="toc_5"&gt;&lt;h4&gt;6. &#x9501;&#x7684;&#x95EE;&#x9898;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;6.1 &#x4F7F;&#x7528;per cpu.
&#x6BD4;&#x5982; lru&#x95EE;&#x9898; per cpu&#x7684; pagevec.&lt;/p&gt;

&lt;p&gt;6.2&lt;br&gt;
1. lock&#x5168;&#x5C40;&#x7684;&#x94FE;&#x8868;,&lt;br&gt;
2. &#x4ECE;&#x5168;&#x5C40;&#x7684;&#x94FE;&#x8868;&#x4E2D;&#x6311;&#x9009;&#x653E;&#x5165;on a local list,&lt;br&gt;
3. unlock &#x5168;&#x5C40;&#x7684;&#x94FE;&#x8868;&lt;br&gt;
4. &#x5BF9; local list&#x8FDB;&#x884C;&#x76F8;&#x5BF9;&#x6BD4;&#x8F83;&#x8017;&#x65F6;&#x7684;&#x64CD;&#x4F5C;&lt;/p&gt;

&lt;p&gt;&#x8FD9;&#x4E2A;&#x6BD4;&#x8F83;&#x5E38;&#x89C1;, &#x6BD4;&#x5982; ...&lt;/p&gt;

&lt;p&gt;6.3 RCU&#x7684;&#x9002;&#x7528;&#x8303;&#x56F4;
...&lt;/p&gt;

&lt;p&gt;6.4 &#x628A;&#x76F8;&#x5173;&#x4FE1;&#x606F; &#x6324;&#x5230;  int &#x4E2D;, &#x66F4;&#x65B0;int&#x662F;&#x539F;&#x5B50;&#x7684;, &#x5C31;&#x7701;&#x6389;&#x4E86;&#x9501;.
&#x6BD4;&#x5982;, 
strct page&#x4E2D;&#x6709;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct { /* SLUB */
    unsigned inuse:16;
    unsigned objects:15;
    unsigned frozen:1; 
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>&#x5173;&#x4E8E;THREAD_START_SP</title>
      <link>https://awakening-fong.github.io/posts/arm/thread_start_sp</link>
      <pubDate>2017-02-23</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x95EE;&#x9898;&#x5F15;&#x5165;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://awakening-fong.github.io/posts/arm/arm_qemu_02"&gt;https://awakening-fong.github.io/posts/arm/arm_qemu_02&lt;/a&gt;
&#x4E2D;&#x8BF4;&#x5230; start&lt;em&gt;kernel&#x524D;&#x8BBE;&#x7F6E;sp&#x4E3A; init&lt;/em&gt;thread&lt;em&gt;union + THREAD&lt;/em&gt;START_SP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define THREAD_START_SP (THREAD_SIZE - 8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x4E3A;&#x4F55;&#x8981;-8?  &lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x89E3;&lt;/h4&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;static inline struct thread_info *current_thread_info(void)
{
    register unsigned long sp asm (&amp;quot;sp&amp;quot;);
    return (struct thread_info *)(sp &amp;amp; ~(THREAD_SIZE - 1));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&#x56FE;&#x793A;&#x4E2D;A&#x70B9;&#x5230;B&#x70B9;  &#x5927;&#x5C0F;&#x662F;8&#x5B57;&#x8282;)&lt;br&gt;
&#x5982;&#x679C;sp&#x662F;SP0, &#x90A3;&#x4E48;,(sp &amp;amp; ~(THREAD&lt;em&gt;SIZE - 1)) &#x540E;&#x8FD8;&#x662F;&#x6307;&#x5411;SP0 (A&#x70B9;);&lt;br&gt;
&#x5982;&#x679C;sp&#x662F;SP1, &#x90A3;&#x4E48;, (sp &amp;amp; ~(THREAD&lt;/em&gt;SIZE - 1)) &#x540E;&#x6307;&#x5411;&#x7684;&#x662F;thread_info (C&#x70B9;).&lt;br&gt;
&#x6240;&#x4EE5;, &#x9700;&#x8981;-8.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          SP0 ----&amp;gt;  +.------------+   --.--        &#x9AD8;&#x5730;&#x5740;  
                |    | A           |     |                  
                8    |             |     |            ^     
                |    |             |                  |     
          SP1 ----&amp;gt;  |.B           |  THREAD_SIZE     |     
                     |             |     .            |     
                     |             |     |            |     
                     |             |     |            |     
                     |             |     |            |     
  thread_info ---&amp;gt;   |.C           |  ------          |     
                     |             |                  |     
                     |             |                  |     
                     |             |                  |      
                     |             |                        
                     +-------------+                 &#x4F4E;&#x5730;&#x5740; 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>IIC&#x76F8;&#x5173;&#x5185;&#x5BB9;&#x7684;&#x8BB0;&#x5FC6;</title>
      <link>https://awakening-fong.github.io/posts/hw/iic</link>
      <pubDate>2017-02-15</pubDate>
      <description>&lt;p&gt;&#x672C;&#x6587;&#x7684;&#x5185;&#x5BB9; &#x4EC5;&#x4EC5;&#x662F;&#x4E3A;&#x4E86;&#x80FD;&#x591F;&#x56DE;&#x60F3;&#x8D77;IIC&#x76F8;&#x5173;&#x5185;&#x5BB9;, &#x5E76;&#x4E0D;&#x6C42;&#x4E25;&#x8C28;&#x548C;&#x51C6;&#x786E;.&lt;/p&gt;

&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x8D77;&#x59CB;&#x548C;&#x505C;&#x6B62;&#x4FE1;&#x53F7;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x56E0;&#x4E3A;&#x4E0A;&#x62C9;&#x7701;&#x7535;, &#x6240;&#x4EE5;, &#x7A7A;&#x95F2;&#x65F6;, SDA&#x662F;&#x4E0A;&#x62C9;&#x7684;.
&#x5728;&#x65F6;&#x949F;&#x4E3A;&#x9AD8;&#x65F6;, SDA&#x82E5;&#x8868;&#x793A;&#x6570;&#x636E;, &#x9700;&#x7EF4;&#x6301;&#x7A33;&#x5B9A;, &#x5426;&#x5219;, &#x5176;&#x8868;&#x793A;&#x8D77;&#x59CB;&#x6216;&#x505C;&#x6B62;.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/media/IIC_start_stop.jpg"&gt;&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x6570;&#x636E;&#x7684;&#x7EC4;&#x7EC7; &#x548C; &#x8868;&#x793A;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x5047;&#x5B9A;&#x662F;7bit&#x5730;&#x5740;&#x7684;&#x60C5;&#x51B5;.
&#x5148;&#x53D1;&#x9001;&#x9AD8;&#x4F4D;&#x8FD8;&#x662F;&#x4F4E;&#x4F4D;?&lt;br&gt;
&#x53EF;&#x4EE5;&#x8003;&#x8651;/&#x56DE;&#x5FC6;&#x4E0B; 7bit&#x5730;&#x5740;+1bit&#x8BFB;&#x5199; &#x65F6;&#x7684;&#x60C5;&#x51B5;, &#x6211;&#x4EEC;&#x662F;&#x5148;&#x53D1;&#x9001;&#x5730;&#x5740;&#x7684;, &#x6240;&#x4EE5;, &#x662F;&#x5148;&#x53D1;&#x9001;&#x9AD8;&#x4F4D;, &#x540E;&#x53D1;&#x9001;&#x4F4E;&#x4F4D;&#x7684;.&lt;/p&gt;

&lt;p&gt;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x662F;r/w# &#x6240;&#x4EE5;,&#x8BFB;&#x4E3A;1, &#x5199;&#x4E3A;0.  &lt;/p&gt;

&lt;p&gt;&#x65F6;&#x949F;&#x6709;, &#x4EE3;&#x8868;&#x5FC3;&#x810F;&#x8FD8;&#x5728;&#x8DF3;, &#x5668;&#x4EF6;&#x8FD8;&#x5728;&#x5DE5;&#x4F5C;, &#x6240;&#x4EE5;, &#x5728;SCL&#x9AD8;&#x7535;&#x5E73;&#x65F6;&#x5BF9;SDA&#x91C7;&#x6837;&#x4F5C;&#x4E3A;&#x6570;&#x636E;.&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/media/IIC_SCL_high_SDA_valid.jpg"&gt;&lt;/p&gt;

&lt;p&gt;&#x5982;SCL&#x9AD8;&#x7535;&#x5E73;&#x65F6;, SDA&#x53D1;&#x751F;&#x4E86;&#x8F6C;&#x6362;, &#x90A3;&#x4E48;, &#x5C31;&#x4E0D;&#x662F;&#x5728;&#x4F20;&#x9001;&#x6570;&#x636E;, &#x800C;&#x662F;&#x8868;&#x793A;&#x8D77;&#x59CB;&#x6216;&#x505C;&#x6B62;.&lt;/p&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. &#x5F02;&#x5E38;&#x5904;&#x7406;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;ACK: &#x63A5;&#x6536;&#x5230;8bit&#x6570;&#x636E;&#x7684;&#x8981;&#x56DE;&#x590D;ACK, &#x8FD9;&#x6837;&#x662F;9bit. master&#x7AEF;&#x53D1;&#x9001;7bit&#x5730;&#x5740;+1bit&#x8BFB;&#x5199;, slave&#x56DE;&#x590D;ACK, &#x4E5F;&#x662F;9bit, &#x5F62;&#x5F0F;&#x4E0A;&#x7EDF;&#x4E00;.&lt;/p&gt;

&lt;p&gt;ACK&#x8981;&#x80FD;&#x591F;&#x88AB;&#x68C0;&#x6D4B;&#x5230;, &#x6545;&#x4E0D;&#x53D1;&#x9001;ACK&#x7684;&#x90A3;&#x65B9;&#x4E0D;&#x80FD;&#x53BB;&#x5E72;&#x6270;SDA, &#x6545;&#x4FDD;&#x6301;&#x9AD8;&#x7535;&#x4F4D;, &#x53D1;&#x9001;ACK&#x7684;&#x90A3;&#x65B9;&#x62C9;&#x4F4E;SDA.&lt;/p&gt;

&lt;p&gt;&#x5982;&#x679C; &#x4ECE;&#x673A;&#x63A5;&#x6536;&#x597D;&#x5B8C;&#x6574;&#x7684;&#x6570;&#x636E;&#x5B57;&#x8282;(&#x542B;&#x54CD;&#x5E94;&#x4F4D;) &#x540E;,  &#x8981;&#x5B8C;&#x6210;&#x4E00;&#x4E9B;&#x5176;&#x4ED6;&#x529F;&#x80FD;&#x540E; (&#x4F8B;&#x5982;&#x4E00;&#x4E2A;&#x5185;&#x90E8;&#x4E2D;&#x65AD;&#x670D;&#x52A1;&#x7A0B;&#x5E8F;), &#x624D;&#x80FD;&#x63A5;&#x6536;&#x6216;&#x53D1;&#x9001;&#x4E0B;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;&#x7684;&#x6570;&#x636E;&#x5B57;&#x8282;, &#x53EF;&#x4EE5;&#x4F7F;&#x65F6;&#x949F;&#x7EBF; SCL &#x4FDD;&#x6301;&#x4F4E;&#x7535;&#x5E73;&#x8FEB;&#x4F7F;&#x4E3B;&#x673A;&#x8FDB;&#x5165;&#x7B49;&#x5F85;&#x72B6;&#x6001;. &lt;/p&gt;
</description>
    </item>
    <item>
      <title>page reclaim 01:&#x6982;&#x8FF0;</title>
      <link>https://awakening-fong.github.io/posts/mm/reclaim_01_overview</link>
      <pubDate>2017-02-07</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x80CC;&#x666F;/&#x95EE;&#x9898;&#x5F15;&#x5165;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x672C;&#x6587;&#x4E0D;&#x8BA8;&#x8BBA; swapping (swap out to disk).  &lt;/p&gt;

&lt;p&gt;If a seldom-used page is backed by a block device (e.g., memory mappings
of files) then the modified pages need not be swapped out, but can be directly synchronized with the block device. The page frame can be reused, and if the data are required again, it can be reconstructed from the source. If a page is backed by a file but cannot be modified in memory (e.g., binary executable data), then it can be discarded if it is currently not required.
&#x901A;&#x8FC7;Writing back cached data&#x5373;&#x53EF;&#x5C06;&#x8FD9;&#x4E9B;page&#x91CA;&#x653E;.&lt;/p&gt;

&lt;p&gt;If a page is backed by a file but cannot be modified in memory (e.g., binary executable data), then it can be discarded if it is currently not required. &lt;/p&gt;

&lt;p&gt;&#x5C06; &#x6682;&#x65F6;&#x4E0D;&#x7528;&#x7684; &#x6216; &#x5F88;&#x5C11;&#x4F7F;&#x7528;&#x7684;  &#x5185;&#x5B58;&#x56DE;&#x7B3C;/&#x56DE;&#x6536;, &#x7ED9;&#x540E;&#x7EED;&#x5176;&#x4ED6;&#x4EBA;&#x4F7F;&#x7528;. &#x90A3;&#x4E48;, &#x5982;&#x4F55;&#x754C;&#x5B9A; &#x6682;&#x65F6;&#x4E0D;&#x7528; &#x6216; &#x5F88;&#x5C11;&#x4F7F;&#x7528; &#x5462;? &#x8FD9;&#x4E9B;&#x5DF2;&#x5206;&#x914D;&#x51FA;&#x53BB;&#x7684;&#x5185;&#x5B58;&#x90FD;&#x6563;&#x843D;&#x5728;&#x54EA;&#x91CC;?&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x6563;&#x843D;&#x5728;&#x54EA;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x5982;&#x4F55;&#x627E;&#x5230;&#x8FD9;&#x4E9B;&#x5185;&#x5B58;&#x5462;? &#x5565;&#x94FE;&#x8868;&#x5417;?&lt;br&gt;
&#x7B54;:see add&lt;em&gt;to&lt;/em&gt;page&lt;em&gt;cache&lt;/em&gt;lru(), page&lt;em&gt;add&lt;/em&gt;new&lt;em&gt;anon&lt;/em&gt;rmap()&lt;/p&gt;

&lt;p&gt;&#x65B9;&#x5F0F;1:
add&lt;em&gt;to&lt;/em&gt;page&lt;em&gt;cache&lt;/em&gt;lru &#x628A;page&#x6DFB;&#x52A0;&#x5230; both the page cache and the LRU cache. 
Most importantly, it is used by mpage&lt;em&gt;readpages and do&lt;/em&gt;generic&lt;em&gt;mapping&lt;/em&gt;read, the standard functions in which the block layer ends up when reading data from a file or mapping.
&#x5F53;&#x7136;, &#x5B9E;&#x9645;&#x662F;&#x5148;&#x6DFB;&#x52A0;&#x5230;per cpu&#x7684;struct pagevec&#x4E2D;, &#x7B49;&#x6EE1;&#x4E86;&#x518D;&#x8F6C;&#x79FB;&#x5230;global&#x7684;lru&#x4E2D;.&lt;/p&gt;

&lt;p&gt;&#x65B9;&#x5F0F;2:
add&lt;em&gt;to&lt;/em&gt;page&lt;em&gt;cache&lt;/em&gt;lru &#x5C06;page&#x52A0;&#x5165;tree, &#x6545;&#x53EF;&#x8003;&#x8651;&#x4ECE;&#x5404;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x7684;inode&#x904D;&#x5386;&#x5404;page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;drop_caches_sysctl_handler -&amp;gt; iterate_supers(drop_pagecache_sb, NULL)
|--list_for_each_entry(inode, &amp;amp;sb-&amp;gt;s_inodes, i_sb_list)
|   |--invalidate_mapping_pages(inode-&amp;gt;i_mapping, ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. &#x5982;&#x4F55;&#x5224;&#x65AD;rarely used&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x5982;&#x4E0A;&#x6240;&#x8FF0;, page&#x7EC4;&#x7EC7;&#x5728;&#x94FE;&#x8868;lru&#x4E2D;. &#x9996;&#x6B21;&#x8BBF;&#x95EE;page&#x4F1A;&#x5C06;page&#x653E;&#x5230;&#x94FE;&#x8868;&#x5F00;&#x5934;,  &#x4E0D;&#x8FC7;, &#x540E;&#x7EED;&#x8BBF;&#x95EE;page, &#x5E76;&#x4E0D;&#x4F1A;&#x628A;page&#x8C03;&#x6574;&#x5230;&#x94FE;&#x8868;lru&#x7684;&#x5F00;&#x5934;.
&#x4E3A;&#x4E86;&#x533A;&#x5206;&#x4F7F;&#x7528;&#x9891;&#x7387;, &#x5185;&#x6838;&#x5C06;&#x8F83;&#x5C11;&#x4F7F;&#x7528;&#x7684;page&#x653E;&#x5165;inactive list&#x4E2D;. &#x5982;&#x679C;&#x4F7F;&#x7528;&#x76F8;&#x5BF9;&#x9891;&#x7E41;, &#x5219;&#x79FB;&#x52A8;&#x5230;active list&#x4E2D;.&lt;br&gt;
&#x8FD9;&#x6837;, &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4ECE;&#x7279;&#x5B9A;&#x94FE;&#x8868;&#x4E2D;&#x5C1D;&#x8BD5;&#x5BF9;page&#x8FDB;&#x884C;&#x56DE;&#x6536;, &#x56E0;&#x4E3A;&#x8FD9;&#x4E9B;&#x94FE;&#x8868;&#x4E2D;&#x7684;page&#x76F8;&#x5BF9;&#x8F83;&#x5C11;&#x4F7F;&#x7528;.&lt;/p&gt;

&lt;p&gt;&#x9996;&#x6B21;&#x6DFB;&#x52A0;&#x5230;lru&#x7684;&#x8BDD;, &#x901A;&#x5E38;&#x662F;&#x6DFB;&#x52A0;&#x5230;inactive&#x90A3;&#x8FB9;, &#x5BF9;&#x4E8E;&#x533F;&#x540D;&#x9875;&#x6DFB;&#x52A0;&#x5230;active list, see  _&lt;em&gt;do&lt;/em&gt;fault, do&lt;em&gt;anonymous&lt;/em&gt;page, do&lt;em&gt;wp&lt;/em&gt;page&lt;/p&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;4. PG_referenced&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;page&#x5728;active list&#x548C;inactive list&#x4E4B;&#x95F4;&#x8FC1;&#x79FB;, &#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;page&#x7684;&#x72B6;&#x6001;&#x8FC1;&#x79FB;&#x4E86;, &#x800C;&#x8FD9;&#x4E24;&#x8005;&#x7684;&#x8FC1;&#x79FB;&#x4EC5;&#x9700;&#x4E00;&#x6B65;, &#x5185;&#x6838;&#x8BA4;&#x4E3A;&#x8FD9;&#x4E2A;&#x4E0D;&#x5408;&#x9002;, &#x5F15;&#x5165;&#x4E86; PG_referenced. &lt;/p&gt;

&lt;p&gt;PG&lt;em&gt;referenced &#x548C; PG&lt;/em&gt;active &#x7684;&#x533A;&#x522B;&lt;br&gt;
&#x5728;&#x5F15;&#x5165;PG_referenced&#x4E4B;&#x524D;, When the page is accessed, the flag is set, but when is it going to be removed again? Either the kernel does not remove it automatically, but then the page would remain in the active state forever even if it would only be used very little, or not at all anymore.   &lt;/p&gt;

&lt;p&gt;&#x4E3A;&#x6B64;, &#x6211;&#x4EEC;&#x9700;&#x8981;&#x80FD;&#x591F;&#x8BA4;&#x51FA; &#x6807;&#x8BB0;&#x4E86;PG&lt;em&gt;active&#x4F46;&#x4E0D;&#x5E38;&#x8BBF;&#x95EE;&#x7684;page.
&#x5F53;&#x524D;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x5F15;&#x5165;&#x4E86; PG&lt;/em&gt;referenced &#x8FD9;&#x4E2A;&#x6807;&#x8BB0;.&lt;/p&gt;

&lt;p&gt;page fault&#x4F1A;&#x5C06;page &#x8BBE;&#x7F6E;&#x4E3A;active, &#x90A3;&#x4E48;, &#x662F;&#x5426;&#x4F1A;&#x4E00;&#x76F4;&#x5446;&#x5728;&#x67D0;&#x4E2A;list&#x4E2D;&#x5462;?&lt;br&gt;
&#x7B54;:&#x4E0D;&#x4F1A;, page&lt;em&gt;check&lt;/em&gt;references &#x548C; mark&lt;em&gt;page&lt;/em&gt;accessed &#x53CC;&#x65B9;&#x8FDB;&#x884C;&#x89D2;&#x9010;.&lt;/p&gt;

&lt;p&gt;inactive&#x4E0D;&#x4F1A;&#x76F4;&#x63A5;&#x8F6C;&#x53D8;&#x4E3A;active, &#x8981;&#x5148;unreferenced&#x8F6C;&#x53D8;&#x4E3A;referenced.&lt;br&gt;
&#x5982;&#x679C;D0&#x8868;&#x793A; PG&lt;em&gt;referenced , D1&#x8868;&#x793A; PG&lt;/em&gt;active, &#x90A3;&#x4E48;, &#x72B6;&#x6001;&#x8F6C;&#x6362;&#x5373;&#x4E3A;:&lt;br&gt;
0b00-&amp;gt;0b01-&amp;gt;0b10-&amp;gt;0b11&lt;/p&gt;

&lt;p&gt;&#x5F15;&#x5165;&#x4E4B;&#x540E;, A highly active page has both PG&lt;em&gt;active and PG&lt;/em&gt;referenced set.&lt;/p&gt;

&lt;h1 id="toc_4"&gt;&lt;h4&gt;5. &#x4F55;&#x5904;&#x8C03;&#x7528; page&lt;em&gt;check&lt;/em&gt;references &#x548C; mark&lt;em&gt;page&lt;/em&gt;accessed&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x8C03;&#x7528;page&lt;em&gt;check&lt;/em&gt;references&#x7684;&#x8DEF;&#x5F84;:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shrink_inactive_list -&amp;gt; shrink_page_list -&amp;gt; page_check_references
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x5E38;&#x89C1;&#x7684;&#x8C03;&#x7528; mark&lt;em&gt;page&lt;/em&gt;accessed&#x7684;&#x8DEF;&#x5F84;: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch_buffer -&amp;gt; mark_page_accessed(bh-&amp;gt;b_page)
do_generic_file_read -&amp;gt; mark_page_accessed(page)
generic_perform_write -&amp;gt; mark_page_accessed(page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x4F55;&#x65F6; shrink   PG&lt;em&gt;referenced, PG&lt;/em&gt;active?&lt;br&gt;
&#x7B54;: &#x5E38;&#x89C1;&#x7684;&#x6709;direct reclaim &#x548C; kswapd, &#x4EE5;&#x53CA;truncate&#x7B49;.&lt;/p&gt;

&lt;h1 id="toc_5"&gt;&lt;h4&gt;6. &#x5982;&#x4F55;&#x56DE;&#x6536;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x5982;&#x6807;&#x9898;1&#x4E2D;&#x7684;&#x5185;&#x5BB9;&#x6240;&#x8FF0;, &#x5BF9;&#x4E8E;&#x6709;&#x5757;&#x8BBE;&#x5907;&#x540E;&#x5907;&#x7684;page, &#x5728;reclaim&#x540E;, &#x82E5;&#x540E;&#x7EED;&#x9700;&#x8981;, &#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x91CD;&#x65B0;&#x8BFB;&#x5165;&#x6765;&#x6062;&#x590D;, &#x6240;&#x4EE5;, &#x53EF;&#x5C06;page&#x7684;&#x5185;&#x5BB9;&#x56DE;&#x5199;&#x5230;&#x540E;&#x5907;&#x8BBE;&#x5907;&#x4E2D;, &#x7136;&#x540E;&#x5F52;&#x8FD8;&#x7ED9;buddy system, see shrink&lt;em&gt;inactive&lt;/em&gt;list().&lt;/p&gt;

&lt;h1 id="toc_6"&gt;&lt;h4&gt;7. &#x6570;&#x636E;&#x7ED3;&#x6784;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;per zone : active list, inactive list&lt;br&gt;
per node :kswapd&lt;br&gt;
per cpu  :lru cache, &#x4E5F;&#x5C31;&#x662F; pagevec  &lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
