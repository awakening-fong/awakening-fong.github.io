<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>&#x9996;&#x9875;</title>
    <description>&#x9996;&#x9875;</description>
    <link>https://awakening-fong.github.io</link>
    <pubDate>2022-10-07</pubDate>
    <item>
      <title>perfbook 03 barrier</title>
      <link>https://awakening-fong.github.io/posts/perf/perfbook-03</link>
      <pubDate>2022-10-03</pubDate>
      <description>&lt;p&gt;perfbook &#x6307;&#x7684;&#x662F; 
Is Parallel Programming Hard, And, If So, What Can You Do About It?
pdf &#x7248;&#x672C;&#x53EF;&#x4EE5;&#x4ECE;&#x5982;&#x4E0B;&#x7F51;&#x5740;&#x83B7;&#x53D6;: 
&lt;a href="https://www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html"&gt;https://www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&#x672C;&#x6587;&#x4E0D;&#x6253;&#x7B97;&#x4ECE;&#x539F;&#x7406;&#x4E0A;&#x6765;&#x7406;&#x89E3;, &#x4EC5;&#x4E3A;&#x4E86;&#x5FEB;&#x901F;&#x4F7F;&#x7528;, &#x6545;&#x7F3A;&#x5931;&#x4E25;&#x8C28;.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id="toc_0"&gt;5.4.4&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&#x7B2C;16&#x884C;&#x6267;&#x884C;&#x4E00;&#x6761;&#x5185;&#x5B58;&#x5C4F;&#x969C;&#xFF0C;&#x786E;&#x4FDD;&#x4EFB;&#x4F55;&#x770B;&#x89C1;&#x7B2C;17&#x884C;&#x8BBE;&#x7F6E;READY&#x72B6;&#x6001;&#x7684;CPU&#xFF0C;&#x4E5F;&#x80FD;&#x770B;&#x89C1;&#x7B2C;9&#x884C;&#x7684;&#x6548;&#x679C;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;awakening-fong &#x6CE8;&#x91CA;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;16  smp_mb();
17 WRITE_ONCE(theft, THEFT_READY);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8DE8;&#x8FC7;&#x4E86;16&#x884C;&#xFF0C;&#x5C31;&#x662F;&#x5DF2;&#x7ECF;&#x6267;&#x884C;&#x8FC7;&#x7B2C;9&#x884C;&#x7684;&#x8BC1;&#x636E;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x7B2C;17&#x884C;&#x7ED9;&#x51FA;&#x4E86;&#x4E00;&#x4E2A;&#x7ED3;&#x8BBA;&#x3002;
16&#x884C;&#x7684;&#x52A8;&#x4F5C;&#x5DF2;&#x6267;&#x884C;&#x5B8C;&#xFF0C;&#x6E05;&#x5355;&#x6B65;&#x9AA4;&#x5DF2;&#x67E5;&#x9A8C;&#xFF0C;17&#x884C;&#x7ED9;&#x4E2A;&#x76D6;&#x7AE0;&#x3002;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&#x5185;&#x5B58;&#x5C4F;&#x969C;&#x4EE5;&#x6210;&#x5BF9;&#x7684;&#x5F62;&#x5F0F;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id="toc_1"&gt;14.2.4.3 Pair-Wise Memory Barriers&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&#x5728;&#x5982;&#x4E0B;&#x64CD;&#x4F5C;&#x4E2D;&#xFF0C;&#x4ECE;&#x5916;&#x90E8;&#x903B;&#x8F91;&#x5206;&#x6790;&#x5668;&#x7684;&#x89D2;&#x5EA6;&#x6765;&#x8BF4;&#xFF0C;CPU 1&#x5BF9;A&#x7684;&#x8BBF;&#x95EE;&#x5E76;&#x975E;&#x7EDD;&#x5BF9;&#x65E9;&#x4E8E;&#x5BF9;B&#x7684;&#x8BBF;&#x95EE;&#xFF08;&#x53C2;&#x89C1;&#x9644;&#x5F55;C&#x7684;&#x4F8B;&#x5B50;&#xFF09;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;CPU 1          CPU 2
access(A);   access(B);
smp_mb();    smp_mb();
access(B);   access(A);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;awakening-fong &#x6CE8;&#x91CA;:
&#x8FD9;&#x91CC;&#x7684;&#x5916;&#x90E8;&#x903B;&#x8F91;&#x5206;&#x6790;&#x4EEA;&#xFF0C;&#x4E0D;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A; &#x5176;&#x4ED6;cpu&#xFF0C;
cpu&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x6709;&#x76F8;&#x5173;&#x534F;&#x8BAE;&#xFF0C;cpu &#x548C; &#x5206;&#x6790;&#x4EEA; &#x4E4B;&#x95F4; &#x5374;&#x6CA1;&#x6709;&#x8FD9;&#x4E9B;&#x7EA6;&#x5B9A;&#x3002;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&#x4F46;&#x662F;&#xFF0C;&#x5982;&#x679C; CPU 2&#x5BF9;B&#x7684;&#x8BBF;&#x95EE;&#x770B;&#x5230;CPU 1&#x5BF9;B&#x7684;&#x8BBF;&#x95EE;&#xFF0C;&#x90A3;&#x4E48;CPU 2&#x5BF9;A&#x7684;&#x8BBF;&#x95EE;&#x662F;&#x786E;&#x4FDD;&#x80FD;&#x591F;&#x770B;&#x5230;CPU 1&#x5BF9;A&#x7684;&#x8BBF;&#x95EE;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, if CPU 2&#x2019;s access to B sees the result of CPU 1&#x2019;s access to B, then CPU 2&#x2019;s access to A is guaranteed to see the result of CPU 1&#x2019;s access to A.&lt;/p&gt;

&lt;p&gt;awakening-fong &#x6CE8;&#x91CA;:
&#x6765;&#x81EA; &#x540C;&#x4E00;&#x4E2A;cpu&#x7684;&#x4E24;&#x53D8;&#x91CF;&#xFF0C;&#x8FD9;&#x4E24;&#x53D8;&#x91CF;&#x5230;   &#x5176;&#x4ED6;cpu&#x7684;&#x4F20;&#x64AD;  &#x53D7;  mb &#x7EA6;&#x675F;&#x3002;&lt;/p&gt;

&lt;h3 id="toc_2"&gt;C.4.3&lt;/h3&gt;

&lt;p&gt;CPU 0 executes foo() while CPU 1 executes function
bar() in the following code fragment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 void foo(void)
2 {
3 a = 1;
4 smp_mb();
5 b = 1;
6 }
7
8 void bar(void)
9 {
10 while (b == 0) continue;
11 assert(a == 1); // &#x6982;&#x7387;&#x5BFC;&#x81F4;&#x7A0B;&#x5E8F;&#x9000;&#x51FA;
12 }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;9.CPU 1&#x6267;&#x884C;assert&#xFF08;a==1&#xFF09;&#xFF0C;&#x5E76;&#x4E14;&#xFF0C;&#x7531;&#x4E8E;&#x65E7;&#x7684;&#x201C;a&#x201D;&#x503C;&#x8FD8;&#x5728;CPU 1&#x7684;&#x7F13;&#x5B58;&#x4E2D;&#xFF0C;&#x56E0;&#x6B64;&#x9677;&#x5165;&#x9519;&#x8BEF;&#x3002;&lt;/p&gt;

&lt;p&gt;10.&#x867D;&#x7136;&#x9677;&#x5165;&#x9519;&#x8BEF;&#xFF0C;CPU 1&#x5904;&#x7406;&#x5DF2;&#x7ECF;&#x6392;&#x961F;&#x7684;&#x201C;&#x4F7F;&#x65E0;&#x6548;&#x201D;&#x6D88;&#x606F;&#xFF0C;&#x5E76;&#x4E14;&#xFF08;&#x8FDF;&#x5230;&#xFF09;&#x5728;&#x81EA;&#x5DF1;&#x7684;&#x7F13;&#x5B58;&#x4E2D;&#x5237;&#x65B0;&#x5305;&#x542B;&#x201C;a&#x201D;&#x503C;&#x7684;&#x7F13;&#x5B58;&#x884C;&#x3002;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;awakening-fong &#x6CE8;&#x91CA;:&lt;/p&gt;

&lt;p&gt;cpu&#x4F1A;&#x8BD5;&#x56FE;&#x7EF4;&#x62A4;cache line&#x4E00;&#x81F4;&#x6027;&#xFF0C;&#x65B9;&#x6CD5;&#x662F;&#x53D1;&#x9001;&#x6D88;&#x606F;&#xFF0C;&#x4F46;&#x63A5;&#x6536;&#x7AEF;&#x63A5;&#x6536;&#x5230;&#x6D88;&#x606F;&#x524D;&#xFF0C;&#x53EF;&#x80FD;&#x5DF2;&#x7ECF;&#x4ECE;cache line&#x4E2D;&#x8BFB;&#x53D6;&#x8D70;&#x65E7;&#x7684;&#x503C;&#x4E86;&#x3002;&lt;/p&gt;

&lt;p&gt;&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x5176;&#x5728;cpu&#x4E4B;&#x95F4;&#x7684;&#x4F20;&#x64AD;&#x901F;&#x5EA6;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x56E0;&#x4E3A;&#x4F20;&#x64AD;&#x8DEF;&#x5F84;&#x4E0D;&#x4E00;&#x6837;&#x3002;&#x672C;&#x4F8B;&#x4E2D;&#xFF0C;b&#x7684;&#x4F20;&#x64AD;&#x901F;&#x5EA6;&#x5FEB;&#x3002;&lt;/p&gt;

&lt;h3 id="toc_3"&gt;C.4.3&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1 void foo(void)
2 {
3 a = 1;
4 smp_mb();
5 b = 1;
6 }
7
8 void bar(void)
9 {
10 while (b == 0) continue;
11 smp_mb();
12 assert(a == 1); // &#x4E0D;&#x4F1A;&#x8BA9;&#x7A0B;&#x5E8F;&#x9000;&#x51FA;
13 }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;8.CPU 1 &#x73B0;&#x5728;&#x7ED3;&#x675F;&#x6267;&#x884C;while&#xFF08;b==0&#xFF09;continue&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x53D1;&#x73B0;&#x201C;b&#x201D;&#x7684;&#x503C;&#x4E3A; 1&#xFF0C;&#x5B83;&#x5904;&#x7406;&#x4E0B;&#x4E00;&#x6761;&#x8BED;&#x53E5;&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x6761;&#x5185;&#x5B58;&#x5C4F;&#x969C;&#x6307;&#x4EE4;&#x3002;&lt;/p&gt;

&lt;p&gt;9.CPU 1 &#x5FC5;&#x987B;&#x505C;&#x987F;&#xFF0C;&#x76F4;&#x5230;&#x5B83;&#x5904;&#x7406;&#x5B8C;&#x4F7F;&#x65E0;&#x6548;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6D88;&#x606F;&#x3002;&lt;/p&gt;

&lt;p&gt;10.CPU 1 &#x5904;&#x7406;&#x5DF2;&#x7ECF;&#x5165;&#x961F;&#x7684;&#x201C;&#x4F7F;&#x65E0;&#x6548;&#x201D;&#x6D88;&#x606F;&#xFF0C;&#x4ECE;&#x5B83;&#x7684;&#x7F13;&#x5B58;&#x4E2D;&#x4F7F;&#x65E0;&#x6548;&#x5305;&#x542B;&#x201C;a&#x201D;&#x7684;&#x7F13;&#x5B58;&#x884C;&#x3002;&lt;/p&gt;

&lt;p&gt;11.CPU 1 &#x6267;&#x884C;assert&#xFF08;a==1&#xFF09;&#xFF0C;&#x7531;&#x4E8E;&#x5305;&#x542B;&#x201C;a&#x201D;&#x7684;&#x7F13;&#x5B58;&#x884C;&#x5DF2;&#x7ECF;&#x4E0D;&#x5728;&#x5B83;&#x7684;&#x7F13;&#x5B58;&#x4E2D;&#xFF0C;&#x5B83;&#x53D1;&#x9001;&#x4E00;&#x4E2A;&#x201C;&#x8BFB;&#x201D;&#x6D88;&#x606F;&#x3002;&lt;/p&gt;

&lt;p&gt;12.CPU 0 &#x4EE5;&#x5305;&#x542B;&#x65B0;&#x7684;&#x201C;a&#x201D;&#x503C;&#x7684;&#x7F13;&#x5B58;&#x884C;&#x54CD;&#x5E94;&#x8BE5;&#x201C;&#x8BFB;&#x201D;&#x6D88;&#x606F;&#x3002;&lt;/p&gt;

&lt;p&gt;13.CPU 1 &#x63A5;&#x6536;&#x5230;&#x8BE5;&#x7F13;&#x5B58;&#x884C;&#xFF0C;&#x5B83;&#x5305;&#x542B;&#x65B0;&#x7684;&#x201C;a&#x201D;&#x7684;&#x503C;1&#xFF0C;&#x56E0;&#x6B64;&#x65AD;&#x8A00;&#x4E0D;&#x4F1A;&#x88AB;&#x89E6;&#x53D1;&#x3002;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;awakening-fong &#x6CE8;&#x91CA;:&lt;/p&gt;

&lt;p&gt;&#x5199;&#x7AEF; cpu0 &#x5904;&#x7406;&#x4E86;&#x68C0;&#x67E5;&#x6E05;&#x5355; :a&#x5199;&#x5B8C;&#x6210;&#xFF0C;&#x7136;&#x540E;  &#x76D6;&#x7AE0;&#x4E86;b&#x7F6E;1&#x3002;&lt;br&gt;
&#x8BFB;&#x7AEF; cpu1 &#x770B;&#x5230;&#x5370;&#x7AE0; b&#xFF0C;&#x9700;&#x8981;&#x5237;&#x65B0;&#x8BA4;&#x77E5;&#xFF08;&#x914D;&#x5BF9;&#x7684;mb&#xFF09;&#xFF0C;&#x91CD;&#x65B0;&#x6293;&#x53D6;a&#x3002;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>perfbook 01 &#x6458;&#x5F55;</title>
      <link>https://awakening-fong.github.io/posts/perf/perfbook-01</link>
      <pubDate>2022-09-17</pubDate>
      <description>&lt;p&gt;perfbook &#x6307;&#x7684;&#x662F; 
Is Parallel Programming Hard, And, If So, What Can You Do About It?
pdf &#x7248;&#x672C;&#x53EF;&#x4EE5;&#x4ECE;&#x5982;&#x4E0B;&#x7F51;&#x5740;&#x83B7;&#x53D6;: 
&lt;a href="https://www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html"&gt;https://www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="toc_0"&gt;5.4.6 Applying Exact Limit Counters&lt;/h3&gt;

&lt;p&gt;Quick Quiz 5.58: This is ridiculous! We are read-acquiring a reader-writer lock to update the counter? What are you playing at?&lt;/p&gt;

&lt;p&gt;&#x7B54;: 
&#x8FD9;&#x91CC;&#x8981;&#x5F3A;&#x8C03;&#x7684;&#x662F;  &#x8BFB;&#x9501;  &#x5141;&#x8BB8; &#x591A;&#x4EBA;&#x540C;&#x65F6;&#x6301;&#x6709;&#xFF0C;&#x5199;&#x9501;&#x53EA;&#x5141;&#x8BB8;&#x5355;&#x4EBA;&#x6301;&#x6709;&#x3002; &#x8DDF; &#x662F;&#x5426;&#x8FDB;&#x884C; &#x8BFB;&#x5199;&#x64CD;&#x4F5C;&#x6CA1;&#x6709;&#x5FC5;&#x7136;&#x5173;&#x7CFB;&#x3002;&lt;/p&gt;

&lt;h3 id="toc_1"&gt;Chapter 6 Partitioning and Synchronization Design&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&#x4E00;&#x79CD;&#x5F3A;&#x5236;&#x9501;&#x8303;&#x56F4;&#x4E0D;&#x91CD;&#x53E0;&#x7684;&#x529E;&#x6CD5;&#x3002;&#x4E24;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x53CC;&#x7AEF;&#x961F;&#x5217;&#x4E32;&#x8054;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x6BCF;&#x4E2A;&#x961F;&#x5217;&#x7528;&#x81EA;&#x5DF1;&#x7684;&#x9501;&#x4FDD;&#x62A4;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x6570;&#x636E;&#x5076;&#x5C14;&#x4F1A;&#x4ECE;&#x4E00;&#x4E2A;&#x53CC;&#x7AEF;&#x961F;&#x5217;&#x8DD1;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x53CC;&#x7AEF;&#x961F;&#x5217;&#x3002;&#x6B64;&#x65F6;&#x5FC5;&#x987B;&#x540C;&#x65F6;&#x6301;&#x6709;&#x4E24;&#x628A;&#x9501;&#x3002;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;awakening-fong: &#x5999;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;&#x54C8;&#x5E0C;&#x6C38;&#x8FDC;&#x662F;&#x5206;&#x5272;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x6700;&#x7B80;&#x5355;&#x548C;&#x6700;&#x6709;&#x6548;&#x7684;&#x65B9;&#x6CD5;&#x3002;&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;awakening-fong: &#x8FD9;&#x6837;,&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x5C31;&#x90FD;&#x6709; &#x81EA;&#x5DF1;&#x6240;&#x5C5E;&#x7684; bucket&#x4E86;.&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&#x5728;10&#x6838;&#x7CFB;&#x7EDF;&#x4E0A;&#x8FD0;&#x884C;&#x7684;&#x7A0B;&#x5E8F;&#x53EA;&#x80FD;&#x5728;&#x5173;&#x952E;&#x7684;&#x4E34;&#x754C;&#x533A;&#x4E0A;&#x82B1;&#x8D39;&#x5C0F;&#x4E8E;1/10&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x8FD9;&#x6837;&#x4EE5;&#x540E;&#x624D;&#x80FD;&#x6709;&#x6548;&#x5730;&#x6269;&#x5C55;&#x3002;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;awakening-fong&#x6CE8;&#x91CA;:
10&#x6838;&#x65F6;, &#x5176;&#x4E2D;&#x7684;&#x5355;&#x4E2A;&#x7EBF;&#x7A0B;&#x8017;&#x65F6;t&#xFF0C;&#x5982;&#x679C;&#x5355;&#x4E2A;&#x7EBF;&#x7A0B;&#x6D88;&#x8017;&#x5728;&#x4E34;&#x754C;&#x533A;&#x7684;&#x65F6;&#x95F4;&#xFF1E;&#xFF1D;t/10&#xFF0C;&#x90A3;&#x4E48;&#xFF0C;10&#x6838;&#x540E;&#xFF0C;&#x52A0;&#x66F4;&#x591A;cpu&#x4E5F;&#x65E0;&#x76CA;&#x3002;&lt;/p&gt;

&lt;h3 id="toc_2"&gt;RCU&#x4F7F;&#x7528;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&#x201C;&#x5BBD;&#x9650;&#x671F;&#x201D;&#xFF08;grace period&#xFF09;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;awakening-fong:
&#x7C7B;&#x6BD4; &#x8FD8;&#x94B1;&#xFF0C;&#x5BBD;&#x9650; &#x51E0;&#x5929;&#x3002;&#x5BBD;&#x9650;&#x671F; &#x5373; &#x503A;&#x52A1;&#x7684;&#x7F13;&#x5EF6;&#x507F;&#x8FD8; &#x671F;&#x95F4;&#x3002;
&#x8FD8;&#x94B1; &#x597D;&#x6BD4; &#x662F;&#x91CA;&#x653E;&#x5185;&#x5B58;&#xFF0C;&#x5C06;&#x5185;&#x5B58;&#x5F52;&#x8FD8;&#x7ED9;&#x7CFB;&#x7EDF;&#x3002;&lt;/p&gt;

&lt;pre&gt;&lt;code class="c"&gt;Listing 9.21: Existence Guarantees Enable Per-Element Locking
//&#x8FD9;&#x91CC;&#x5047;&#x5B9A;&#x6CA1;&#x6709;hash&#x51B2;&#x7A81;
1 int delete(int key)
2 {
3     struct element *p;
4     int b;
5
6     b = hashfunction(key);
7     rcu_read_lock();
8     p = rcu_dereference(hashtable[b]);
9     if (p == NULL || p-&amp;gt;key != key) {
10         rcu_read_unlock();
11         return 0;
12     }
13     spin_lock(&amp;amp;p-&amp;gt;lock);
14     if (hashtable[b] == p &amp;amp;&amp;amp; p-&amp;gt;key == key) {
15         rcu_read_unlock();
16         rcu_assign_pointer(hashtable[b], NULL);
17         spin_unlock(&amp;amp;p-&amp;gt;lock);
18         synchronize_rcu();
19         kfree(p);
20         return 1;
21     }
22     spin_unlock(&amp;amp;p-&amp;gt;lock);
23     rcu_read_unlock();
24     return 0;
25 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick Quiz 9.33: Why is it OK to exit the RCU read-side critical section on line 15 of Listing 9.21 before releasing the lock on line 17?&lt;/p&gt;

&lt;p&gt;&#x7B54;&#xFF1A;&lt;/p&gt;

&lt;pre&gt;&lt;code class="c"&gt;7 rcu_read_lock();
8 p = rcu_dereference(hashtable[b]);
&#x3002;&#x3002;&#x3002;
13 spin_lock(&amp;amp;p-&amp;gt;lock); 
14 if (hashtable[b] == p &amp;amp;&amp;amp; p-&amp;gt;key == key) {
15     rcu_read_unlock();
&#x5904;&#x4E8E;rcu read&#x4FDD;&#x62A4;&#x8303;&#x56F4;&#xFF0C;&#x6709;&#x5F15;&#x7528;&#x8BA1;&#x6570;&#x7684;&#x6548;&#x679C;&#xFF0C;&#x89E3;&#x5F15;&#x7528;&#x7684; &#x5143;&#x7D20; &#x4E0D;&#x4F1A;&#x88AB;&#x91CA;&#x653E;&#xFF0C;&#x81F3;&#x5C11;&#x5728; rcu_read_unlock() &#x6267;&#x884C;&#x524D;&#x3002;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="c"&gt;13 spin_lock(&amp;amp;p-&amp;gt;lock);
14 if (hashtable[b] == p &amp;amp;&amp;amp; p-&amp;gt;key == key) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x56E0;&#x4E3A;&#x83B7;&#x5F97;&#x4E86;spin lock&#xFF0C;&#x624D;&#x80FD;&#x5220;&#x9664;&#x5143;&#x7D20;&#xFF0C;&#x800C;&#x73B0;&#x5728;&#xFF0C;&#x6211;&#x4EEC;&#x62FF;&#x5230;&#x4E86;&#x8BE5;&#x9501;&#xFF0C;&#x5220;&#x9664;&#x5143;&#x7D20;&#x4E0E;&#x5426;&#x638C;&#x63E1;&#x5728;&#x6211;&#x4EEC;&#x624B;&#x91CC;&#x3002;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rcu_read_lock&lt;/code&gt;&#x4FDD;&#x8BC1; &#x5143;&#x7D20;&#x4E0D;&#x88AB;&#x91CA;&#x653E;&lt;/li&gt;
&lt;li&gt;spin+key&#x5224;&#x65AD;(14&#x884C;)&#x4FDD;&#x8BC1; &#x62FF;&#x5230;&#x4E86;&#x5143;&#x7D20;&#x7684;&#x91CA;&#x653E;&#x6743;&#xFF0C; rcu&#x62C5;&#x5FC3;&#x7684;&#x4E8B;&#x60C5;&#x4E0D;&#x5B58;&#x5728;&#x4E86;&#xFF0C; &#x6240;&#x4EE5;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x9501;&#x3002;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&#x5C0F;&#x95EE;&#x9898;9.34&#xFF1A;&#x4E3A;&#x4EC0;&#x4E48;&#x56FE;9.32&#x7B2C;23&#x884C;&#x4E0D;&#x80FD;&#x5728;&#x7B2C;22&#x884C;&#x91CA;&#x653E;&#x9501;&#x4E4B;&#x524D;&#x5C31;&#x9000;&#x51FA;RCU&#x8BFB;&#x7AEF;&#x4E34;&#x754C;&#x533A;&#xFF1F;&lt;/p&gt;

&lt;p&gt;&#x7B54;: &#x6216;&#x8005;&#x8BF4;, &#x4E3A;&#x4F55; 22&#x884C; &#x4E0D;&#x80FD;&#x548C; 23 &#x884C; &#x5BF9;&#x8C03;&lt;/p&gt;

&lt;pre&gt;&lt;code class="c"&gt;cpu0                   cpu1
rcu read
spin lock
key==
                       rcu read
                      spin lock
&#x4FEE;&#x6539;&#x6307;&#x9488;
spin unlock
                         key!=
                        rcu unlock
sync rcu
free(p)
                       spin unkock(&amp;amp;p-&amp;gt;lock)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6CE8;&#x610F;&#xFF0C;&#x6700;&#x540E;cpu0&#x7684;free(p)&#x53C2;&#x6570;&#x662F;p&#xFF0C;
cpu1&#x7684;spin unlock&#x53C2;&#x6570;&#x4E5F;&#x662F;p&#x76F8;&#x5173;&#x7684;&#x3002;
cpu1&#x5BF9;&#x4E00;&#x4E2A;&#x5DF2;&#x7ECF;&#x88AB;&#x91CA;&#x653E;&#x6389;&#x7684;&#x5185;&#x5B58;&#x8FDB;&#x884C; unlock, &#x6545;,BUG&#x3002;&lt;/p&gt;

&lt;h3 id="toc_3"&gt;11&#x7AE0; &#x9A8C;&#x8BC1;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&#x5047;&#x8BBE;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x6D4B;&#x8BD5;&#x6709;10%&#x7684;&#x5931;&#x8D25;&#x51E0;&#x7387;&#x3002;&#x4F60;&#x9700;&#x8981;&#x8FD0;&#x884C;&#x591A;&#x5C11;&#x6B21;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x624D;&#x80FD;&#x5BFC;&#x81F4;&#x5931;&#x8D25;&#x7684;&#x51E0;&#x7387;&#x8D85;&#x8FC7;99%&#xFF1F;&#x6BD5;&#x7ADF;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5C06;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x8FD0;&#x884C;&#x8DB3;&#x591F;&#x6B21;&#x6570;&#xFF0C;&#x4F7F;&#x5F97;&#x81F3;&#x5C11;&#x6709;&#x4E00;&#x6B21;&#x5931;&#x8D25;&#x7684;&#x51E0;&#x7387;&#x8FBE;&#x5230;99%&#xFF0C;&#x5982;&#x679C;&#x6B64;&#x65F6;&#x5E76;&#x6CA1;&#x6709;&#x5931;&#x8D25;&#xFF0C;&#x90A3;&#x4E48;&#x4EC5;&#x4EC5;&#x53EA;&#x6709;1%&#x7684;&#x51E0;&#x7387;&#x8868;&#x660E;&#x8FD9;&#x662F;&#x7531;&#x4E8E;&#x597D;&#x8FD0;&#x6C14;&#x6240;&#x5BFC;&#x81F4;&#x3002;&lt;/p&gt;

&lt;p&gt;&#x516C;&#x5F0F;11.6&lt;br&gt;
&#x6240;&#x9700;&#x7684;&#x6D4B;&#x8BD5;&#x6B21;&#x6570;&#x662F; n = log (1 &#x2212; Fn )/log(1&#x2212; f)&lt;/p&gt;

&lt;p&gt;&#x5C06;f=0.1&#x53CA;Fn=0.99&#x4EE3;&#x5165;&#x516C;&#x5F0F;11.6&#xFF0C;&#x5F97;&#x5230;&#x7ED3;&#x679C;43.7&#xFF0C;&#x8FD9;&#x8868;&#x793A;&#x6211;&#x4EEC;&#x9700;&#x8981;44&#x6B21;&#x8FDE;&#x7EED;&#x6210;&#x529F;&#x8FD0;&#x884C;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x624D;&#x80FD;&#x6709;99%&#x7684;&#x628A;&#x63E1;&#x786E;&#x4FDD;&#x5BF9;&#x6545;&#x969C;&#x7684;&#x4FEE;&#x590D;&#x771F;&#x7684;&#x751F;&#x6548;&#x3002;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    <item>
      <title>(&#x8349;&#x7A3F;)perfbook 02 &#x81EA;&#x95EE;&#x81EA;&#x7B54;</title>
      <link>https://awakening-fong.github.io/posts/perf/perfbook-02</link>
      <pubDate>2022-09-17</pubDate>
      <description>&lt;p&gt;perfbook &#x6307;&#x7684;&#x662F; 
Is Parallel Programming Hard, And, If So, What Can You Do About It?
pdf &#x7248;&#x672C;&#x53EF;&#x4EE5;&#x4ECE;&#x5982;&#x4E0B;&#x7F51;&#x5740;&#x83B7;&#x53D6;: 
&lt;a href="https://www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html"&gt;https://www.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="toc_0"&gt;5.3.3 &#x7684;&#x5185;&#x5BB9;&#x5982;&#x4F55;&#x7406;&#x89E3;&lt;/h3&gt;

&lt;p&gt;&#x53EF;&#x4EE5;&#x7ED3;&#x5408;&#x5982;&#x4E0B;&#x95EE;&#x9898;&#x6765;&#x7406;&#x89E3;
Quick Quiz 5.33: p.129
Given that globalreserve counted against us in &lt;code&gt;add_count()&lt;/code&gt;, why doesn&#x2019;t it count for us in &lt;code&gt;sub_count()&lt;/code&gt; in Listing 5.7?&lt;/p&gt;

&lt;p&gt;&#x7B54;: awakening-fong: add_count()&#x8FD4;&#x56DE;0&#x662F;&#x5931;&#x8D25;, &#x8BA4;&#x4E3A;&#x662F; against. &#x800C;&#x4E0D;&#x662F;&#x8BF4; &#x8BBF;&#x95EE;&#x9501;&#x662F; against.&lt;/p&gt;

&lt;p&gt;add_count &#x7684;&#x5C40;&#x90E8;&#x4EE3;&#x7801;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="c"&gt;9  if (globalcountmax -
10      globalcount - globalreserve &amp;lt; delta) {
11      spin_unlock(&amp;amp;gblcnt_mutex);
12      return 0;
13 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;globalreserve &#x5F88;&#x5927;, &#x4F20;&#x9012;&#x7ED9;&#x5355;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684; delta &#x5982;&#x679C;&#x5F88;&#x5927;, 
&#x90A3;&#x4E48;, &#x5373;&#x4F7F;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B; &#x6D88;&#x8017;&#x7684;&#x5185;&#x5B58; &#x5F88;&#x5C0F;, &#x8FD9;&#x91CC;&#x7684; if &#x8FD8;&#x662F;&#x4F1A;&#x5224;&#x5B9A;&#x4E3A;&#x5185;&#x5B58;&#x8017;&#x5C3D;.&lt;/p&gt;

&lt;p&gt;5.4&#x7AE0;&#x8282;&#x4E2D;, &lt;code&gt;flush_local_count()&lt;/code&gt; &#x5BF9;globalreserve&#x975E;0&#x8FDB;&#x884C;&#x4E86;&#x5904;&#x7406;.&lt;/p&gt;

&lt;h3 id="toc_1"&gt;5.4.3 Signal-Theft Limit Counter Design&lt;/h3&gt;

&lt;p&gt;&#x5173;&#x4E8E;&#x56FE; Signal-Theft State Machine &lt;/p&gt;

&lt;p&gt;&#x56FE;&#x4E2D;&#x7684;&amp;quot;&#x8BF7;&#x6C42;&amp;quot;, &#x8C01;&#x5411;&#x8C01;&#x8BF7;&#x6C42;?
&#x7B54;: &#x914D;&#x989D;&#x7528;&#x5149;&#x4E86;&#xFF0C;&#x8BF7;&#x6C42;&#x65B0;&#x7684;&#x914D;&#x989D;&#x3002;&#x7EBF;&#x7A0B; &#x5411; &#x5168;&#x5C40; &#x8BF7;&#x6C42;&#x3002;&lt;/p&gt;

&lt;p&gt;&#x56FE;&#x4E2D;&#x7684;ready&#x662F;?, ready to do what?
&#x7B54;: ready to &#x7A83;&lt;/p&gt;

&lt;p&gt;&#x6162;&#x901F;&#x8DEF;&#x5F84;&#x4F7F;&#x7528;&#x201C;&#x8BF7;&#x6C42;&#x201D;&#x548C;&#x201C;&#x786E;&#x8BA4;&#x201D;&#x72B6;&#x6001;&#x6765;&#x786E;&#x5B9A;&#x4FE1;&#x53F7;&#x662F;&#x5426;&#x5E94;&#x5F53;&#x88AB;&#x91CD;&#x53D1;&#x3002;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flush_local_count()
{
    if (READ_ONCE(*theftp[t]) == THEFT_REQ) 
        pthread_kill(tid, SIGUSR1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;quot;&#x786E;&#x8BA4;&amp;quot;&#x4EC0;&#x4E48;?
&#x7B54;: &#x8BF7;&#x6C42;&#x5DF2;&#x6536;&#x5230;&#xFF0C;&#x8BF7;&#x6C42;&#x5DF2;&#x5904;&#x7406;&lt;/p&gt;

&lt;p&gt;&#x4E00;&#x65E6;&#x6162;&#x901F;&#x8DEF;&#x5F84;&#x53D1;&#x73B0;&#x67D0;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;theft&#x72B6;&#x6001;&#x4E3A;&#x201C;&#x51C6;&#x5907;&#x5B8C;&#x6BD5;&#x201D;&#xFF0C;&#x8FD9;&#x65F6;&#x6162;&#x901F;&#x8DEF;&#x5F84;&#x6709;&#x6743;&#x7A83;&#x53D6;&#x6B64;&#x7EBF;&#x7A0B;&#x7684;&#x8BA1;&#x6570;&#x3002;
awakening-fong&#x6CE8;&#x91CA;: 
&#x7A83;&#x53D6;&#x610F;&#x601D;&#x662F;  &#x4E0D;&#x662F;&#x4FEE;&#x6539;&#x81EA;&#x5DF1;&#x7684;count&#xFF0C;&#x800C;&#x662F; &#x4FEE;&#x6539;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#xFF0C;&#x62FF;&#x522B;&#x4EBA;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x4E3A;&#x7A83;&#x3002;
&#x51CF;&#x5C11;&#x4E86;per-thread &#x7684;count&#xFF0C;&#x8FD9;&#x4E2A;&#x4E4B;&#x540E;&#x81EA;&#x7136;&#x5C31;&#x662F;&#x53D1;&#x5E03;publish &#x5230;&#x5168;&#x5C40;&#x3002;&lt;/p&gt;

&lt;h3 id="toc_2"&gt;Chapter 6 Partitioning and Synchronization Design&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;&#x6BCF;&#x4E2A;&#x54F2;&#x5B66;&#x5BB6;&#x90FD;&#x5148;&#x62FF;&#x4ED6;&#x76D8;&#x5B50;&#x5468;&#x56F4;&#x7F16;&#x53F7;&#x6700;&#x5C0F;&#x7684;&#x53C9;&#x5B50;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x62FF;&#x7F16;&#x53F7;&#x6700;&#x9AD8;&#x7684;&#x53C9;&#x5B50;&#x3002;&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;awakening-fong&#x6CE8;&#x91CA;: 
&#x539F;&#x6587;&#x662F; 
Each philosopher picks up the lowest-numbered fork next to his or her plate, then picks up the other fork. 
&#x8FD9;&#x91CC;&#x4E2D;&#x6587;&#x7FFB;&#x8BD1;&#x5E94;&#x8BE5;&#x6709;&#x95EE;&#x9898;&#x3002;
&#x7B2C;2&#x56DE;&#x662F;&#x62FF; &#x7F16;&#x53F7;&#x6700;&#x5927;&#x7684;&#x5417;&#xFF1F;&#x597D;&#x50CF;&#x4E0D;&#x662F;&#xFF0C;&#x62FF;&#x7684;&#x5E94;&#x8BE5;&#x662F; &#x76D8;&#x5B50;&#x4E24;&#x8FB9;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x53C9;&#x5B50;&#xFF0C;&#x8FD9;&#x4E2A;&#x53C9;&#x5B50;&#x6BD4;&#x9996;&#x6B21;&#x7684;&#x53C9;&#x5B50;&#x7F16;&#x53F7;&#x8981;&#x5927;&#xFF0C;&#x4F46;&#x4E0D;&#x662F;&#x5168;&#x5C40;&#x6700;&#x5927;&#x7684;&#x7F16;&#x53F7;&#x3002;&lt;/p&gt;

&lt;h3 id="toc_3"&gt;Chapter 7 Locking&lt;/h3&gt;

&lt;p&gt;Strict RAII locking also prohibits overlapping critical sections, due to the fact that scopes must nest. &lt;/p&gt;

&lt;p&gt;awakening-fong&#xFF1A;&#x6BD4;&#x5982;&#x4E0D;&#x5141;&#x8BB8;&#x5982;&#x4E0B;&#x7684;&#x91CD;&#x53E0;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|-------|       lock1
   |--------|   lock2

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>bit rot</title>
      <link>https://awakening-fong.github.io/posts/fs/bit_rot</link>
      <pubDate>2022-07-30</pubDate>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;
&#x6839;&#x636E; &lt;a href="https://www.redhat.com/en/blog/what-bit-rot-and-how-can-i-detect-it-rhel"&gt;https://www.redhat.com/en/blog/what-bit-rot-and-how-can-i-detect-it-rhel&lt;/a&gt; btrfs &#x548C; zfs &#x652F;&#x6301; &#x63A2;&#x6D4B;bit rot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&#x5757;&#x5C42;
&#x90A3;, &#x5728;&#x5757;&#x5C42;, RAID1&#x662F;&#x5426;&#x80FD;&#x591F;&#x63A2;&#x6D4B;&#x5462;?
&#x7B54;: &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dm-integrity  &#x53EF;&#x4EE5;&#x7528;&#x6765;&#x9632;&#x6B62;  &#x9759;&#x9ED8;&#x6570;&#x636E;&#x635F;&#x574F;, &#x8BFB;&#x53D6;&#x544A;&#x77E5; io &#x9519;&#x8BEF;.   &lt;/p&gt;

&lt;p&gt;lvm&#x547D;&#x4EE4;&#x53EF;&#x4EE5;&#x96C6;&#x6210; DM integrity.  &lt;code&gt;lvcreate --raidintegrity&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;dm-integrity &#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x5728; Linux Software RAID &#x7684; RAID1.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&#x5176;&#x4ED6;
Minio &#x548C; Ceph &#x652F;&#x6301; erasure code, &#x6240;&#x4EE5;, &#x53EF;&#x4EE5;&#x5904;&#x7406; bit rot.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>&#x4ECE;&#x6545;&#x969C;&#x573A;&#x666F;&#x770B;paxos</title>
      <link>https://awakening-fong.github.io/posts/distributed_system/paxos</link>
      <pubDate>2022-05-01</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x6B63;&#x5E38;&#x573A;&#x666F; &lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src="/assets/media/paxos_normal.jpg"&gt;&lt;/p&gt;

&lt;p&gt;&#x56FE;14-3&#xFF1A;Paxos&#x7B97;&#x6CD5;&#xFF1A;&#x6B63;&#x5E38;&#x6267;&#x884C;&lt;/p&gt;

&lt;p&gt;&#x5728;&#x63D0;&#x8BAE;&#x9636;&#x6BB5;&#x4E2D;&#xFF0C;&#x63D0;&#x8BAE;&#x8005;&#x53D1;&#x9001;&#x4E00;&#x6761;Prepare(n)&#x6D88;&#x606F;&#xFF08;&#x5176;&#x4E2D;n&#x662F;&#x63D0;&#x8BAE;&#x7F16;&#x53F7;&#xFF09;.&lt;/p&gt;

&lt;p&gt;&#x5982;&#x679C;&#x63A5;&#x53D7;&#x8005;&#x4E4B;&#x524D;&#x5DF2;&#x7ECF;&#x63A5;&#x53D7;&#x4E86;&#xFF08;&#x6536;&#x5230;&#x8FC7;Accept!(m,vaccepted)&#x6D88;&#x606F;&#xFF09;&#x4EFB;&#x4F55;&#x5176;&#x4ED6;&#x63D0;&#x6848;&#xFF0C;&#x5B83;&#x5C06;&#x56DE;&#x590D;&#x4E00;&#x6761;Promise(m,vaccepted)&#x6D88;&#x606F;&#xFF0C;&#x901A;&#x77E5;&#x63D0;&#x8BAE;&#x8005;&#x5B83;&#x5148;&#x524D;&#x5DF2;&#x7ECF;&#x63A5;&#x53D7;&#x4E86;&#x7F16;&#x53F7;&#x4E3A;m&#x7684;&#x63D0;&#x6848;&#x3002;(m&#x4E0D;&#x7B49;&#x4E8E;n)
awakening-fong: &#x7528;&#x6765;&#x5904;&#x7406; &#x6709;&#x4EBA;&#x5F53;&#x9009;&#x4E86;&#xFF0C;&#x7136;&#x540E;&#xFF0C;&#x53D1;&#x51FA;&#x590D;&#x5236;&#x7684;&#x6307;&#x4EE4;&#x540E;&#xFF0C;&#x9886;&#x5BFC;&#x8005;&#x6302;&#x6389;&#x4E86;&#x3002;
&#x8FD9;&#x91CC;&#xFF0C;&#x501F;&#x8FD9;&#x4E2A;&#x673A;&#x4F1A;&#x901A;&#x77E5;&#x65B0;&#x7684;&#x53EF;&#x80FD;&#x7684;&#x9886;&#x5BFC;&#x8005;&#xFF0C;&#x8FC7;&#x53BB;&#x672C;&#x8BE5;&#x5199;&#x5165;&#x7684;&#x503C;&#x3002;&lt;/p&gt;

&lt;p&gt;&#x5173;&#x4E8E;Accept!(n,v) &#x5176;&#x4E2D;&#x7684;v&#xFF0C;
1. &#x6709;&#x63A5;&#x53D7;&#x65B9;&#x56DE;&#x590D;Promise(m,vaccepted), &#x5219;&#xFF0C;v&#x662F;&#x6536;&#x5230;&#x7684;&#x56DE;&#x590D;&#x4E2D;&#xFF0C; &#x7F16;&#x53F7;&#x6700;&#x9AD8;&#x7684;&#x63D0;&#x6848;&#x5BF9;&#x5E94;&#x7684;&#x503C;&#x3002;
2. &#x5982;&#x679C;&#x6240;&#x6709;&#x56DE;&#x590D;&#x5747;&#x4E0D;&#x5305;&#x542B;&#x65E7;&#x7684;&#x3001;&#x5DF2;&#x63A5;&#x53D7;&#x7684;&#x63D0;&#x6848;&#xFF0C;&#x90A3;&#x4E48;v&#x53EF;&#x4EE5;&#x662F;&#x63D0;&#x8BAE;&#x8005;&#x81EA;&#x5DF1;&#x63D0;&#x51FA;&#x7684;&#x4EFB;&#x4F55;&#x503C;&#x3002;&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x6545;&#x969C; &lt;/h4&gt;&lt;/h1&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;2.1  &#x63D0;&#x8BAE;&#x8005;&#x6545;&#x969C;&#xFF0C;&#x51B3;&#x5B9A;&#x65E7;&#x503C;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src="/assets/media/paxos_except_after_be_leader_send_val_crash_01.jpg"&gt;&lt;/p&gt;

&lt;p&gt;&#x56FE;14-4&#xFF1A;Paxos&#x6545;&#x969C;&#x573A;&#x666F;&#xFF1A;&#x63D0;&#x8BAE;&#x8005;&#x6545;&#x969C;&#xFF0C;&#x51B3;&#x5B9A;&#x65E7;&#x503C;
&#x63D0;&#x8BAE;&#x8005;P1&#x5DF2;&#x5B8C;&#x6210;&#x63D0;&#x6848;&#x7F16;&#x53F7;&#x4E3A;1&#x7684;&#x9009;&#x4E3E;&#x9636;&#x6BB5;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x5B83;&#x53D1;&#x9001;&#x503C;V1&#x7ED9;&#x63A5;&#x53D7;&#x8005;A1&#x4E4B;&#x540E;&#x5B95;&#x673A;&#x3002;&lt;/p&gt;

&lt;p&gt;&#x56FE;&#x793A;&#x4E2D;&#x5012;&#x6570;&#x7B2C;3&#x4E2A;promise(1,V1), 1&#x8868;&#x793A;&#x63D0;&#x8BAE;&#x7F16;&#x53F7;&#x4E3A;1&#xFF0C;
promise(1,V1)&#x6D88;&#x606F;&#x6765;&#x81EA;A1. &lt;/p&gt;

&lt;p&gt;Accept!(2,V1) &#x8FD9;&#x6837;&#x6548;&#x679C;&#x4E0A;&#xFF0C;P2&#x7EE7;&#x7EED;P1&#x7684;&#x5DE5;&#x4F5C;&#x3002;&lt;/p&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;2.2 &#x63D0;&#x8BAE;&#x8005;&#x6545;&#x969C;&#xFF0C;&#x51B3;&#x5B9A;&#x65B0;&#x503C;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src="/assets/media/paxos_except_after_be_leader_send_val_crash_02.jpg"&gt;&lt;/p&gt;

&lt;p&gt;P1&#x5728;&#x5C06;V1&#x53D1;&#x9001;&#x7ED9;A1&#x4E4B;&#x540E;&#x5B95;&#x673A;&#x3002;
&#x4E0B;&#x4E00;&#x4E2A;&#x63D0;&#x8BAE;&#x8005;P2&#x53D1;&#x8D77;&#x4E00;&#x4E2A;&#x63D0;&#x6848;&#x7F16;&#x53F7;&#x4E3A;2&#x7684;&#x65B0;&#x56DE;&#x5408;&#xFF0C;&#x6536;&#x96C6;Quorum&#x4E2A;&#x63A5;&#x53D7;&#x8005;&#x7684;&#x56DE;&#x590D;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x6B21;A2&#x548C;A3&#x9996;&#x5148;&#x505A;&#x51FA;&#x4E86;&#x54CD;&#x5E94;&#x3002;&lt;/p&gt;

&lt;h1 id="toc_4"&gt;&lt;h4&gt;3. &#x53C2;&#x8003;&#x8D44;&#x6599;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x672C;&#x6587;&#x5185;&#x5BB9;&#x5927;&#x7BC7;&#x5E45;&#x6765;&#x81EA; [&#x6570;&#x636E;&#x5E93;&#x7CFB;&#x7EDF;&#x5185;&#x5E55;] &lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x56E0;&#x679C;&#x5012;&#x7F6E;</title>
      <link>https://awakening-fong.github.io/posts/debug/inversion_of_cause_and_effect</link>
      <pubDate>2021-05-15</pubDate>
      <description>&lt;p&gt;&#x5982;&#x679C;&#x5206;&#x6790;&#x8FDB;&#x5165;&#x6B7B;&#x80E1;&#x540C;, &#x53EF;&#x80FD;&#x662F;&#x5206;&#x6790;&#x95EE;&#x9898;&#x65F6;, &#x56E0;&#x679C;&#x5012;&#x7F6E;&#x4E86;.
&#x6BD4;&#x5982;, &#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x592A;&#x5C0F;, &#x548C; &#x63A5;&#x6536;&#x6162; &#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;. &#x53EF;&#x80FD;&#x662F;&#x56E0;&#x4E3A; &#x63A5;&#x6536;&#x6162;, &#x5BFC;&#x81F4;&#x4E86;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x5C0F;;
&#x800C;&#x4E0D;&#x662F;&#x56E0;&#x4E3A;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x5C0F;, &#x5BFC;&#x81F4; &#x63A5;&#x6536;&#x6162;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x6A21;&#x5F0F; 05: &#x5927;&#x89C4;&#x6A21;&#x7CFB;&#x7EDF;&#x7684;&#x4E00;&#x4E9B;&#x5904;&#x7406;&#x65B9;&#x6CD5;</title>
      <link>https://awakening-fong.github.io/posts/other/scale_system_pattern</link>
      <pubDate>2021-03-14</pubDate>
      <description>&lt;p&gt;&#x672C;&#x7BC7;&#x5185;&#x5BB9; &#x548C;  &lt;a href="https://awakening-fong.github.io/posts/other/optimize_user_space"&gt;&#x6A21;&#x5F0F; 03: &#x7528;&#x6237;&#x6001;&#x7684;&#x4E00;&#x4E9B;&#x6027;&#x80FD;&#x4F18;&#x5316;&#x65B9;&#x6CD5;&lt;/a&gt; &#x7684;&#x5185;&#x5BB9;&#x7C7B;&#x4F3C;. &lt;/p&gt;

&lt;p&gt;&#x8FD9;&#x91CC;&#x9488;&#x5BF9;&#x5927;&#x89C4;&#x6A21;&#x7CFB;&#x7EDF;, &#x4ECE;&#x66F4;&#x5B8F;&#x89C2;&#x7684;&#x89D2;&#x5EA6;&#x8FDB;&#x884C;&#x63CF;&#x8FF0;. 
(&#x672C;&#x4EBA;&#x76EE;&#x524D;(2021&#x5E74;3&#x6708;)&#x672A;&#x5B9E;&#x8DF5;&#x8FC7;&#x5927;&#x89C4;&#x6A21;&#x7CFB;&#x7EDF;, &#x8FD9;&#x91CC;&#x4EC5;&#x662F;&#x7EB8;&#x4E0A;&#x7684;&#x8BB0;&#x5F55;)&lt;/p&gt;

&lt;h3 id="toc_0"&gt;&#x5206;&#x800C;&#x6CBB;&#x4E4B;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&#x8D1F;&#x8F7D;&#x5747;&#x8861;: 
&#x670D;&#x52A1;&#x7AEF;&#x8D1F;&#x8F7D;&#x5747;&#x8861;: LVS, DNS;
&#x5BA2;&#x6237;&#x7AEF;&#x8D1F;&#x8F7D;&#x5747;&#x8861;&lt;/li&gt;
&lt;li&gt;&#x8BFB;&#x5199;&#x5206;&#x79BB;, &#x591A;&#x4ECE; &#x8D1F;&#x8D23;&#x8BFB;&lt;/li&gt;
&lt;li&gt;&#x5206;&#x5E93;&#x5206;&#x8868;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_1"&gt;&#x4F4E;&#x6210;&#x672C;&#x5904;&#x7406;&lt;/h3&gt;

&lt;p&gt;==== &#x7F13;&#x5B58;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;redis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;==== &#x6279;&#x91CF;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;==== &#x9884;&#x5224;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bloom Filter &#x5904;&#x7406;&#x975E;&#x6CD5;&#x8BF7;&#x6C42;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;==== &#x5176;&#x4ED6;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&#x964D;&#x4F4E;&#x670D;&#x52A1;&#x7EA7;&#x522B;: &#x56FE;&#x6587;&#x5E76;&#x8302; -&amp;gt; &#x63A5;&#x8FD1;&#x7EAF;&#x6587;&#x672C;&lt;/li&gt;
&lt;li&gt;&#x6210;&#x672C;&#x8F6C;&#x79FB;: &#x670D;&#x52A1;&#x7AEF;&#x4F20;&#x8F93;&#x538B;&#x7F29;&#x540E;&#x7684;&#x5185;&#x5BB9;, &#x7531;&#x5BA2;&#x6237;&#x7AEF;&#x89E3;&#x538B;&#x7F29;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_2"&gt;&#x5BF9;&#x8D1F;&#x8F7D;&#x524A;&#x5CF0;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&#x6D88;&#x606F;&#x961F;&#x5217;&lt;/li&gt;
&lt;li&gt;&#x9650;&#x6D41;, &#x4F8B;&#x5982;, &#x8D2D;&#x7269;&#x7F51;&#x5740;&#x8BA9;&#x7528;&#x6237;&#x505A;&#x5B57;&#x7B26;&#x9A8C;&#x8BC1;&#x7801;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>&#x6A21;&#x5F0F; 02: IO&#x6027;&#x80FD;&#x4F18;&#x5316;&#x7684;&#x4E00;&#x4E9B;&#x65B9;&#x6CD5;</title>
      <link>https://awakening-fong.github.io/posts/other/io_perf</link>
      <pubDate>2020-10-17</pubDate>
      <description>&lt;h2 id="toc_0"&gt;1 &#x907F;&#x514D; &#x7ED9;&#x5185;&#x5B58;&#x7BA1;&#x7406;&#x6DFB;&#x5835;&lt;/h2&gt;

&lt;h3 id="toc_1"&gt;1.1 other&lt;/h3&gt;

&lt;p&gt;&#x5982;&#x679C; &#x6570;&#x636E; &#x4EC5;&#x4F7F;&#x7528;&#x4E00;&#x6B21;&#x7684;&#x8BDD;.
&lt;code&gt;POSIX_FADV_DONTNEED&lt;/code&gt; and &lt;code&gt;O_DIRECT&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="toc_2"&gt;2 &#x5199; &#x5206;&#x79BB;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&#x65E5;&#x5FD7;&#x76D8; &#x548C; &#x6570;&#x636E;&#x76D8; &#x5206;&#x79BB;&lt;/li&gt;
&lt;li&gt;&#x987A;&#x5E8F;&#x5199; &#x548C; &#x968F;&#x673A;&#x8BFB;&#x5199; &#x5206;&#x79BB;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_3"&gt;3 &#x5185;&#x6838;&#x53C2;&#x6570;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;/sys/block/sdx/queue/ &lt;/li&gt;
&lt;li&gt;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x53C2;&#x6570;&lt;/li&gt;
&lt;li&gt;/proc/sys/vm/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_4"&gt;4 &#x78C1;&#x76D8;&#x5206;&#x533A;&#x5BF9;&#x9F50;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;RAID &#x7684;&#x573A;&#x666F;&lt;/li&gt;
&lt;li&gt;xfs &#x7684;&#x652F;&#x6301;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>&#x6A21;&#x5F0F; 03: &#x7528;&#x6237;&#x6001;&#x7684;&#x4E00;&#x4E9B;&#x6027;&#x80FD;&#x4F18;&#x5316;&#x65B9;&#x6CD5;</title>
      <link>https://awakening-fong.github.io/posts/other/optimize_user_space</link>
      <pubDate>2020-10-17</pubDate>
      <description>&lt;h3 id="toc_0"&gt;&#x51CF;&#x5C11;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;buffer&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&#x5408;&#x5E76;&lt;/p&gt;

&lt;!-- * &#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x83B7;&#x53D6;&#x65F6;&#x95F4; --&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_1"&gt;&#x51CF;&#x5C11;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x8FDB;&#x7A0B;&#x5524;&#x9192;/&#x5207;&#x6362;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&#x907F;&#x514D;&#x60CA;&#x7FA4;&#x6216;&#x65E0;&#x6548;&#x5524;&#x9192;:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_signal&lt;/code&gt; &#x7684;&#x95EE;&#x9898;, &#x4EE5;&#x53CA;&#x66FF;&#x4EE3;&#x65B9;&#x6CD5;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;epoll_wait&lt;/code&gt; &#x8FB9;&#x6CBF;&#x89E6;&#x53D1;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;worker&#x6570;&#x91CF;, &#x901A;&#x5E38;&#x662F;&#x6307;&#x8FDB;&#x7A0B;&#x6570;, &#x9700;&#x8981; &amp;lt;= vCPU&#x6570;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;golang &#x534F;&#x7A0B; (&#x5F53;&#x524D;&#x7B14;&#x8005;&#x4E0D;&#x719F;&#x6089;golang)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_2"&gt;&#x6570;&#x636E;&#x5206;&#x7247;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;map reduce&lt;/li&gt;
&lt;li&gt;RAID0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_3"&gt;&#x6D41;&#x6C34;&#x7EBF;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&#x591A;&#x7EA7;&#x6D41;&#x6C34;&#x7EBF;, &#x62C9;&#x52A8;&#x5F0F;&#x751F;&#x4EA7;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fpart live mode &#x5B9E;&#x73B0;&#x62C9;&#x52A8;&#x5F0F;&#x751F;&#x4EA7;.&lt;/p&gt;

&lt;p&gt;&#x591A;&#x7EA7;&#x6D41;&#x6C34;&#x7EBF;, &#x5728;&#x7528;&#x6237;&#x6001;, &#x5BF9;&#x5E94;&#x7684;&#x662F; &#x5206;&#x5E03;&#x5728;&#x591A;&#x6838;&#x4E0A;&#x7684;&#x7EBF;&#x7A0B;/&#x8FDB;&#x7A0B;, 
&#x9700;&#x8981;&#x8003;&#x8651; &#x6D88;&#x606F;&#x4F20;&#x9012;&#x7684;&#x635F;&#x8017; &#x548C; &#x907F;&#x514D;&#x5355;&#x9053;&#x5DE5;&#x5E8F;&#x8017;&#x65F6;&#x8FC7;&#x957F;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&#x6D41;&#x91CF;&#x63A7;&#x5236;, congestion control&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="toc_4"&gt;&#x51CF;&#x5C11;&#x6570;&#x636E;&#x62F7;&#x8D1D;&lt;/h3&gt;

&lt;h3 id="toc_5"&gt;&#x8C03;&#x7814;&#x65B0;&#x7684;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;/&#x65B0;&#x7684;&#x65B9;&#x6CD5;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;io_uring &lt;/li&gt;
&lt;li&gt;eBPF&lt;/li&gt;
&lt;li&gt;&#x200B;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>&#x6A21;&#x5F0F; 04: trouble less &#x7684;&#x4E00;&#x4E9B;&#x6A21;&#x5F0F;(&#x5F85;&#x66F4;&#x65B0;)</title>
      <link>https://awakening-fong.github.io/posts/other/trouble_less_pattern</link>
      <pubDate>2020-10-17</pubDate>
      <description>&lt;h3 id="toc_0"&gt;&#x591A;&#x7EBF;&#x7A0B;&lt;/h3&gt;

&lt;p&gt;&#x8FDB;&#x7A0B;&#x95F4;&#x4EA4;&#x4E92;&#x901A;&#x8FC7;&#x4F20;&#x9012;&#x6D88;&#x606F;, &#x800C;&#x4E0D;&#x8981;&#x5171;&#x4EAB;&#x72B6;&#x6001;.&lt;/p&gt;

&lt;h3 id="toc_1"&gt;&#x5C11;&#x7528;&#x591A;&#x7EBF;&#x7A0B;&lt;/h3&gt;

&lt;h3 id="toc_2"&gt;&#x4FE1;&#x53F7;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&#x65B9;&#x5F0F;1: &#x5C4F;&#x853D;&#x4E00;&#x4E9B;&#x4FE1;&#x53F7;, &#x7136;&#x540E;&#x4F7F;&#x7528; signalfd &#x6216; sigwaitinfo.&lt;/li&gt;
&lt;li&gt;&#x65B9;&#x5F0F;2: &#x4FE1;&#x53F7;&#x5904;&#x7406;&#x51FD;&#x6570;&#x4E2D;&#x4EC5;&#x4EC5; &#x8BBE;&#x7F6E;&#x4FE1;&#x53F7;&#x5230;&#x6765;&#x7684;&#x6807;&#x5FD7;, &#x5176;&#x4ED6;&#x5730;&#x65B9;&#x68C0;&#x6D4B;&#x8BE5;&#x6807;&#x5FD7;.&lt;/li&gt;
&lt;li&gt;&#x65B9;&#x5F0F;3: &#x4FE1;&#x53F7; handler &#x4E2D;, &#x5F80; pipe/eventfd &#x5199;&#x5165;&#x5185;&#x5BB9;,
&#x4E3B;&#x7A0B;&#x5E8F;&#x901A;&#x8FC7; poll/epoll &#x6765;&#x5224;&#x65AD;&#x6709;&#x4E8B;&#x4EF6;&#x5230;&#x6765;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>&#x5173;&#x4E8E; longhorn &#x5FEB;&#x7167;&#x7684;&#x81EA;&#x95EE;&#x81EA;&#x7B54;</title>
      <link>https://awakening-fong.github.io/posts/distributed_system/longhorn_snapshot_qa</link>
      <pubDate>2020-10-06</pubDate>
      <description>&lt;p&gt;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#x672A;&#x7ECF;&#x8FC7;&#x6E90;&#x7801;&#x67E5;&#x9A8C;. &#x5982;&#x6709;&#x9519;&#x8BEF;, &#x6B22;&#x8FCE;&#x6307;&#x51FA;.&lt;/p&gt;

&lt;p&gt;&#x4E00;&#x5757;1G&#x7684;&#x78C1;&#x76D8;, &#x8981;&#x5148;&#x5212;&#x5B9A;&#x7528;&#x6765;&#x5B58;&#x50A8; &#x5FEB;&#x7167;&#x7684;&#x533A;&#x57DF;, &#x8FD9;&#x6837;, &#x5B9E;&#x9645;&#x6700;&#x5927;&#x5BFB;&#x5740;&#x7684; &#x5C31;&#x4E0D;&#x662F;1G, &#x6BD4;&#x5982;&#x8BF4;, &#x53EA;&#x6709;800MB, &#x662F;&#x8FD9;&#x6837;&#x5417;?&lt;br&gt;
&#x7B54;: &#x4E0D;&#x662F;&#x8FD9;&#x6837;&#x7684;, &#x800C;&#x662F;&#x5C31;&#x6CA1;&#x6709;&#x76F4;&#x63A5;&#x5BFB;&#x5740;&#x7684;. &#x8BFB;&#x53D6;&#x90FD;&#x9700;&#x8981;&#x67E5;&#x8BE2;&#x6620;&#x5C04;&#x8868;. &#x6362;&#x53E5;&#x8BDD;&#x8BF4;, &#x6574;&#x5757;&#x78C1;&#x76D8;&#x90FD;&#x7528;&#x6765;&#x5B58;&#x653E;&#x5FEB;&#x7167;.&lt;/p&gt;

&lt;p&gt;&#x5FEB;&#x7167;&#x662F;&#x5B58;&#x653E;&#x5728;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x4E0A;, &#x8FD8;&#x662F; &#x6CA1;&#x6709;&#x5757;&#x8BBE;&#x5907;&#x4E0A;, &#x5212;&#x4E00;&#x5757;&#x533A;&#x57DF; &#x5B58;&#x5FEB;&#x7167;?&lt;br&gt;
&#x7B54;: &#x4E0D;&#x662F;&#x5B58;&#x653E;&#x5728;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x4E0A;.&lt;/p&gt;

&lt;p&gt;live data&#x662F;&#x5199;&#x5230; &#x5B9E;&#x9645;&#x78C1;&#x76D8;&#x4F4D;&#x7F6E;&#x4E0A;(&#x4E0D;&#x9700;&#x8981;&#x6620;&#x5C04;), &#x5BF9;&#x5417;?&lt;br&gt;
&#x7B54;: &#x597D;&#x50CF;&#x4E0D;&#x662F;.&lt;/p&gt;

&lt;p&gt;backup &#x8FD8;&#x662F; &#x8DDF; &#x5FEB;&#x7167;&#x5B58;&#x653E;&#x5728;&#x540C;&#x4E00;&#x5757;&#x78C1;&#x76D8;&#x4E0A;&#x5417;?&lt;br&gt;
&#x7B54;: &#x4E0D;&#x662F;&#x7684;.
&#x5FEB;&#x7167;&#x5411;&#x4E0A;&#x5C42; &#x5C55;&#x793A;&#x4E86; &#x7EBF;&#x6027;&#x7684;&#x78C1;&#x76D8;, &#x800C;&#x5176;&#x5B9E;&#x73B0;&#x662F; &#x6620;&#x5C04;&#x8868;.
backup&#x662F;&#x5BF9; &#x5FEB;&#x7167;&#x7684;&#x6574;&#x5408;, &#x82E5;&#x653E;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x78C1;&#x76D8;&#x4E0A;, &#x5219;&#x4F1A;&#x5E72;&#x6270; &#x6620;&#x5C04;&#x5173;&#x7CFB;.&lt;/p&gt;

&lt;p&gt;&#x5FEB;&#x7167;&#x81EA;&#x8EAB;&#x662F;&#x9700;&#x8981;&#x5B58;&#x50A8; &#x5730;&#x5740;&#x7684;, &#x5426;&#x5219;&#x65E0;&#x6CD5;&#x901A;&#x8FC7; &#x5FEB;&#x7167;&#x6765;&#x6784;&#x5EFA; backup.
backup&#x5C55;&#x793A;&#x7684;&#x662F; &#x7EBF;&#x6027;&#x7684;&#x7A7A;&#x95F4;, &#x8FD8;&#x662F;&#x9700;&#x8981;&#x6620;&#x5C04;? &#x6216;&#x8005;&#x8BF4;, backup&#x662F;&#x5426;&#x9700;&#x8981;&#x5B58;&#x50A8; &#x5757;&#x7684;&#x5730;&#x5740;(&#x8D77;&#x59CB;&#x5730;&#x5740;)?&lt;br&gt;
&#x7B54;:  &#x6587;&#x6863;&#x63D0;&#x5230; backup&#x6BCF;&#x5757;&#x662F;2M, &#x7531;&#x6B64;&#x53EF;&#x731C;&#x60F3;, 
backup&#x7684;&#x7EC4;&#x7EC7;&#x5F62;&#x5F0F; &#x5730;&#x5740;&#x662F;&#x9012;&#x589E;&#x7684;, &#x4F46;&#x5730;&#x5740;&#x53EF;&#x4EE5;&#x4E0D;&#x8FDE;&#x8D2F;, &#x4E5F;&#x5C31;&#x662F;&#x5141;&#x8BB8; 2M&#x7684;&#x5757; &#x4E4B;&#x95F4;&#x6709; &#x65AD;&#x5F00;. &#x6240;&#x4EE5;, &#x9700;&#x8981;&#x5B58;&#x50A8;&#x5757;&#x7684;&#x8D77;&#x59CB;&#x5730;&#x5740;.
disaster recovery (DR) volume &#x624D;&#x662F;&#x4E0D;&#x9700;&#x8981;&#x8D77;&#x59CB;&#x5730;&#x5740;&#x7684;, &#x56E0;&#x4E3A;&#x662F;volume.&lt;/p&gt;

&lt;p&gt;disaster recovery (DR) volume &#x4E0D;&#x9700;&#x8981;&#x8D77;&#x59CB;&#x5730;&#x5740;?&lt;br&gt;
&#x7B54;: &#x5982;&#x679C;&#x662F;&#x8FD9;&#x6837;&#x7684;&#x8BDD;, &#x4E3B;&#x5907;&#x4E24;&#x7AEF;&#x7684;&#x903B;&#x8F91; &#x5C82;&#x4E0D;&#x662F;&#x4E0D;&#x80FD;&#x590D;&#x7528;&#x4E86;?
&#x53EF;&#x4EE5;&#x590D;&#x7528;. &#x521D;&#x59CB;&#x6620;&#x5C04;&#x8868;, &#x90FD;&#x6620;&#x5C04;&#x5230; DR&#x5377;&#x4E0A;, &#x540E;&#x7EED;&#x5199;&#x518D;&#x4FEE;&#x6539;&#x6620;&#x5C04;&#x8868;.
&#x4E5F;&#x5C31;&#x662F; &#x6620;&#x5C04;&#x8868; &#x7684;&#x76EE;&#x7684;&#x5730;  &#x53EF;&#x4EE5;&#x662F; &#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x5377;.&lt;/p&gt;

&lt;p&gt;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;backup&#x540E;, &#x7B2C;2&#x4E2A;backup&#x662F;&#x5426;&#x9700;&#x8981;&#x5305;&#x542B;&#x7B2C;1&#x4E2A;backup?&lt;br&gt;
&#x7B54;: &#x8981;&#x7684;. &#x4E0D;&#x8FC7;&#x7531;&#x4E8E; backup&#x662F;&#x7531;obj&#x7EC4;&#x6210;&#x7684;, &#x6BCF;&#x5757;2MB, &#x6240;&#x4EE5;, &#x53EF;&#x4EE5;&#x5B58;&#x5728;&#x5171;&#x7528;&#x7684;obj.&lt;/p&gt;

&lt;p&gt;&#x5404;&#x4E2A;backup &#x4E4B;&#x95F4; &#x662F;&#x5426;&#x5B58;&#x5728; &#x4EA4;&#x53C9;/&#x91CD;&#x53E0;&#x7684; &#x78C1;&#x76D8;&#x5730;&#x5740;&#x533A;&#x95F4;/&#x8303;&#x56F4;?&lt;br&gt;
&#x7B54;: &#x53C2;&#x8003;&#x4E0A;&#x4E00;&#x4E2A;&#x95EE;&#x9898;.&lt;/p&gt;

&lt;p&gt;&#x95EE;&#x9898;: live &#x6570;&#x636E; &#x548C; &#x5FEB;&#x7167;&#x7684;&#x4E0D;&#x540C;?&lt;br&gt;
&#x7B54;: live &#x662F;&#x53EF;&#x8BFB;&#x5199;&#xFF0C;&#x5FEB;&#x7167;&#x662F;&#x53EA;&#x8BFB;&lt;/p&gt;

&lt;p&gt;&#x5199;&#x65F6;&#x62F7;&#x8D1D; (Copy-On-Write)&#xFF0C;COW&lt;br&gt;
&#x5199;&#x65F6;&#x91CD;&#x5B9A;&#x5411; (Redirect-On-Write)&#xFF0C;ROW&lt;br&gt;
&#x95EE;&#x9898;: longhorn&#x5C5E;&#x4E8E;&#x54EA;&#x4E2A;?&lt;br&gt;
&#x7B54;: longhorn&#x662F;ROW&#x7684;.&lt;br&gt;
COW&#x7684;&#x5FEB;&#x7167;&#x5377;&#x5B58;&#x653E;&#x7684;&#x662F;&#x539F;&#x59CB;&#x6570;&#x636E;&#xFF0C;
&#x800C; ROW&#x7684;&#x5FEB;&#x7167;&#x5377;&#x5B58;&#x653E;&#x7684;&#x662F;&#x65B0;&#x6570;&#x636E;.&lt;br&gt;
ROW&#x7684;&#x5199;&#x6027;&#x80FD;&#x57FA;&#x672C;&#x6CA1;&#x6709;&#x635F;&#x8017;, &#x4F46;&#x662F;&#x5176;&#x6570;&#x636E;&#x4F1A;&#x53D8;&#x5F97;&#x975E;&#x5E38;&#x79BB;&#x6563;, &#x6240;&#x4EE5;&#x5176;&#x8FDE;&#x7EED;&#x8BFB;&#x5199;&#x6027;&#x80FD;&#x4E0D;&#x5982;COW.&lt;br&gt;
&#x5728;&#x5206;&#x5E03;&#x5F0F;&#x573A;&#x666F;&#x4E0B;&#xFF0C;&#x8BFB;&#x53D6;&#x901A;&#x5E38;&#x4E0D;&#x662F;&#x6027;&#x80FD;&#x74F6;&#x9888;, &#x6570;&#x636E;&#x8D8A;&#x5206;&#x6563;, &#x6027;&#x80FD;&#x8D8A;&#x9AD8;, ROW &#x7684;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#x662F;&#x7528;&#x5728;&#x5206;&#x5E03;&#x5F0F;&#x4E2D;.&lt;/p&gt;

&lt;p&gt;&#x5173;&#x4E8E;cow&#x65B9;&#x5F0F;&#x7684;&#x5FEB;&#x7167;&lt;br&gt;
&#x7B54;: &#x66F4;&#x6539;&#x6570;&#x636E;&#x65F6;&#xFF0C;&#x4F1A;&#x62F7;&#x8D1D;&#x65E7;&#x6570;&#x636E;&#x5230;&#x5FEB;&#x7167;&#x5377;&#xFF0C;&#x6E90;&#x6570;&#x636E;&#x4F1A;&#x88AB;&#x8986;&#x76D6;, &#xFF0C;&#x5FEB;&#x7167;&#x6307;&#x9488;&#x8868;&#x7684;&#x5730;&#x5740;&#x4F1A;&#x66F4;&#x65B0;, &#x540E;&#x7EED;&#x7684;&#x5199;&#x6620;&#x5C04;&#x5230; &#x6570;&#x636E;&#x5377;. &#x5FEB;&#x7167;&#x5377;&#x662F;&#x53EA;&#x8BFB;&#x7684;.&lt;br&gt;
&#x4F18;&#x70B9;&#xFF1A;&#x539F;&#x59CB;&#x5377;&#x7269;&#x7406;&#x5757;&#x8FDE;&#x7EED;.&lt;br&gt;
&#x7F3A;&#x70B9;&#xFF1A;&#x964D;&#x4F4E;&#x6E90;&#x6570;&#x636E;&#x5377;&#x7684;&#x5199;&#x6027;&#x80FD;  &lt;/p&gt;
</description>
    </item>
    <item>
      <title>C++ STL &#x7684;&#x4E00;&#x4E9B;trap(&#x5F85;&#x66F4;&#x65B0;)</title>
      <link>https://awakening-fong.github.io/posts/lang/stl_trap</link>
      <pubDate>2020-07-12</pubDate>
      <description>&lt;h2 id="toc_0"&gt;&#x904D;&#x5386;&#x8FC7;&#x7A0B;&#x4E2D;&#x5220;&#x9664;&#x8282;&#x70B9;, it=your_stl.erase(it) &#x5C31;&#x53EF;&#x4EE5;&#x5417;?&lt;/h2&gt;

&lt;p&gt;&#x7B54;: &#x8003;&#x8651;map&#x7684;&#x60C5;&#x666F;, &#x7531;&#x4E8E;&#x5220;&#x9664;&#x540E;, &#x4F1A;&#x505A;&#x5E73;&#x8861;&#x52A8;&#x4F5C;, &#x5BFC;&#x81F4;&#x7EE7;&#x7EED;&#x5F80;&#x4E0B;&#x904D;&#x5386;, &#x5B58;&#x5728; &#x6CA1;&#x6709;&#x5B8C;&#x6574;&#x904D;&#x5386;&#x7684;&#x60C5;&#x51B5;.
&#x6240;&#x4EE5;, &#x9700;&#x8981;&#x5148;&#x5C06;&#x8981;&#x5220;&#x9664;&#x7684;&#x653E;&#x5165;&#x4E34;&#x65F6;list, &#x5F85;&#x904D;&#x5386;&#x5B8C;&#x6210;&#x540E;, &#x5728;&#x7EDF;&#x4E00;&#x5220;&#x9664;list&#x4E0A;&#x7684;&#x8282;&#x70B9;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>LevelDB 05: &#x6027;&#x80FD;</title>
      <link>https://awakening-fong.github.io/posts/database/leveldb_05_perf_latency</link>
      <pubDate>2019-09-13</pubDate>
      <description>&lt;p&gt;&#x76EE;&#x5F55;:
&lt;li&gt; &lt;a href="#toc_0"&gt; 1. &#x907F;&#x514D;&#x7A81;&#x53D1;&#x5927;&#x91CF;&#x538B;&#x7F29;, &#x5BFC;&#x81F4;&#x5EF6;&#x8FDF;&#x8FC7;&#x5927;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_1"&gt; 2. seek &#x548C; compaction&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_2"&gt; 2.1 &#x91CF;&#x5316;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_3"&gt; 3. BloomFilter&lt;/a&gt;  &lt;/li&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="toc_0"&gt;1. &#x907F;&#x514D;&#x7A81;&#x53D1;&#x5927;&#x91CF;&#x538B;&#x7F29;, &#x5BFC;&#x81F4;&#x5EF6;&#x8FDF;&#x8FC7;&#x5927;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::MakeRoomForWrite
{

  if (allow_delay &amp;amp;&amp;amp;
    versions_-&amp;gt;NumLevelFiles(0) &amp;gt;= config::kL0_SlowdownWritesTrigger) {
  // We are getting close to hitting a hard limit on the number of
  // L0 files.  Rather than delaying a single write by several
  // seconds when we hit the hard limit, start delaying each
  // individual write by 1ms to reduce latency variance. &#x4E0E;&#x5176;&#x5728;&#x8FBE;&#x5230;hard limit&#x540E;, &#x5EF6;&#x540E;&#x597D;&#x51E0;&#x79D2;, &#x6211;&#x4EEC;&#x9009;&#x62E9;&#x5728;&#x8FBE;&#x5230;soft limit&#x540E;, &#x5BF9;&#x6BCF;&#x4E2A;&#x72EC;&#x7ACB;&#x7684;&#x5199;&#x5EF6;&#x540E;1ms. Also,
  // this delay hands over some CPU to the compaction thread in
  // case it is sharing the same core as the writer. &#x8FD9;&#x6837;, &#x4E5F;&#x5C06;&#x4E00;&#x4E9B;cpu&#x8BA9;&#x7ED9;&#x538B;&#x7F29;&#x7EBF;&#x7A0B;.
  env_-&amp;gt;SleepForMicroseconds(1000);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_1"&gt;2. seek &#x548C; compaction&lt;/h2&gt;

&lt;p&gt;&#x4EE3;&#x7801; Version::Get()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (last_file_read != nullptr &amp;amp;&amp;amp; stats-&amp;gt;seek_file == nullptr) {
  // We have had more than one seek for this read.  Charge(&#x8BB0;&#x5728;&#x8D26;&#x4E0A;) the 1st file.

  stats-&amp;gt;seek_file = last_file_read;
  stats-&amp;gt;seek_file_level = last_file_read_level;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;last_file_read&lt;/code&gt; &#x7684; FileMetaData, &#x7ED9;&#x51FA;&#x7684;key&#x8303;&#x56F4; &#x80FD;&#x591F;&#x56CA;&#x62EC; &#x8981;&#x67E5;&#x627E;&#x7684;key (smallest  &amp;lt; targe key &amp;lt;  largest), &#x4F46;&#x7ED3;&#x679C;&#x5E76;&#x6CA1;&#x6709;&#x5339;&#x914D;&#x7684;key.
&#x8FD9;&#x6837;, &#x6211;&#x4EEC;&#x5C31;&#x4F1A;&#x7EE7;&#x7EED;&#x67E5;&#x770B;&#x5176;&#x4ED6;&#x6587;&#x4EF6;&#x7684;FileMetaData.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::Get
|--current-&amp;gt;Get(options, lkey, value, &amp;amp;stats); // Version::Get
|--current-&amp;gt;UpdateStats(stats)
| |--FileMetaData* f = stats.seek_file;
| |--f-&amp;gt;allowed_seeks--;
|--if (f-&amp;gt;allowed_seeks &amp;lt;= 0)
| |--file_to_compact_ = f;
| |--MaybeScheduleCompaction();
| | |--env_-&amp;gt;Schedule(&amp;amp;DBImpl::BGWork, this)
| | | |--DBImpl::BackgroundCall() -&amp;gt; BackgroundCompaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x67D0;&#x4E2A;&#x5C42;&#x7EA7;&#x7684;&#x67D0;&#x4E2A;&#x6587;&#x4EF6;&#x65E0;&#x6548;seek&#x8FC7;&#x591A;&#xFF0C;&#x9700;&#x8981;compaction.&lt;/p&gt;

&lt;h3 id="toc_2"&gt;2.1 &#x91CF;&#x5316;&lt;/h3&gt;

&lt;p&gt;leveldb/db/version_set.cc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// We arrange to automatically compact this file after
// a certain number of seeks.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x95EE;&#x9898;: &#x4E3A;&#x4F55;&#x8981;&#x81EA;&#x52A8;&#x538B;&#x7F29; &#x89E6;&#x53D1;&#x662F;&#x6839;&#x636E; seek? (&#x901A;&#x5E38;, &#x538B;&#x7F29;&#x662F; &#x7531; &#x5185;&#x5B58;&#x5199;&#x5165;&#x78C1;&#x76D8; &#x89E6;&#x53D1;&#x7684;)&lt;/p&gt;

&lt;p&gt;&#x7B54;: &#x8BB0;&#x5F55;seek&#x8BBF;&#x95EE;&#x7684;&#x6587;&#x4EF6;, &#x53EF;&#x662F;&#x8BA4;&#x4E3A;&#x662F;&#x7ECF;&#x5386;&#x4E86;false hit,  &#x5982;&#x679C;&#x591A;&#x6B21;false hit, &#x90A3;&#x4E48;, &#x6211;&#x4EEC;&#x5C31;&#x628A;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x548C;&#x5176;&#x4ED6;&#x6587;&#x4EF6;&#x5408;&#x5E76;, &#x907F;&#x514D;&#x65E0;&#x8C13;&#x7684;&#x8BBF;&#x95EE;.
&#x4EA7;&#x751F;&#x8FD9;&#x79CD;seek&#x7684;&#x539F;&#x56E0;&#x662F;:  level n&#x548C;level n + 1, &#x5B58;&#x5728;overlap.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;leveldb/db/version_set.cc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// We arrange to automatically compact this file after
// a certain number of seeks. &#x4E00;&#x5B9A;&#x6570;&#x91CF;&#x7684;seek&#x540E;, &#x542F;&#x52A8;&#x81EA;&#x52A8;&#x538B;&#x7F29;. &#x8981;&#x8BA1;&#x7B97;&#x51FA;&#x591A;&#x5C11;&#x6B21;seek&#x540E;&#x538B;&#x7F29;&#x6BD4;&#x8F83;&#x5408;&#x9002;. Let&amp;#39;s assume:
//   (1) One seek costs 10ms
//   (2) Writing or reading 1MB costs 10ms (100MB/s)
//   (3) A compaction of 1MB does 25MB of IO:
//         1MB read from this level
//         10-12MB read from next level (boundaries may be misaligned)
//         10-12MB written to next level
// This implies that 25 seeks cost the same as the compaction
// of 1MB of data.  25&#x4E2A;seek&#x8017;&#x65F6;:25*10ms == &#x8BFB;&#x6216;&#x5199;25MB == &#x538B;&#x7F29;1MB.   I.e., one seek costs approximately the
// same as the compaction of 40KB of data.  We are a little
// conservative and allow approximately one seek for every 16KB
// of data before triggering a compaction.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_3"&gt;3. BloomFilter&lt;/h2&gt;

&lt;p&gt;&#x5224;&#x65AD;&#x67D0;&#x4E2A;&#x5143;&#x7D20;&#x662F;&#x5426;&#x5C5E;&#x4E8E;&#x96C6;&#x5408;.
&#x4E0D;&#x4F1A;&#x53D1;&#x751F;false negatives.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>LevelDB 04: Compact</title>
      <link>https://awakening-fong.github.io/posts/database/leveldb_04_compact</link>
      <pubDate>2019-09-12</pubDate>
      <description>&lt;p&gt;&#x76EE;&#x5F55;:
&lt;li&gt; &lt;a href="#toc_0"&gt; 1. &#x4E3A;&#x4EC0;&#x4E48;&#x8981;compaction?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_1"&gt; 2. &#x538B;&#x7F29;&#x57FA;&#x7840;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_2"&gt; 3. The Universal Style Compaction &#x548C; The Level Style Compaction &#x7684;&#x533A;&#x522B;?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_3"&gt; 4. Leveled-Compaction&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_4"&gt; 4.1 leveldb&#x7684;DBImpl::DoCompactionWork&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_5"&gt; 5. &#x53C2;&#x8003;&#x8D44;&#x6599;&lt;/a&gt;  &lt;/li&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="toc_0"&gt;1. &#x4E3A;&#x4EC0;&#x4E48;&#x8981;compaction?&lt;/h2&gt;

&lt;p&gt;compaction&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x6570;&#x636E;&#x7684;&#x67E5;&#x8BE2;&#x6548;&#x7387;&#xFF0C;&#x6CA1;&#x6709;&#x7ECF;&#x8FC7;compaction&#xFF0C;&#x9700;&#x8981;&#x4ECE;&#x5F88;&#x591A;SST file&#x53BB;&#x67E5;&#x627E;&#xFF0C;&#x800C;&#x505A;&#x8FC7;compaction&#x540E;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4ECE;&#x6709;&#x9650;&#x7684;SST&#x6587;&#x4EF6;&#x53BB;&#x67E5;&#x627E;&#xFF0C;&#x5927;&#x5927;&#x7684;&#x63D0;&#x9AD8;&#x4E86;&#x968F;&#x673A;&#x67E5;&#x8BE2;&#x7684;&#x6548;&#x7387;&#xFF0C;&#x53E6;&#x5916;&#x4E5F;&#x53EF;&#x4EE5;&#x5220;&#x9664;&#x8FC7;&#x671F;&#x6570;&#x636E;&#x3002;&lt;/p&gt;

&lt;p&gt;&#x5220;&#x9664;&#x8FC7;&#x671F;&#x6570;&#x636E;? &#x6BD4;&#x5982; &#x76F8;&#x540C;key, &#x4E0D;&#x540C;&#x65F6;&#x671F;&#x7684;value?&lt;/p&gt;

&lt;h2 id="toc_1"&gt;2. &#x538B;&#x7F29;&#x57FA;&#x7840;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/facebook/rocksdb/wiki/RocksDB-Basics"&gt;https://github.com/facebook/rocksdb/wiki/RocksDB-Basics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The three basic constructs of RocksDB are memtable, sstfile and logfile. The memtable is an in-memory data structure - new writes are inserted into the memtable and are optionally written to the logfile. logfile&#x662F;&#x53EF;&#x9009;&#x7684;. The logfile is a sequentially-written file on storage. When the memtable fills up, it is flushed to a sstfile on storage and the corresponding logfile can be safely deleted. The data in an sstfile is sorted to facilitate easy lookup of keys.&lt;/p&gt;

&lt;p&gt;When a &lt;code&gt;memtable&lt;/code&gt; is full, its content is written out to a file in Level-0 (L0).  RocksDB removes duplicate and overwritten keys in the memtable when it is flushed to a file in L0.&lt;/p&gt;

&lt;h2 id="toc_2"&gt;3. The Universal Style Compaction &#x548C; The Level Style Compaction &#x7684;&#x533A;&#x522B;?&lt;/h2&gt;

&lt;p&gt;leveled compaction&#x662F;rocksdb&#x9ED8;&#x8BA4;&#x7684;&#x538B;&#x7F29;&#x65B9;&#x5F0F;.[2]&lt;br&gt;
The Universal Style Compaction &#x5C5E;&#x4E8E; &amp;quot;size tiered&amp;quot;  &#x6216;&#x79F0; &amp;quot;tiered&amp;quot; &#x65B9;&#x5F0F;.&lt;/p&gt;

&lt;p&gt;Here is an example of a typical file layout:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Level 0: File0_0, File0_1, File0_2
Level 1: (empty)
Level 2: (empty)
Level 3: (empty)
Level 4: File4_0, File4_1, File4_2, File4_3
Level 5: File5_0, File5_1, File5_2, File5_3, File5_4, File5_5, File5_6, File5_7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6548;&#x679C;&#x4E0A; lower write amplification, trading off read amplification and space amplification.&lt;/p&gt;

&lt;p&gt;&amp;quot;tiered&amp;quot; waits for several sorted runs with similar size and merge them together. &#x5F85;&#x6512;&#x591F;&#x51E0;&#x4E2A;sst&#x6587;&#x4EF6;&#x540E;,&lt;/p&gt;

&lt;h2 id="toc_3"&gt;4. Leveled-Compaction&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/facebook/rocksdb/wiki/RocksDB-Basics"&gt;https://github.com/facebook/rocksdb/wiki/RocksDB-Basics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&#x5BF9;&#x4E8E;The Level Style Compaction, Files in L0 may have overlapping keys, but files in other layers do not.
A compaction process picks one file in Ln and all its overlapping files in Ln+1 and replaces them with new files in Ln+1.  &lt;/p&gt;

&lt;p&gt;awakening-fong&#x6CE8;&#x91CA;: memtable&#x6EE1;&#x4E86;&#x5199;L0, &#x4E4B;&#x540E;, memtable&#x53C8;&#x6EE1;&#x4E86;&#x53C8;&#x5199;L0, &#x8FD9;&#x6837;, L0&#x5C31;&#x5B58;&#x5728;&#x91CD;&#x53E0;&#x7684;keys.&lt;/p&gt;

&lt;p&gt;&#x5176;&#x4ED6;&#x5C42;&#x4E0D;&#x4F1A;&#x6709;&#x91CD;&#x53E0;, &#x56E0;&#x4E3A;L0&#x5230;L1&#x4F1A;&#x5408;&#x5E76;&#x91CD;&#x53E0;&#x7684;&#x533A;&#x57DF;, &#x4EE5;&#x6B64;&#x7C7B;&#x63A8;.&lt;/p&gt;

&lt;p&gt;&#x672A;&#x77E5;&#x95EE;&#x9898;: &#x5BF9;&#x4E8E;The Universal Style Compaction, &#x662F;&#x600E;&#x6837;&#x7684;&#x60C5;&#x51B5;?&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/facebook/rocksdb/wiki/Leveled-Compaction"&gt;https://github.com/facebook/rocksdb/wiki/Leveled-Compaction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A special level-0 (or L0 for short) contains files just flushed from in-memory write buffer (memtable).  &#x7531;&#x5185;&#x5B58;&#x521A;&#x51B2;&#x5237;&#x4E0B;&#x6765;&#x7684;&#x662F;&#x5199;&#x5230;level 0.&lt;/p&gt;

&lt;p&gt;&#x5F53;L0&#x7684;&#x6587;&#x4EF6;&#x4E2A;&#x6570;&#x8FBE;&#x5230; &lt;code&gt;level0_file_num_compaction_trigger&lt;/code&gt; &#x540E;,  L0&#x7684;&#x6587;&#x4EF6;&#x5C31;&#x4F1A;&#x88AB;&#x5408;&#x5E76;&#x5230;L1&#x4E2D;.
&#x8FD9;&#x6837;, &#x53EF;&#x80FD;&#x5BFC;&#x81F4;L1&#x7684;&#x6587;&#x4EF6;&#x5927;&#x5C0F;&#x8D85;&#x8FC7;&#x6700;&#x5927;&#x503C;.  &#x90A3;&#x4E48;, &#x4F1A;&#x81F3;&#x5C11;&#x6311;&#x9009;L1&#x4E2D;&#x7684;&#x4E00;&#x4E2A;, &#x4E0E;L2&#x4E2D;&#x91CD;&#x53E0;&#x7684;&#x533A;&#x57DF;&#x8FDB;&#x884C;&#x5408;&#x5E76;. (L1&#x5C31;&#x5C11;&#x4E86;&#x521A;&#x624D;&#x6311;&#x9009;&#x51FA;&#x6765;&#x7684;&#x90A3;&#x4E2A;&#x6587;&#x4EF6;).
&#x7136;&#x540E;, &#x53EF;&#x80FD;&#x7684;&#x5BFC;&#x81F4;L2&#x7684;&#x6587;&#x4EF6;&#x8D85;&#x8FC7;&#x9650;&#x5236;, &#x5982;&#x6B64;&#x91CD;&#x590D;.&lt;/p&gt;

&lt;p&gt;Multiple compactions can be executed in parallel if needed:&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/media/leveldb_multi_thread_compaction.png"&gt;&lt;br&gt;
&lt;img src="/../../media/leveldb_multi_thread_compaction.png" alt="multi thread compaction"&gt; &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;(&#x672C;&#x6BB5;&#x843D;&#x53EF;&#x7565;&#x8FC7;) &lt;font size="2"&gt;However, L0 to L1 compaction cannot be parallelized. In some cases, it may become a bottleneck that limit the total compaction speed. In this case, users can set max_subcompactions to more than 1. In this case, we'll try to partition the range and use multiple threads to execute it. &#x53EF;&#x4EE5;&#x8003;&#x8651;&#x591A;&#x7EBF;&#x7A0B;&#x8FDB;&#x884C;&#x538B;&#x7F29; &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/google/leveldb/blob/master/doc/impl.md"&gt;https://github.com/google/leveldb/blob/master/doc/impl.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Files in the young level may contain overlapping keys. &#x8F83;&#x5C0F;level&#x7684;&#x6587;&#x4EF6;&#x95F4;&#x53EF;&#x80FD;&#x5305;&#x542B;&#x91CD;&#x53E0;&#x7684;key. However files in other levels have distinct non-overlapping key ranges. Consider level number L where L &amp;gt;= 1. When the combined size of files in level-L exceeds (10^L) MB (i.e., 10MB for level-1, 100MB for level-2, ...), one file in level-L, and all of the overlapping files in level-(L+1) are merged to form a set of new files for level-(L+1). &#x5F53;L&#x5C42;&#x7684;&#x5927;&#x5C0F;&#x8D85;&#x8FC7;&#x9650;&#x5236;&#x65F6;, L&#x5C42;&#x7684;&#x67D0;&#x4E00;&#x4E2A;&#x6587;&#x4EF6; &#x548C; L+1&#x5C42;&#x4E0A;&#x6240;&#x6709;&#x91CD;&#x53E0;&#x7684;&#x6587;&#x4EF6;&#x88AB;&#x5408;&#x5E76;, &#x5F62;&#x6210;&#x65B0;&#x7684;&#x4F4D;&#x4E8E;L+1&#x5C42;&#x7684;&#x6587;&#x4EF6;. These merges have the effect of gradually migrating new updates from the young level to the largest level using only bulk reads and writes (i.e., minimizing expensive seeks).  &#x8FD9;&#x4E2A;&#x5408;&#x5E76;, &#x5728;&#x6548;&#x679C;&#x4E0A;, &#x9010;&#x6E10;&#x5C06;&#x65B0;&#x7684;&#x66F4;&#x65B0;&#x4ECE;&#x8F83;&#x5C0F;&#x7684;level&#x8FC1;&#x79FB;&#x5230;&#x8F83;&#x5927;&#x7684;level, &#x8FD9;&#x6837;, &#x540E;&#x7EED;&#x67E5;&#x8BE2;&#x6D88;&#x8017;&#x8F83;&#x5C0F;&#x7684;disk seek.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
When the size of level L exceeds its limit, we compact it in a background thread. The compaction picks a file from level L and all overlapping files from the next level L+1. &#x538B;&#x7F29;&#x8FC7;&#x7A0B;&#x4F1A;&#x4ECE;L&#x5C42;&#x6311;&#x9009;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;, &#x7136;&#x540E;&#x5E76;&#x4ECE;L+1&#x5C42;&#x4E2D;&#x9009;&#x51FA;&#x6240;&#x6709;&#x91CD;&#x53E0;&#x7684;&#x6587;&#x4EF6;.    Note that if a level-L file overlaps only part of a level-(L+1) file, the entire file at level-(L+1) is used as an input to the compaction and will be discarded after the compaction. &#x538B;&#x7F29;&#x8FC7;&#x7A0B;&#x4F1A;&#x4ECE;L&#x5C42;&#x6311;&#x9009;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;, &#x7136;&#x540E;&#x5E76;&#x4ECE;L+1&#x5C42;&#x4E2D;&#x9009;&#x51FA;&#x6240;&#x6709;&#x91CD;&#x53E0;&#x7684;&#x6587;&#x4EF6;.    Aside: because level-0 is special (files in it may overlap each other), we treat compactions from level-0 to level-1 specially: a level-0 compaction may pick more than one level-0 file in case some of these files overlap each other. &#x5728;pick level-0 &#x5C42;&#x65F6;, &#x53EF;&#x80FD;&#x4F1A;&#x6311;&#x9009;&#x5927;&#x4E8E;1&#x4E2A;level-0 &#x7684;&#x6587;&#x4EF6;, &#x5982;&#x679C;&#x8FD9;&#x4E9B;level-0 &#x7684;&#x6587;&#x4EF6;&#x95F4;&#x5B58;&#x5728;&#x91CD;&#x53E0;&#x7684;&#x60C5;&#x51B5;.&lt;/p&gt;

&lt;p&gt;A compaction merges the contents of the picked files to produce a sequence of level-(L+1) files.  &#x4EA7;&#x751F;&#x4E00;&#x7CFB;&#x5217; level-(L+1)&#x7684;&#x6587;&#x4EF6;s. We switch to producing a new level-(L+1) file after the current output file has reached the target file size (2MB). &#x5982;&#x679C;&#x8FD9;&#x4E2A;level-(L+1)&#x6587;&#x4EF6;&#x8D85;&#x8FC7;&#x5927;&#x5C0F;&#x9650;&#x5236;, &#x90A3;&#x4E48;, &#x7EE7;&#x7EED;&#x5408;&#x5E76;&#x5230;&#x53E6;&#x5916;&#x4E00;&#x4E2A;level-(L+1). &#x6BD4;&#x5982;, L2&#x5408;&#x5E76;&#x5230;L3&#x7684;&#x6587;&#x4EF6;File3_1, &#x5408;&#x5E76;&#x4E00;&#x4F1A;&#x513F;&#x540E;, &#x7ED3;&#x679C;File3_1&#x6587;&#x4EF6;&#x5927;&#x5C0F;&#x8D85;&#x8FC7;&#x9650;&#x5236;, &#x6545;&#x6362;&#x5230;&#x6587;&#x4EF6;File3_2. We also switch to a new output file when the key range of the current output file has grown enough to overlap more than ten level-(L+2) files. &#x5982;&#x679C;&#x751F;&#x6210;&#x7684;L+1&#x7684;key&#x8303;&#x56F4;&#x592A;&#x5E7F;, &#x4E5F;&#x4F1A;&#x5207;&#x6362;&#x5230;&#x65B0;&#x6587;&#x4EF6;. This last rule ensures that a later compaction of a level-(L+1) file will not pick up too much data from level-(L+2). &#x8FD9;&#x4E2A;&#x89C4;&#x5219;&#x786E;&#x4FDD;&#x540E;&#x7EED;&#x5BF9;level-(L+1) &#x538B;&#x7F29;&#x65F6;, &#x53C2;&#x4E0E;&#x7684;level-(L+2)&#x4E0D;&#x4F1A;&#x592A;&#x591A;.  awakening-fong&#x6CE8;&#x91CA;: &#x82E5;&#x4EC5;&#x751F;&#x6210;&#x5355;&#x4E2A;&#x65B0;&#x7684;level-(L+1)&#x6587;&#x4EF6;, &#x90A3;&#x4E48;, &#x548C;&#x8FD9;&#x4E2A;&#x4F53;&#x79EF;&#x5927;&#x7684;&#x6587;&#x4EF6;  &#x91CD;&#x53E0;&#x7684;level-(L+2)&#x5C31;&#x53EF;&#x80FD;&#x6BD4;&#x8F83;&#x591A;, &#x4E5F;&#x5C31;&#x662F;&#x8FD9;&#x91CC;&#x8BF4;&#x7684; pick up too much data from level-(L+2).&lt;/p&gt;

&lt;p&gt;Compactions for a particular level rotate(&#x5FAA;&#x73AF;) through the key space. In more detail, for each level L, we remember the ending key of the last compaction at level L. The next compaction for level L will pick the first file that starts after this key (wrapping around to the beginning of the key space if there is no such file).  &#x5BF9;&#x6BCF;&#x4E00;&#x5C42;, LevelDB&#x4F1A;&#x8BB0;&#x4F4F;&#x4E0A;&#x56DE;&#x5BF9;level L&#x538B;&#x7F29;&#x7684;&#x5C3E;&#x90E8;&#x7684;key. &#x4E0B;&#x4E00;&#x56DE;&#x5BF9;level L&#x538B;&#x7F29;&#x65F6;, &#x4F1A;&#x6311;&#x9009; &#x7D27;&#x6328;&#x7740;&#x4E0A;&#x56DE;key&#x7684;&#x6587;&#x4EF6;. awakening-fong&#x6CE8;&#x91CA;: &#x4E5F;&#x5C31;&#x662F;leveldb&#x4E2D;&#x7684;&lt;code&gt;compact_pointer_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/facebook/rocksdb/wiki/Compression"&gt;https://github.com/facebook/rocksdb/wiki/Compression&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LZ4 &#x548C; Snappy
We believe LZ4 is almost always better than Snappy. We leave Snappy as default to avoid unexpected compatibility problems to previous users. LZ4/Snappy is lightweight compression so it usually strikes a good balance between space and CPU usage.&lt;/p&gt;

&lt;h3 id="toc_4"&gt;4.1 leveldb&#x7684;DBImpl::DoCompactionWork&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::DoCompactionWork
|--versions_-&amp;gt;MakeInputIterator ==&amp;gt; VersionSet::MakeInputIterator
|--input-&amp;gt;SeekToFirst()
|--&#x904D;&#x5386;input
| |--&#x7B80;&#x5316;, &#x8FD9;&#x91CC;&#x5FFD;&#x7565;CompactMemTable&#x7684;&#x60C5;&#x51B5;
| |--ParseInternalKey() &#x5F97;&#x5230;sequence, type, user_key
| |--&#x6839;&#x636E;seq, drop&#x8001;&#x65E7;&#x7684;&#x6570;&#x636E;
| |--last_sequence_for_key &#x8BB0;&#x5F55;&#x672C;&#x6B21;&#x7684;seq
| |--&#x82E5;&#x9700;&#x8981;, &#x5219;&#x521B;&#x5EFA;&#x6587;&#x4EF6;
| |--compact-&amp;gt;builder-&amp;gt;Add(input-&amp;gt;key(), input-&amp;gt;value())
| |--&#x6512;&#x591F;&#x540E;, FinishCompactionOutputFile
| | |--compact-&amp;gt;builder-&amp;gt;Finish
| | | |--Write metaindex block, index block, footer
| | |--&#x540C;&#x6B65;&#x6587;&#x4EF6;
|--InstallCompactionResults
| |--&#x4FEE;&#x6539;VersionEdit&#x4FE1;&#x606F;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_5"&gt;5. &#x53C2;&#x8003;&#x8D44;&#x6599;&lt;/h2&gt;

&lt;p&gt;[1] &lt;a href="https://github.com/facebook/rocksdb/wiki/Leveled-Compaction"&gt;https://github.com/facebook/rocksdb/wiki/Leveled-Compaction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] &lt;a href="https://github.com/facebook/rocksdb/wiki/Universal-Compaction"&gt;https://github.com/facebook/rocksdb/wiki/Universal-Compaction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] &lt;a href="https://github.com/google/leveldb/blob/master/doc/impl.md"&gt;https://github.com/google/leveldb/blob/master/doc/impl.md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>LevelDB 03: &#x6570;&#x636E;&#x683C;&#x5F0F;</title>
      <link>https://awakening-fong.github.io/posts/database/leveldb_03_data_format</link>
      <pubDate>2019-09-11</pubDate>
      <description>&lt;p&gt;&#x76EE;&#x5F55;:
&lt;li&gt; &lt;a href="#toc_0"&gt; 1. log&#x7684;&#x683C;&#x5F0F;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_1"&gt; 1.1 &#x6574;&#x4F53;&#x683C;&#x5F0F;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_2"&gt; 1.2 log&#x6587;&#x4EF6;&#x7684; header&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_3"&gt; 1.3 &#x5927;&#x5C0F;&#x7AEF;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_4"&gt; 1.4 trailer&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_5"&gt; 1.5 fragment  &lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_6"&gt; 2. MemTable&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_7"&gt; 2.1 SkipList&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_8"&gt; 3. WriteBatch&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_9"&gt; 4. get&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_10"&gt; 5. ldb, sst&#x683C;&#x5F0F;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_11"&gt; 6. BlockBuilder&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_12"&gt; 7. &#x6742;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_13"&gt; 7.1 &#x4E2A;&#x4EBA;&#x6807;&#x8BB0;&#x65B9;&#x6CD5;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_14"&gt; 7.2 tag&lt;/a&gt;  &lt;/li&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="toc_0"&gt;1. log&#x7684;&#x683C;&#x5F0F;&lt;/h2&gt;

&lt;h3 id="toc_1"&gt;1.1 &#x6574;&#x4F53;&#x683C;&#x5F0F;&lt;/h3&gt;

&lt;p&gt;&#x53C2;&#x8003; Writer::AddRecord -&amp;gt; Writer::EmitPhysicalRecord&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kHeader   WriteBatch::rep_
|-------|-------------------|



kHeader   WriteBatch::rep_   kHeader rep_(1/2) trailer kHeader rep_(2/2)
|-------|-------------------|-------|.........|------|-------|.........|
\-------------------------v--------------------------/
                     kBlockSize(32KB)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_2"&gt;1.2 log&#x6587;&#x4EF6;&#x7684; header&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;checksum  len type
|--------|---|---|--------------|
\------- v -----/\------v------/
    kHeader          len
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;kHeaderSize:  &lt;br/&gt;
checksum (4B), length (2B), type (1B)&lt;/p&gt;

&lt;p&gt;header&#x4E2D;&#x7684;len&#x4E3A; header&#x540E;&#x9762;&#x8DDF;&#x7684;&#x6570;&#x636E;&#x7684;&#x957F;&#x5EA6;.
&#x6839;&#x636E;&lt;br&gt;
leveldb/db/log_reader.cc&lt;br&gt;
ReadPhysicalRecord()&lt;br&gt;
if (kHeaderSize + length &amp;gt; buffer_.size()) {&#x9519;&#x8BEF;&#x60C5;&#x51B5;&#x5904;&#x7406;}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unsigned int Reader::ReadPhysicalRecord(Slice* result) {
  ...&#x7565;...
  *result = Slice(header + kHeaderSize, length);
  return type;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_3"&gt;1.3 &#x5927;&#x5C0F;&#x7AEF;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;unsigned int Reader::ReadPhysicalRecord(...) {
  // Parse the header
  const char* header = buffer_.data();
  const uint32_t a = static_cast&amp;lt;uint32_t&amp;gt;(header[4]) &amp;amp; 0xff;
  const uint32_t b = static_cast&amp;lt;uint32_t&amp;gt;(header[5]) &amp;amp; 0xff;
  const unsigned int type = header[6];
  const uint32_t length = a | (b &amp;lt;&amp;lt; 8);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x5199;&#x5165;&#x65F6;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Writer::EmitPhysicalRecord
{
  char buf[kHeaderSize];
  buf[4] = static_cast&amp;lt;char&amp;gt;(n &amp;amp; 0xff);
  buf[5] = static_cast&amp;lt;char&amp;gt;(n &amp;gt;&amp;gt; 8);
  buf[6] = static_cast&amp;lt;char&amp;gt;(t);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_4"&gt;1.4 trailer&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/google/leveldb/blob/master/doc/log_format.md"&gt;https://github.com/google/leveldb/blob/master/doc/log_format.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A record never starts within the last six bytes of a block (since it won&amp;#39;t fit). Any leftover bytes here form the trailer, which must consist entirely of zero bytes and must be skipped by readers.
&#x82E5;&#x4E00;&#x4E2A;&#x8BB0;&#x5F55;&#x5757;&#x53EA;&#x5269;&#x4E0B;6&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x7A7A;&#x4F59;, &#x90A3;&#x4E48;, &#x8FD9;&#x4E9B;&#x7A7A;&#x95F4;&#x4E0D;&#x4F1A;&#x7528;&#x6765;&#x5B58;&#x50A8;key-value, &#x6211;&#x4EEC;&#x79F0;&#x5757;&#x7684;&#x8FD9;&#x6700;&#x540E;&#x51E0;&#x4E2A;&#x5B57;&#x8282;&#x7A7A;&#x95F4;(&#x53EF;&#x4EE5;&#x5C0F;&#x4E8E;6&#x5B57;&#x8282;)&#x4E3A; trailer.&lt;/p&gt;

&lt;p&gt;awakening-fong&#x6CE8;&#x91CA;: see Writer::AddRecord()&lt;/p&gt;

&lt;h3 id="toc_5"&gt;1.5 fragment&lt;/h3&gt;

&lt;p&gt;leveldb/db/log_format.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum RecordType {
  // Zero is reserved for preallocated files
  kZeroType = 0,

  kFullType = 1,

  // For fragments
  kFirstType = 2,
  kMiddleType = 3,
  kLastType = 4
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;&#x5757; &#x88AB;&#x5206;&#x4E3A; &#x591A;&#x4E2A;fragment &#x6765;&#x5B58;&#x50A8;.&lt;/p&gt;

&lt;h2 id="toc_6"&gt;2. MemTable&lt;/h2&gt;

&lt;p&gt;leveldb/db/write_batch.cc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MemTableInserter : public WriteBatch::Handler {

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;leveldb/db/memtable.cc
void MemTable::Add(....)&lt;/p&gt;

&lt;p&gt;&#x6BCF;&#x6761;&#x8BB0;&#x5F55;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x683C;&#x5F0F;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;size+8     userkey  seq|type size  value
|--------|--------|---------|-----|------|
&#x5185;&#x90E8;&#x5927;&#x5C0F;              8&#x5B57;&#x8282;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_7"&gt;2.1 SkipList&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; MemTable::Add
 |--typedef SkipList&amp;lt;const char*, KeyComparator&amp;gt; Table;
 |--Table table_;
 |--char* buf = arena_.Allocate(encoded_len)
 |--buf = xxx
 |--table_.Insert(buf)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x53C2;&#x8003; MemTable::Get
SkipList&#x8282;&#x70B9;&#x7684;&#x683C;&#x5F0F;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                               &#x4E5F;&#x79F0;&#x4E3A;tag
                               /---^---\   
|  internal_key_size | user key|seq type|val size|val|
\--user key size +8--/          \--8B--/

                     ^
                  key_ptr   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MemTable::Get()&#x4E2D; &#x79F0;seq+type&#x4E3A;tag.
&#x662F;&#x4E0D;&#x662F;&#x53EA;&#x6709;type&#x662F;tag??&lt;/p&gt;

&lt;p&gt;SkipList &#x7684;&#x5185;&#x5B58;&#x7EC4;&#x7EC7;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template&amp;lt;typename Key, class Comparator&amp;gt;
struct SkipList&amp;lt;Key,Comparator&amp;gt;::Node {
  explicit Node(const Key&amp;amp; k) : key(k) { }

  // Array of length equal to the node height.  next_[0] is lowest level link.
port::AtomicPointer next_[1];

};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;class MemTable {

typedef SkipList&amp;lt;const char*, KeyComparator&amp;gt; Table;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="/assets/media/Skip_list_add_element.gif"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/../../media/Skip_list_add_element.gif" alt="Skiplist add element"&gt;&lt;/p&gt;

&lt;p&gt;(&#x56FE;&#x7247;&#x6765;&#x6E90; &lt;a href="https://en.wikipedia.org/wiki/Skip_list"&gt;https://en.wikipedia.org/wiki/Skip_list&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;wiki&#x52A8;&#x56FE;&#x4E2D;, &#x4F55;&#x65F6;&#x8981;&#x653E;&#x5728;&#x7B2C;2&#x5C42;?&lt;br&gt;
&#x7B54;:&#x597D;&#x50CF;&#x662F;&#x968F;&#x673A;&#x7684;, wiki&#x4E0A;&#x7684;&#x52A8;&#x56FE;&#x4E2D;&#x7684;coin flip&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x610F;&#x601D;.&lt;/p&gt;

&lt;p&gt;&#x95EE;&#x9898;: leveldb&#x4EE3;&#x7801;&#x4E0A;, &#x5982;&#x4F55;&#x4F53;&#x73B0;&#x8FD9;&#x70B9;?&lt;br&gt;
&#x7B54;:
wiki&#x4E0A;, &#x9AD8;&#x662F;&#x56FA;&#x5B9A;&#x7684;; &#x5BF9;&#x65B0;&#x7684;&#x8282;&#x70B9;, &#x968F;&#x673A;&#x5730;&#x51B3;&#x5B9A;, &#x662F;&#x5426;&#x79FB;&#x52A8;&#x5230;&#x8F83;&#x9AD8;&#x7684;level&#x4E0A;.&lt;br&gt;
&#x800C;leveldb&#x4E2D;,  &#x5728;&#x65B0;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x65F6;, &#x603B;&#x662F;&#x5C1D;&#x8BD5;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x9AD8;&#x5EA6;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level3  o&amp;#39;     o&amp;#39;       o     
level2  o      o&amp;#39;       o      o
level1  o      o        o      o
level0  o      o        o      o
&#x65B0;&#x8282;&#x70B9;&#x503C; 11      17      24    43          
&#x751F;&#x6210;&#x9AD8;&#x5EA6; 3       2       4      3
&#x63D2;&#x5165;&#x987A;&#x5E8F; A       B       D      C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x7136;&#x540E;&#x5BF9;&#x65B0;&#x8282;&#x70B9;x&#x6267;&#x884C;:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x-&amp;gt;NoBarrier_SetNext(i, prev[i]-&amp;gt;NoBarrier_Next(i));
prev[i]-&amp;gt;SetNext(i, x);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x4E0A;&#x56FE;&#x4E2D; B &#x4E0A;&#x65B9;&#x540E;&#x7EED;&#x4F1A;&#x6709;&#x4E24;&#x4E2A;o&amp;#39; &#x5417;?&lt;br&gt;
&#x7B54;: &#x4F1A;&#x7684;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
void SkipList&amp;lt;Key,Comparator&amp;gt;::Insert(const Key&amp;amp; key) {

  int height = RandomHeight();
  if (height &amp;gt; GetMaxHeight()) {
    &#x5BF9;&#x65B0;&#x7684;&#x9AD8;&#x5EA6;, prev[i] = head_;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_8"&gt;3. WriteBatch&lt;/h2&gt;

&lt;p&gt;&#x6839;&#x636E; WriteBatch::Put() &#x4EE5;&#x53CA; WriteBatch &#x7684;ctor&lt;/p&gt;

&lt;p&gt;rep_:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  seq     cnt  type len+key  len+value
|--------|---|-----|--------|----------|
    8B    4B  \----------v------------/
                      &#x4E00;&#x6761;&#x8BB0;&#x5F55;
cnt&#x4E3A;&#x8BB0;&#x5F55;&#x7684;&#x4E2A;&#x6570;

&#x6839;&#x636E; WriteBatch::Iterate
type&#x4E3A;: kTypeValue &#x6216; kTypeDeletion                      
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_9"&gt;4. get&lt;/h2&gt;

&lt;p&gt;see LookupKey ctor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                   internal key
           -------------v--------------
          /                            \
|usize + 8| user_key  | seq(7B) type(1B)|
^         ^                             ^
start_   kstart_                       end_

\-------------------v------------------/
               memtable_key
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_10"&gt;5. ldb, sst&#x683C;&#x5F0F;&lt;/h2&gt;

&lt;p&gt;doc/table_format.md&lt;/p&gt;

&lt;p&gt;footer(&#x53C2;&#x8003;Table::Open):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      metaindex     index
|off(8B)|size(8B)|off|size|--------  |magic(8B)|
  kEncodedLength
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;size&#x4E0D;&#x5305;&#x62EC; kBlockTrailerSize,&lt;/p&gt;

&lt;p&gt;kBlockTrailerSize:
// 1-byte type + 32-bit crc&lt;br&gt;
type:kNoCompression &#x6216; kSnappyCompression&lt;/p&gt;

&lt;p&gt;metaindex &#x7528;&#x6765;&#x544A;&#x77E5;&#x6BCF;&#x6BB5;meta block&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x548C;&#x957F;&#x5EA6;.&lt;br&gt;
index &#x7528;&#x6765;&#x544A;&#x77E5;&#x6BCF;&#x6BB5;data block&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x548C;&#x957F;&#x5EA6;.&lt;/p&gt;

&lt;p&gt;block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          /-----NumRestarts&#x4E2A;-------\
|        |restart|restart|...|restart|NumRestarts| kBlockTrailerSize |
         ^
    restart_offset_
\--------------------size (handle&#x7ED9;&#x51FA;)-----------/    
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&#x8BFB;foot  file-&amp;gt;Read()&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&#x8BFB;index   ReadBlock(,,index_handle,)&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&#x8BFB;meta   ReadMeta&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&#x5F97;&#x5230; Filter&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;// An entry for a particular key-value pair has the form:
//     shared_bytes: varint32
//     unshared_bytes: varint32
//     value_length: varint32
//     key_delta: char[unshared_bytes]
//     value: char[value_length]
// shared_bytes == 0 for restart points.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Table::ReadMeta() {
 if (rep_-&amp;gt;options.filter_policy == nullptr) {
   return;  // Do not need any metadata
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Table::ReadMeta
|--Block* meta = new Block(contents);
|--std::string key = &amp;quot;filter.&amp;quot;;
|--key.append(rep_-&amp;gt;options.filter_policy-&amp;gt;Name());
|--iter-&amp;gt;Seek(key)
|--ReadFilter(iter-&amp;gt;value()) //&#x53C2;&#x6570;&#x662F; BlockHandle
|       |--ReadBlock()  // &#x8BFB;&#x51FA; filter
|       |--FilterBlockReader //&#x7528;&#x6765;&#x8BFB;&#x53D6; filter block
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;filter block: see FilterBlockReader()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          /-- num_*4&#x4E2A;--\
|........ |.............|offset array(4B)|base_lg_(1B)|
^         ^
data_     offset_
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The filter block is formatted as follows:

    [filter 0]
    [filter 1]
    [filter 2]
    ...
    [filter N-1]

    [offset of filter 0]                  : 4 bytes
    [offset of filter 1]                  : 4 bytes
    [offset of filter 2]                  : 4 bytes
    ...
    [offset of filter N-1]                : 4 bytes

    [offset of beginning of offset array] : 4 bytes
    lg(base)                              : 1 byte
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_11"&gt;6. BlockBuilder&lt;/h2&gt;

&lt;p&gt;see BlockBuilder::Add()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;shared&amp;gt;&amp;lt;non_shared&amp;gt;&amp;lt;value_size&amp;gt;&amp;lt;key&#x4E2D;non_shared&#x7684;&#x90A3;&#x90E8;&#x5206;&amp;gt;&amp;lt;value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_12"&gt;7. &#x6742;&lt;/h2&gt;

&lt;h3 id="toc_13"&gt;7.1 &#x4E2A;&#x4EBA;&#x6807;&#x8BB0;&#x65B9;&#x6CD5;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;^&lt;/code&gt; &#x8868;&#x793A;&#x8BFB;&#x51FA;
&lt;code&gt;\---v---/&lt;/code&gt; &#x8868;&#x793A;&#x5708;&#x5B9A;&#x7684;&#x8303;&#x56F4;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static Slice GetLengthPrefixedSlice(const char* data) {
  uint32_t len;
  const char* p = data;
  /*
  &#x5F00;&#x5934;&#x7ED9;&#x51FA;&#x957F;&#x5EA6;,
   len
    ^
  |---|--------------|
       \------v-----/
             len
  */
  p = GetVarint32Ptr(p, p + 5, &amp;amp;len);  // +5: we assume &amp;quot;p&amp;quot; is not corrupted
  return Slice(p, len);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6240;&#x4EE5;, &#x4E0A;&#x9762;&#x8868;&#x793A;, &#x5F00;&#x5934;&#x5185;&#x5BB9;&#x4E3A;len, &#x968F;&#x540E;&#x662F;&#x957F;&#x5EA6;&#x4E3A;len&#x7684;&#x6570;&#x636E;.&lt;/p&gt;

&lt;h3 id="toc_14"&gt;7.2 tag&lt;/h3&gt;

&lt;p&gt;leveldb/db/version_set.cc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VersionSet::Recover()
{
  reader.ReadRecord(&amp;amp;record, &amp;amp;scratch);
  VersionEdit edit;
  edit.DecodeFrom(record)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Status VersionEdit::DecodeFrom(..)
{

  /*
  MANIFEST&#x6587;&#x4EF6; record&#x7684;&#x6570;&#x636E;&#x662F;:

  |------|------|-----|
   header  tags
  */
  while (msg == nullptr &amp;amp;&amp;amp; GetVarint32(&amp;amp;input, &amp;amp;tag)) {
    switch (tag) {
      case kComparator: ...
      case kLogNumber: ...
      case kPrevLogNumber: ...
      ...
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>LevelDB 02: snapshot</title>
      <link>https://awakening-fong.github.io/posts/database/leveldb_02_snapshot</link>
      <pubDate>2019-09-10</pubDate>
      <description>&lt;p&gt;&#x76EE;&#x5F55;:
&lt;li&gt; &lt;a href="#toc_0"&gt; 1. LogAndApply, &#x4EE5;DBImpl::CompactMemTable()&#x4E3A;&#x4F8B;&#x8FDB;&#x884C;&#x8BF4;&#x660E;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_1"&gt; 1.1 &#x5199; MANIFEST&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_2"&gt; 1.2 Builder&#x4E00;&#x4E2A;&#x7528;&#x9014;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_3"&gt; 2. Get&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_4"&gt; 2.1 &#x5E8F;&#x5217;&#x53F7;&#x5728; SkipList &#x67E5;&#x627E;&#x4E2D;&#x7684;&#x4F5C;&#x7528;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_5"&gt; 2.2 leveldb&#x8BFB;&#x5199;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x8FDB;&#x884C;&#x5417;&#xFF1F;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_6"&gt; 2.3 &#x5BF9;&#x4E8E;skiplist, &#x5728;&#x54EA;&#x4E9B;&#x5730;&#x65B9;&#x52A0;&#x9501;&#x4E86;?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_7"&gt; 2.3 &#x6CA1;&#x6709;&#x5904;&#x7406; &#x5E8F;&#x5217;&#x53F7; &#x6EA2;&#x51FA;/&#x56DE;&#x7ED5;&#x95EE;&#x9898;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_8"&gt; 3. manifest&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_9"&gt; 3.1 &#x4E3A;&#x4F55;&#x6709;&#x591A;&#x4E2A; manifest &#x6587;&#x4EF6;?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_10"&gt; 3.2 manifest &#x5B58;&#x50A8;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x5565;:&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_11"&gt; 4. VersionEdit (&#x672A;&#x5B8C;&#x6210;)&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_12"&gt; 4.1 ctor&lt;/a&gt;  &lt;/li&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="toc_0"&gt;1. LogAndApply, &#x4EE5;DBImpl::CompactMemTable()&#x4E3A;&#x4F8B;&#x8FDB;&#x884C;&#x8BF4;&#x660E;&lt;/h2&gt;

&lt;p&gt;&#x4F7F;&#x7528;&#x573A;&#x666F;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::CompactMemTable()
{
  VersionEdit edit;
  Version* base = versions_-&amp;gt;current();
  WriteLevel0Table(imm_, &amp;amp;edit, base);
  edit.SetPrevLogNumber(0);
  edit.SetLogNumber(logfile_number_);  // Earlier logs no longer needed
  s = versions_-&amp;gt;LogAndApply(&amp;amp;edit, &amp;amp;mutex_);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_1"&gt;1.1 &#x5199; MANIFEST&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;LogAndApply
|--edit.SetLogNumber = ..
|--Version* v = new Version(this);
|--builder.Apply(edit) +  SaveTo
|--Finalize(v); &#x8BA1;&#x7B97;&#x4E0B;&#x6B21;&#x4ECE;&#x54EA;&#x4E2A;level&#x8FDB;&#x884C;&#x538B;&#x7F29;.
|--new_manifest_file = DescriptorFileName(...)
| |--snprintf(buf, sizeof(buf), &amp;quot;/MANIFEST-%06llu&amp;quot;,...)
|--env_-&amp;gt;NewWritableFile(new_manifest_file, &amp;amp;descriptor_file_)
|--descriptor_log_ = new log::Writer(descriptor_file_);
|--WriteSnapshot(descriptor_log_);
| |--compact_pointer_, current_-&amp;gt;files_ &#x7B49;&#x4FE1;&#x606F;&#x653E;&#x5165;edit
| |--edit.EncodeTo(&amp;amp;record); &#x8F6C;&#x4E3A;string record;
| |--descriptor_log_-&amp;gt;AddRecord(record);
|--edit-&amp;gt;EncodeTo(&amp;amp;record);
|--descriptor_log_-&amp;gt;AddRecord(record) //Write new record to MANIFEST log
|--SetCurrentFile(env_, dbname_, manifest_file_number_)
|--AppendVersion  =&amp;gt; current_ = xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MANIFEST&#x4E2D;&#x662F; &#x4E00;&#x4E2A;&#x4E2A; VersionEdit.&lt;/p&gt;

&lt;h3 id="toc_2"&gt;1.2 Builder&#x4E00;&#x4E2A;&#x7528;&#x9014;&lt;/h3&gt;

&lt;p&gt;&#x6062;&#x590D;&#x5143;&#x4FE1;&#x606F;&#x7684;&#x8FC7;&#x7A0B;&#x662F;&#x9010;&#x4E2A;&#x5E94;&#x7528;VersionEdit&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x82E5;&#x4E0D;&#x4F7F;&#x7528;builder, &#x5219;&#x8BE5;&#x8FC7;&#x7A0B;&#x4F1A;&#x4EA7;&#x751F;&#x5927;&#x91CF;&#x7684;Version&#xFF0C;&#x4F46;&#x8FD9;&#x4E9B;&#x6211;&#x4EEC;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x3002;&#x5F15;&#x5165;VersionSet::Builder, &#x5C06;&#x6240;&#x6709;&#x7684;VersoinEdit&#x4EA4;&#x7531;Version::Builder&#x5904;&#x7406;&#xFF0C;&#x7136;&#x540E;&#x4E00;&#x6B21;&#x5E94;&#x7528;&#x4EA7;&#x751F;&#x6700;&#x7EC8;&#x7684;Version.&lt;/p&gt;

&lt;p&gt;&#x4EE3;&#x7801;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VersionSet::Recover
{

  Builder builder(this, current_);
  while (reader.ReadRecord(&amp;amp;record, &amp;amp;scratch) &amp;amp;&amp;amp; s.ok()) {
    VersionEdit edit;
    s = edit.DecodeFrom(record); // &#x5C06;&#x8BFB;&#x51FA;&#x6765;&#x7684;&#x8F6C;&#x4E3A;VersionEdit
    builder.Apply(&amp;amp;edit);
  }
  Version* v = new Version(this);
  builder.SaveTo(v);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;builder.Apply(&amp;amp;edit);
&#x5C06; VersionEdit&#x4E2D;&#x5173;&#x4E8E; &lt;code&gt;compact_pointer_&lt;/code&gt;, &lt;code&gt;deleted_files&lt;/code&gt; &#x548C; &lt;code&gt;added_files&lt;/code&gt; &#x7684;&#x4FE1;&#x606F; &#x653E;&#x5165; Builder.
&lt;code&gt;deleted_files&lt;/code&gt; &#x548C; &lt;code&gt;added_files&lt;/code&gt; &#x662F;&#x5DEE;&#x5F02;/&#x53D8;&#x52A8;&#x7684;&#x4FE1;&#x606F;,&lt;/p&gt;

&lt;p&gt;&#x4ECE;&#x78C1;&#x76D8;manifest&#x8BFB;&#x5165;  record,
DecodeFrom&#x89E3;&#x7801;&#x540E;&#x5B58;&#x5165; VersionEdit,
&#x7ECF;&#x8FC7;Apply, &#x653E;&#x5165; Builder.
&#x8FD9;&#x6837;, &#x6240;&#x6709;&#x7684;record&#x90FD; &#x7531; Builder &#x6765;&#x7EC4;&#x7EC7;&#x4E86;.&lt;/p&gt;

&lt;h2 id="toc_3"&gt;2. Get&lt;/h2&gt;

&lt;h3 id="toc_4"&gt;2.1 &#x5E8F;&#x5217;&#x53F7;&#x5728; SkipList &#x67E5;&#x627E;&#x4E2D;&#x7684;&#x4F5C;&#x7528;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;template&amp;lt;typename Key, class Comparator&amp;gt;
inline void SkipList&amp;lt;Key,Comparator&amp;gt;::Iterator::Seek(const Key&amp;amp; target) {
 node_ = list_-&amp;gt;FindGreaterOrEqual(target, nullptr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;typedef SkipList&lt;const char*, KeyComparator&gt; Table;&lt;/p&gt;

&lt;p&gt;&#x5BF9;&#x4E8E;memtable, Key&#x4E3A;char * .&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template&amp;lt;typename Key, class Comparator&amp;gt;
inline void SkipList&amp;lt;Key,Comparator&amp;gt;:
Iterator::Seek(const Key&amp;amp; target) {
  node_ = list_-&amp;gt;FindGreaterOrEqual(target, nullptr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;FindGreaterOrEqual -&amp;gt; KeyIsAfterNode -&amp;gt; compare_(a, b)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comparator const compare_;   &#x6765;&#x81EA;&#x6A21;&#x677F; class Comparator&lt;br&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct KeyComparator {
  const InternalKeyComparator comparator;
  explicit KeyComparator(const InternalKeyComparator&amp;amp; c) : comparator(c) { }
  int operator()(const char* a, const char* b) const;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
leveldb/db/memtable.cc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)
    const {
  // Internal keys are encoded as length-prefixed strings.
  Slice a = GetLengthPrefixedSlice(aptr);
  Slice b = GetLengthPrefixedSlice(bptr);
  return comparator.Compare(a, b);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
leveldb/db/dbformat.cc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int InternalKeyComparator::Compare(const Slice&amp;amp; akey, const Slice&amp;amp; bkey) const {
  // Order by:
  //    increasing user key (according to user-supplied comparator)
  //    decreasing sequence number
  //    decreasing type (though sequence# should be enough to disambiguate)
  int r = user_comparator_-&amp;gt;Compare(ExtractUserKey(akey), ExtractUserKey(bkey));
  if (r == 0) {
    // &#x5E8F;&#x5217;&#x53F7;
    const uint64_t anum = DecodeFixed64(akey.data() + akey.size() - 8);
    const uint64_t bnum = DecodeFixed64(bkey.data() + bkey.size() - 8);
    if (anum &amp;gt; bnum) {
      r = -1;
    } else if (anum &amp;lt; bnum) {
      r = +1;
    }
  }
  return r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8981;&#x627E;&#x5230; &amp;gt;= &#x7ED9;&#x5B9A;&#x7528;&#x6237;key &#x7684;&#x9879;, &#x5982;&#x679C;&#x627E;&#x5230;&#x7684;&#x9879;, &#x5176;key&#x4E00;&#x81F4;, &#x4F46;seq&#x6BD4; &#x7528;&#x6237;&#x7ED9;&#x5B9A;&#x7684;&#x5927; (&#x4E5F;&#x5C31;&#x662F;, &#x627E;&#x5230;&#x7684;&#x662F; &#x65B0;&#x8FD1;&#x6DFB;&#x52A0;&#x7684;&#x9879;), &#x90A3;&#x4E48;, &#x8FD9;&#x4E2A;&#x76F8;&#x5BF9;&#x4E8E;&#x67E5;&#x8BE2;&#x65F6;&#x7684;snapshot, &#x65B0;&#x8FD1;&#x7684;&#x9879; &#x4F1A;&#x88AB;&#x6392;&#x9664;, &#x8FDB;&#x800C;&#x67E5;&#x627E;&#x5176;&#x4ED6;&#x9879;. &#x6240;&#x4EE5;, &#x5141;&#x8BB8;get&#x7684;&#x65F6;&#x5019;, &#x6267;&#x884C;put&#x5417;?&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&#x95EE;&#x9898;: &#x7528;&#x6237;&#x6709;&#x6CA1;&#x6709;&#x63D0;&#x4F9B;&#x5E8F;&#x53F7;&#x554A;?&lt;br&gt;
&#x7B54;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::Get()
|--SequenceNumber snapshot;
|--snapshot = versions_-&amp;gt;LastSequence() or from options.snapshot
|--//|usize + 8| user_key| seq(7B) type(1B)|
|--LookupKey lkey(key, snapshot);
|--mem-&amp;gt;Get(lkey, value, xx)
| |--iter.Seek(..);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MemTable::Get(const LookupKey&amp;amp; key, std::string* value, Status* s)
&#x67E5;&#x8BE2;&#x65F6;, user key&#x4F1A;&#x52A0;&#x4E0A;seq.&lt;br&gt;
LookupKey&#x683C;&#x5F0F;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|usize + 8| user_key| seq(7B) type(1B)|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
&#x653E;&#x5165;&#x8DF3;&#x8868;&#x4E2D;,&#x4F1A;&#x6DFB;&#x52A0;seq&#x4FE1;&#x606F;, &#x4ECE;MemTable::Add&#x7684;&#x539F;&#x578B;&#x5C31;&#x53EF;&#x77E5;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MemTable::Add(SequenceNumber s, ValueType type,
                   const Slice&amp;amp; key,
                   const Slice&amp;amp; value)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_5"&gt;2.2 leveldb&#x8BFB;&#x5199;&#x53EF;&#x4EE5;&#x540C;&#x65F6;&#x8FDB;&#x884C;&#x5417;&#xFF1F;&lt;/h3&gt;

&lt;p&gt;&#x7B54;: &#x770B;&#x8D77;&#x6765;&#x5E76;&#x4E0D;&#x963B;&#x6B62;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::Write
{

  MutexLock l(&amp;amp;mutex_);
  ...

  &amp;amp;w is currently responsible for logging
      // and protects against concurrent loggers and concurrent writes
      // into mem_.
  mutex_.Unlock();
  WriteBatchInternal::InsertInto(updates, mem_);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::Get
{
  MutexLock l(&amp;amp;mutex_);
  ...
  // Unlock while reading from files and memtables
  mutex_.Unlock();
  LookupKey lkey(key, snapshot);
  mem-&amp;gt;Get(lkey, value, &amp;amp;s) or imm-&amp;gt;Get or current-&amp;gt;Get

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_6"&gt;2.3 &#x5BF9;&#x4E8E;skiplist, &#x5728;&#x54EA;&#x4E9B;&#x5730;&#x65B9;&#x52A0;&#x9501;&#x4E86;?&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;...
void SkipList&amp;lt;Key,Comparator&amp;gt;::Insert(const Key&amp;amp; key) {
  Insert() is externally synchronized.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_7"&gt;2.3 &#x6CA1;&#x6709;&#x5904;&#x7406; &#x5E8F;&#x5217;&#x53F7; &#x6EA2;&#x51FA;/&#x56DE;&#x7ED5;&#x95EE;&#x9898;&lt;/h3&gt;

&lt;p&gt;&#x6309;1s&#x4E00;&#x4E2A;&#x63D0;&#x4EA4;,
uint64_t &#x5DEE;&#x4E0D;&#x591A;&#x53EF;&#x4F7F;&#x7528;584942417355&#x5E74;, &#x6545;&#x65E0;&#x9700;&#x5904;&#x7406;&#x56DE;&#x7ED5;&#x95EE;&#x9898;.&lt;/p&gt;

&lt;h2 id="toc_8"&gt;3. manifest&lt;/h2&gt;

&lt;p&gt;A MANIFEST file lists the set of sorted tables that make up each level, the corresponding key ranges, and other important metadata.  (&lt;a href="https://github.com/google/leveldb/blob/master/doc/impl.md"&gt;https://github.com/google/leveldb/blob/master/doc/impl.md&lt;/a&gt;)
&#x5217;&#x51FA;&#x4E86;&#x6BCF;&#x5C42;&#x7684;sorted tables, &#x76F8;&#x5E94;&#x7684;key&#x8303;&#x56F4;, &#x4EE5;&#x53CA;metadata.&lt;/p&gt;

&lt;h3 id="toc_9"&gt;3.1 &#x4E3A;&#x4F55;&#x6709;&#x591A;&#x4E2A; manifest &#x6587;&#x4EF6;?&lt;/h3&gt;

&lt;p&gt;&#x60C5;&#x666F;1: manifest&#x592A;&#x5927;&#x4E86;, &#x6362;&#x65B0;&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x5199;&lt;br&gt;
&#x60C5;&#x666F;2:&lt;/p&gt;

&lt;h3 id="toc_10"&gt;3.2 manifest &#x5B58;&#x50A8;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x5565;:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;VersionSet::Recover
{
std::string dscname = dbname_ + &amp;quot;/&amp;quot; + current; //&#x4E3A; manifest&#x6587;&#x4EF6;
SequentialFile* file;
s = env_-&amp;gt;NewSequentialFile(dscname, &amp;amp;file)
log::Reader reader(file, &amp;amp;reporter, ...)
reader.ReadRecord(&amp;amp;record, &amp;amp;scratch)
edit.DecodeFrom(record) &#x53EF;&#x77E5;, &#x4ECE; manifest &#x4E2D;&#x8BFB;&#x51FA;&#x7684;&#x662F; :log_number_, prev_log_number_, next_file_number_, last_sequence_, deleted_files_
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_11"&gt;4. VersionEdit (&#x672A;&#x5B8C;&#x6210;)&lt;/h2&gt;

&lt;p&gt;leveldb/db/db_impl.cc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Status DB::Open(){
  /*edit&#x548C; log&#x5173;&#x8054;&#x7684;&#x610F;&#x4E49;&#x662F;????*/
  edit.SetLogNumber(new_log_number);  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu) {
  if (edit-&amp;gt;has_log_number_) {
    /*&#x76F8;&#x6BD4;&#x4E8E;VersionSet, VersionEdit&#x5185;&#x5BB9;&#x66F4;&#x52A0;&#x65B0;*/
    assert(edit-&amp;gt;log_number_ &amp;gt;= log_number_);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VersionSet::log&lt;em&gt;number&lt;/em&gt; &amp;lt; VersionEdit::log&lt;em&gt;number&lt;/em&gt;
&#x5BF9;&#x65E7;&#x7684;VersionSet, &#x6253;&#x4E0A; &#x65B0;&#x7684;VersionEdit,&lt;/p&gt;

&lt;p&gt;Version0 + VersionEdit = Version1&lt;/p&gt;

&lt;h3 id="toc_12"&gt;4.1 ctor&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::DBImpl(const Options&amp;amp; raw_options, const std::string&amp;amp; dbname):
internal_comparator_(raw_options.comparator),
versions_(new VersionSet(dbname_, &amp;amp;options_, table_cache_,
                               &amp;amp;internal_comparator_)) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options &#x9ED8;&#x8BA4;&#x7684;comparator&#x662F; BytewiseComparator() -&amp;gt;  BytewiseComparatorImpl,
&#x6240;&#x4EE5;, DBImpl&#x7684; VersionSet &#x7684;&#x6BD4;&#x8F83;&#x5668; &#x9ED8;&#x8BA4;&#x662F; BytewiseComparator().&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VersionSet::VersionSet():
  .&#x7565;.
  dummy_versions_(this),
  current_(nullptr)
{
  AppendVersion(new Version(this));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AppendVersion&#x4F1A;&#x4FEE;&#x6539; current_, &#x6307;&#x5411; new Version(this)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>LevelDB 01: &#x6570;&#x636E;&#x5B89;&#x5168;</title>
      <link>https://awakening-fong.github.io/posts/database/leveldb_01_data_safe</link>
      <pubDate>2019-09-09</pubDate>
      <description>&lt;p&gt;&#x76EE;&#x5F55;:
&lt;li&gt; &lt;a href="#toc_0"&gt; 1. &#x539F;&#x5B50;&#x6027; Atomicity&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_1"&gt; 2. Consistency&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_2"&gt; 2.1 &#x6709;&#x6CA1;&#x6709;&#x4E8B;&#x52A1;, log&#x6CA1;&#x6709;&#x4FDD;&#x5B58;&#x65E7;&#x503C;, &#x5982;&#x4F55;&#x64A4;&#x9500;?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_3"&gt; 2.2 (TODO)&#x57FA;&#x4E8E;leveldb, filestore &#x662F;&#x5426;&#x5B9E;&#x73B0;&#x4E86; &#x4E8B;&#x52A1;/commit&#x7B49;?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_5"&gt; 3. log&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_6"&gt; 3.1 &#x5199;log&#x5728;&#x54EA;&#x91CC;&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_7"&gt; 4. RecoverLogFile&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt; &lt;a href="#toc_8"&gt; 5. VersionSet::Recover&lt;/a&gt;  &lt;/li&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="toc_0"&gt;1. &#x539F;&#x5B50;&#x6027; Atomicity&lt;/h2&gt;

&lt;p&gt;ReadPhysicalRecord():&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;header  eof, &#x4F46;&#x8BFB;&#x5230;&#x7684;&amp;lt;kHeaderSize, &#x5219;&#x77E5;&#x9053;header&#x4E0D;&#x5B8C;&#x6574;.&lt;/li&gt;
&lt;li&gt;header&#x5B8C;&#x6574;, &#x4F46;&#x5BF9;&#x5E94;&#x7684;payload&#x6570;&#x636E;&#x4E0D;&#x591F;.&lt;/li&gt;
&lt;li&gt;&#x68C0;&#x67E5; checksum&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;CURRENT&#x6587;&#x4EF6;&#x7684;&#x539F;&#x5B50;:
&#x901A;&#x8FC7;mv&#x6765;&#x5B9E;&#x73B0;, &#x4FDD;&#x8BC1;CURRENT&#x7684;&#x5185;&#x5BB9;&#x662F;&#x6709;&#x6548;&#x7684;.
see SetCurrentFile()&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;leveldb::WriteBatch batch;
batch.Delete(&amp;quot;key&amp;quot;);
batch.Put(&amp;quot;key2&amp;quot;, value);
db-&amp;gt;Write(leveldb::WriteOptions(), &amp;amp;batch);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WriteBatch&#x4E2D; &lt;code&gt;rep_&lt;/code&gt; &#x4E2D;&#x867D;&#x7136;&#x6709;&#x5B58;&#x50A8;batch&#x9700;&#x8981;&#x5B8C;&#x6210;&#x7684;&#x4E2A;&#x6570;.&lt;br&gt;
WriteBatch::Put -&amp;gt; WriteBatchInternal::SetCount &#x4FEE;&#x6539; -&amp;gt;rep_[8]&lt;br&gt;
Writer::AddRecord -&amp;gt; Writer::EmitPhysicalRecord&lt;br&gt;
&#x4F46;&#x8FD9;&#x4E2A;&#x5E76;&#x4E0D;&#x4F5C;&#x4E3A;&#x5B8C;&#x6574;&#x6027;&#x6821;&#x9A8C;&#x7684;&#x4F9D;&#x636E;.&lt;br&gt;
&#x539F;&#x5B50;&#x7684;&#x5B9E;&#x73B0; &#x548C; &#x975E;batch &#x7684;&#x65B9;&#x6CD5;&#x4E00;&#x6837;.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;2. Consistency&lt;/h2&gt;

&lt;h3 id="toc_2"&gt;2.1 &#x6709;&#x6CA1;&#x6709;&#x4E8B;&#x52A1;, log&#x6CA1;&#x6709;&#x4FDD;&#x5B58;&#x65E7;&#x503C;, &#x5982;&#x4F55;&#x64A4;&#x9500;?&lt;/h3&gt;

&lt;p&gt;&#x95EE;&#x9898;: log record&#x5185;&#x5BB9;&#x662F; &#x4E8B;&#x52A1;id, &#x5143;&#x7D20;, &#x65E7;&#x503C;, &#x65B0;&#x503C;, &#x5BF9;&#x5417;?&lt;br&gt;
&#x7B54;:&#x4E0D;&#x5BF9;. &#x56E0;&#x4E3A;&#x4E0D;&#x652F;&#x6301;&#x4E8B;&#x52A1;, &#x4E5F;&#x4E0D;&#x5B58;&#x50A8;&#x65E7;&#x503C;.&lt;/p&gt;

&lt;p&gt;&#x95EE;&#x9898;: &#x68C0;&#x67E5;&#x5230; corrupt &#x7684;&#x8BB0;&#x5F55;&#x540E;, &#x5982;&#x4F55;&#x5904;&#x7406;, &#x6709;&#x6CA1;&#x6709;&#x5C06;&#x8FD9;&#x4E2A;corrupt&#x7684;&#x8BB0;&#x5F55;&#x62B9;&#x6389;,&#x4EE3;&#x7801;&#x5728;?&lt;br&gt;
&#x7B54;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VersionSet::Recover
{
  while (reader.ReadRecord(&amp;amp;record, &amp;amp;scratch) &amp;amp;&amp;amp; s.ok()) {
    s = edit.DecodeFrom(record);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6CA1;&#x6709;&#x62B9;&#x6389; corrupt &#x7684;&#x6570;&#x636E;.&lt;/p&gt;

&lt;p&gt;&#x95EE;&#x9898;: open, &#x4E0D;&#x5199;&#x5165;key, &#x7136;&#x540E;&#x5173;&#x95ED;, &#x540E;&#x7EED;, &#x662F;&#x5426;&#x4F1A;&#x91CD;&#x590D;&#x540C;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x7684; Recover ?  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DB::Open
{
  VersionEdit edit;
  bool save_manifest = false;
  impl-&amp;gt;Recover(&amp;amp;edit, &amp;amp;save_manifest);
  if (save_manifest) {
    edit.SetPrevLogNumber(0);// No older logs needed after recovery.
    edit.SetLogNumber(impl-&amp;gt;logfile_number_);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x95EE;&#x9898;: &#x5224;&#x65AD;&#x662F;&#x5426;&#x6709;log &#x9700;&#x8981;&#x6062;&#x590D;?&lt;br&gt;
&#x7B54;: &#x53C2;&#x4E0E;&#x6062;&#x590D;&#x7684;log, &#x5176;&#x7F16;&#x53F7; &#x9700;&#x8981;&#x5927;&#x4E8E;LogNumber().  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::Recover
|--VersionSet::Recover(bool *save_manifest)
| |--log::Reader reader(file,.., 0/*initial_offset*/);
| |--reader.ReadRecord(&amp;amp;record, &amp;amp;scratch)
| |--log_number_, has_prev_log_number_
|--Recover from all newer log files than the ones named in the descriptor
|--const uint64_t min_log = versions_-&amp;gt;LogNumber();
|--env_-&amp;gt;GetChildren(dbname_, &amp;amp;filenames) //&#x8BFB;&#x53D6;&#x76EE;&#x5F55;
|--for each of filenames
| |--if (type == kLogFile &amp;amp;&amp;amp; ((number &amp;gt;= min_log) {logs.push_back(number)}
|--for each of logs
| |--RecoverLogFile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="toc_3"&gt;2.2 (TODO)&#x57FA;&#x4E8E;leveldb, filestore &#x662F;&#x5426;&#x5B9E;&#x73B0;&#x4E86; &#x4E8B;&#x52A1;/commit&#x7B49;?&lt;/h3&gt;

&lt;h2 id="toc_4"&gt;3. log&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;uint64_t new_log_number = versions_-&amp;gt;NewFileNumber();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x6240;&#x4EE5;, log&#x7F16;&#x53F7;&#x7684;&#x4F5C;&#x7528;&#x57DF;&#x662F;VersionSet.&lt;/p&gt;

&lt;h3 id="toc_5"&gt;3.1 &#x5199;log&#x5728;&#x54EA;&#x91CC;&lt;/h3&gt;

&lt;p&gt;&#x5F53;&#x5E94;&#x7528;&#x5199;&#x5165;&#x4E00;&#x6761;Key:Value&#x8BB0;&#x5F55;&#x7684;&#x65F6;&#x5019;&#xFF0C;LevelDb&#x4F1A;&#x5148;&#x5F80;log&#x6587;&#x4EF6;&#x91CC;&#x5199;&#x5165;&#xFF0C;&#x6210;&#x529F;&#x540E;&#x5C06;&#x8BB0;&#x5F55;&#x63D2;&#x8FDB;Memtable&#x4E2D;&#xFF0C;&#x8FD9;&#x6837;&#x57FA;&#x672C;&#x5C31;&#x7B97;&#x5B8C;&#x6210;&#x4E86;&#x5199;&#x5165;&#x64CD;&#x4F5C;.  &#x4EE3;&#x7801;?&lt;/p&gt;

&lt;p&gt;&#x7B54;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MakeRoomForWrite
{
  // Attempt to switch to a new memtable and trigger compaction of old
  // 1.memtable&#x6EE1;&#x4E86; &#x6216;&#x8005; 2.&#x6CA1;&#x6EE1;&#x4F46;force
  //&#x56E0;&#x4E3A;background_work_finished_signal_.Wait&#x5B8C;&#x6210;, &#x538B;&#x7F29;&#x5B8C;&#x6210;, &#x4E5F;&#x5C31;&#x662F;&#x6CA1;&#x6709;log&#x6B63;&#x5728;&#x88AB;&#x538B;&#x7F29;, &#x6545;PrevLogNumber()&#x4E3A;0.
  assert(versions_-&amp;gt;PrevLogNumber() == 0);
  WritableFile* lfile = nullptr;
  env_-&amp;gt;NewWritableFile(LogFileName(dbname_, new_log_number), &amp;amp;lfile);
  logfile_ = lfile;
  log_ = new log::Writer(lfile);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DBImpl::Write
|--log_-&amp;gt;AddRecord
| |--dest_-&amp;gt;Append()
|--if (options.sync) logfile_-&amp;gt;Sync()
|--&#x4EE5;&#x4E0B;&#x662F;&#x5199;&#x5185;&#x5B58;
|--WriteBatchInternal::InsertInto(updates, mem_)
| |--MemTableInserter inserter;
| |--inserter.mem_ = memtable;
| |--updates-&amp;gt;Iterate(&amp;amp;inserter)
| | |--Slice input(rep_);
| | |--case kTypeValue:
| | | |--handler-&amp;gt;Put(key, value) =&amp;gt; MemTableInserter::Put
| | | |--mem_-&amp;gt;Add(sequence_, kTypeValue, key, value)
| | | | |--SkipList
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_6"&gt;4. RecoverLogFile&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;RecoverLogFile
|--while
| |--reader.ReadRecord(&amp;amp;record, &amp;amp;scratch)
| |--WriteBatchInternal::SetContents(&amp;amp;batch, record)
| | |--&#x628A;record &#x653E;&#x5165; b-&amp;gt;rep_
| |--if (mem == nullptr) mem = new MemTable;
| |--WriteBatchInternal::InsertInto(&amp;amp;batch, mem)
| | |--   input(&#x4E5F;&#x5C31;&#x662F;record) &#x683C;&#x5F0F;&#x662F;:  (WriteBatch::rep_&#x7684;&#x683C;&#x5F0F;)
| | |--     seq(8B)  cnt(4B)tag key(+value) tag key(+value)
| | |--    |---------|------|--|------------|--|-------------|
| | |--while
| | | |--MemTableInserter::Put &#x6216;Delete, &#x653E;&#x5165; MemTable
| | | |--sequence_++
| |--if (mem &amp;gt; write_buffer_size) WriteLevel0Table
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_7"&gt;5. VersionSet::Recover&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;VersionSet::Recover
|--Builder builder(this, current_);
|--while
| |--reader.ReadRecord(&amp;amp;record, &amp;amp;scratch)
| |--VersionEdit edit;
| |--edit.DecodeFrom(record);
| | |--case kCompactPointer:
| | |  |--GetLevel
| | |  |--GetInternalKey
| | |  |--compact_pointers_.push_back(std::make_pair(level, key))
| | |--case kDeletedFile:
| | | |--deleted_files_.insert(std::make_pair(level, number))
| | |--case kNewFile:
| | | |--FileMetaData f
| | | |--new_files_.push_back(std::make_pair(level, f))
| |--builder.Apply(&amp;amp;edit); &#x5C06;edit &#x5E94;&#x7528;&#x5230; Builder, &#x4E4B;&#x540E;, edit&#x5C31;&#x53EF;&#x4EE5;&#x4E22;&#x5F03;
|--Version* v = new Version(this); // &#x57FA;&#x4E8E;VersionSet&#x521B;&#x5EFA;Version
|--builder.SaveTo(v)  // Version* v
| |--&#x5C06;base_ &#x548C; levels_&#x4E2D;added_files, &#x6309;&#x9012;&#x589E;&#x987A;&#x5E8F;  &#x653E;&#x5165; v
| | |--MaybeAddFile -&amp;gt; push to v-&amp;gt;files_[level]
|--Finalize(v)  &#x8BA1;&#x7B97;&#x4E0B;&#x6B21;&#x4ECE;&#x54EA;&#x4E2A;level&#x8FDB;&#x884C;&#x538B;&#x7F29;.
|--AppendVersion(v);  current_ &#x6307;&#x5411;@v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x8981;&#x6307;&#x660E;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;, &#x9700;&#x8981;&#x7ED9;&#x51FA;level &#x548C; number. &#x6BD4;&#x5982;
Level 4: File4_0, File4_1, File4_2, File4_3&lt;/p&gt;

&lt;p&gt;compact_pointers_ &#x89C1; &lt;a href="https://awakening-fong.github.io/posts/database/leveldb_04_compact"&gt;https://awakening-fong.github.io/posts/database/leveldb_04_compact&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VersionSet&#x662F;&#x7248;&#x672C;&#x7684;&#x96C6;&#x5408;, &#x4ECE; AppendVersion() &#x5C31;&#x6709;&#x4F53;&#x73B0;.
VersionEdit &#x4E0D;&#x662F; VersionSet. VersionEdit &#x7684;&#x610F;&#x601D;&#x662F;&#x7248;&#x672C;&#x7ECF;&#x8FC7; edit&#x540E;, &#x53D8;&#x6210;&#x53E6;&#x4E00;&#x4E2A;&#x7248;&#x672C;,
&#x6240;&#x4EE5;, VersionEdit&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;&#x5DEE;&#x5F02;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x63A8;&#x8350;C++&#x7F16;&#x8F91;&#x5668; Clion</title>
      <link>https://awakening-fong.github.io/posts/tools/why_clion</link>
      <pubDate>2018-11-27</pubDate>
      <description>&lt;p&gt;&#x5907;&#x6CE8;: &#x7136;&#x800C;, 2019&#x5E74;, &#x672C;&#x4EBA;&#x8FD8;&#x662F;&#x4F7F;&#x7528;&#x901A;&#x8FC7;slickedit&#x9605;&#x8BFB;&#x4EE3;&#x7801;, &#x4E3B;&#x8981;&#x662F;&#x770B;&#x4E2D;&#x5176;&#x5FEB;&#x6377;&#x952E;&#x81EA;&#x5B9A;&#x4E49;&#x529F;&#x80FD;.
2021&#x5E74;: &#x73B0;&#x5728;&#x4F7F;&#x7528; vscode+ccls&lt;/p&gt;

&lt;h2 id="toc_0"&gt;&lt;h4&gt;1. &#x4F18;&#x70B9;&lt;/h4&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;c++&#x4E2D;&#x652F;&#x6301;&#x4EE5; namespace::method  &#x7684;&#x65B9;&#x5F0F;&#x6765;&#x641C;&#x7D22;symbol.
(vscode&#x4E2D;&#x4EC5;&#x5728;&#x5F53;&#x524D;&#x6587;&#x4EF6;&#x65F6;, &#x624D;&#x53EF;alt+n  navigate)
(slickedit&#x901A;&#x8FC7;context tagging&#x53EF;&#x4EE5;&#x641C;&#x7D22;&#x5230;)&lt;/li&gt;
&lt;li&gt;&#x652F;&#x6301;&#x91CD;&#x6784;, &#x6BD4;&#x5982;&#x91CD;&#x547D;&#x540D;&#x4E4B;&#x7C7B;&#x7684;, &#x4E0D;&#x5FC5;&#x5230;&#x5904;&#x66FF;&#x6362;.&lt;/li&gt;
&lt;li&gt;&#x652F;&#x6301; your_filename.c:846:14 &#x76F4;&#x63A5;&#x8DF3;&#x8F6C;&#x5230;&#x6307;&#x5B9A;&#x7684;&#x884C;&#x548C;&#x5217;.
&#x5728;&#x7F16;&#x8BD1;&#x51FA;&#x9519;&#x540E;, &#x590D;&#x5236;&#x51FA;&#x9519;&#x4FE1;&#x606F;, &#x7136;&#x540E; ctrl+shift+n, &#x7136;&#x540E;&#x7C98;&#x8D34;&#x7C7B;&#x4F3C; your_path/your_filename.c:846:14 &#x6765;&#x6253;&#x5F00;&#x6587;&#x4EF6;.
(vscode&#x4E2D;&#x662F; ctrl+p  goto to file)&lt;/li&gt;
&lt;li&gt;&#x597D;&#x7528;&#x7684; &amp;quot;Find Usages&amp;quot;, &#x5C31;&#x662F;&#x67E5;&#x770B;&#x8C01;&#x4F7F;&#x7528;&#x4E86;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;, &#x5E76;&#x4E0D;&#x662F;&#x57FA;&#x4E8E;&#x5B57;&#x7B26;&#x4E32;&#x641C;&#x7D22;.
&#x6BD4;&#x5982;, &#x5BF9;leveldb/db/version_set.cc&#x7684;Version::Get&#x4F7F;&#x7528;Find Usages, &#x4F1A;&#x8DF3;&#x8F6C;&#x5230;
Status DBImpl::Get()&#x4E2D;&#x7684;
s = current-&amp;gt;Get(options, lkey, value, &amp;amp;stats);&lt;/li&gt;
&lt;li&gt;&#x6742;&#x9879;:&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;shift &#x4E24;&#x6B21; (search everything), &#x641C;&#x7D22; wrap, &#x79FB;&#x52A8;&#x5230;&#x7B2C;1&#x9879;&#x662F;  use soft wrap, &#x56DE;&#x8F66;, &#x5373;&#x53EF;&#x5E94;&#x7528;&#x8BE5;&#x9009;&#x9879;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_1"&gt;&lt;h4&gt;2. &#x7F3A;&#x70B9;&lt;/h4&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&#x6CE8;&#x91CA;&#x4E2D;&#x7684;&#x5185;&#x5BB9;, &#x6BD4;&#x5982;&#x7C7B;&#x4F3C; //your_func&lt;br&gt;
 &#x65E0;&#x6CD5;&#x901A;&#x8FC7;ctrl+&#x9F20;&#x6807;, &#x4F46;&#x662F; &#x53EF;&#x4EE5;&#x901A;&#x8FC7; &#x67E5;&#x627E;&#x7B26;&#x53F7; &#x5B9A;&#x4F4D;&#x5230;.&lt;/li&gt;
&lt;li&gt;&#x5BF9;&#x7F51;&#x7EDC;&#x6302;&#x8F7D;&#x7684;&#x4EE3;&#x7801;  &#x4E0D;&#x53CB;&#x597D;. &#x82E5;&#x53D1;&#x751F;&#x7F51;&#x7EDC;&#x65AD;&#x5F00;, &#x90A3;&#x4E48;, &#x9700;&#x8981;&#x91CD;&#x65B0;&#x7D22;&#x5F15;.&lt;/li&gt;
&lt;li&gt;30&#x5929; &#x8BD5;&#x7528;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_2"&gt;&lt;h4&gt;3. troubleshooting&lt;/h4&gt;&lt;/h2&gt;

&lt;p&gt;&#x73B0;&#x8C61;:
ceph&#x4E2D; src/mon/Paxos.cc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void Paxos::dispatch(MonOpRequestRef op)
{
  assert(op-&amp;gt;is_type_paxos());
  op-&amp;gt;mark_paxos_event(&amp;quot;dispatch&amp;quot;);  

}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;op-&amp;gt;mark_paxos_event&lt;/code&gt; &#x65E0;&#x6CD5;&#x901A;&#x8FC7;ctrl+&#x9F20;&#x6807;&#x6765;&#x8DF3;&#x8F6C;.&lt;/p&gt;

&lt;p&gt;src/mon/MonOpRequest.h&#x4E2D;&#x6709;
typedef MonOpRequest::Ref MonOpRequestRef;&lt;/p&gt;

&lt;p&gt;src/mon/MonOpRequest.h&#x4E2D;&#x6709;
typedef ceph::shared_ptr&lt;MonOpRequest&gt; Ref;&lt;/p&gt;

&lt;p&gt;src/include/memory.h&#x4E2D;&#x6709;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace ceph {
  using std::shared_ptr;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#x539F;&#x56E0;:&lt;br&gt;
paxos.cc  &#x6709; #include &amp;quot;Monitor.h&amp;quot;&lt;br&gt;
monitor.h &#x4E2D; #include &amp;quot;include/memory.h&amp;quot;&lt;br&gt;
&#x4F46;&#x7F16;&#x8F91;&#x5668;&#x4E2D;&#x5BF9; &#x6587;&#x4EF6;monitor.h &#x62A5;&#x627E;&#x4E0D;&#x5230;&#x8DEF;&#x5F84;include/memory.h&lt;br&gt;
memory.h&#x7684;&#x8DEF;&#x5F84;&#x4E3A;ceph_v10.2.10/src/include/memory.h&lt;/p&gt;

&lt;p&gt;&#x5904;&#x7406;:&lt;br&gt;
&#x5F80; &#x9876;&#x5C42;&#x7684;&#x81EA;&#x52A8;&#x751F;&#x6210;&#x7684;CMakeLists.txt&#x4E2D;&#x6DFB;&#x52A0;&lt;br&gt;
include_directories(src)&lt;br&gt;
&#x7136;&#x540E;, &#x91CD;&#x8F7D; cmake &#x5DE5;&#x7A0B;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>JBD&#x521D;&#x6B65;</title>
      <link>https://awakening-fong.github.io/posts/fs/jbd</link>
      <pubDate>2018-10-25</pubDate>
      <description>&lt;h1 id="toc_0"&gt;&lt;h4&gt;1. &#x6982;&#x5FF5;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&#x5355;&#x4E2A;handle&#x662F;&#x539F;&#x5B50;&#x64CD;&#x4F5C;. 
&#x591A;&#x4E2A;handle&#x6253;&#x5305;&#x4E3A;&#x4E00;&#x4E2A;transaction.&lt;/p&gt;

&lt;p&gt;disk is used to indicate the actual block device,
whereas the term journal is used for the log area.&lt;/p&gt;

&lt;p&gt;Log record: Describes a single update of a disk block of the journaling filesystem.(&#x6765;&#x81EA;[Understanding the Linux Kernel, 3rd Edition]) &lt;/p&gt;

&lt;p&gt;commit record:
a special block, called the commit record, is written to the journal. The commit record is used to indicate that all the blocks belonging to a single atomic operation are written to the journal.
fong:&#x8FD9;&#x6837;, &#x5982;&#x679C;crash, &#x5C31;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x90A3;&#x4E9B;log&#x662F;&#x5B8C;&#x6210;&#x7684;.
The commit record indicates that this is a completed operation and could be written to the disk. &lt;/p&gt;

&lt;p&gt;checkpointing: &#x5C06; finished transactions &#x5199;&#x5165;&#x78C1;&#x76D8;(&#x975E;log&#x533A;&#x57DF;), &#x7528;&#x4E8E;&#x56DE;&#x6536;&#x76F8;&#x5E94;log&#x7A7A;&#x95F4;&#x7684;&#x8FC7;&#x7A0B;.&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;h4&gt;2. &#x72B6;&#x6001;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;T_RUNNING&lt;/code&gt;&lt;br&gt;
the transaction can accept new handles. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_LOCKED&lt;/code&gt;&lt;br&gt;
the transaction does not accept any new handles but existing handles are not complete. 
fong:&#x8FD9;&#x91CC;&#x7684;handle completed, &#x610F;&#x601D;&#x662F;&#x666E;&#x901A;&#x7684;&#x5199;&#x5165;&#x5B8C;&#x6210;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_FLUSH&lt;/code&gt;&lt;br&gt;
all the handles in a transaction are complete. The transaction is writing itself to the journal. 
itself&#x6307;&#x7684;&#x662F; log, &#x5C06;log&#x5199;&#x5165;log&#x533A;&#x57DF;.
&#x4EE3;&#x7801;&#x4E2D;journal&lt;em&gt;submit&lt;/em&gt;data&lt;em&gt;buffers()&#x5E76;unplug, 
+ journal&lt;/em&gt;write&lt;em&gt;revoke&lt;/em&gt;records()&lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_COMMIT&lt;/code&gt;&lt;br&gt;
&#x53C2;&#x8003; linux-3.10.86_utf8/fs/jbd/commit.c
we have now written out all of the data for a transaction.  Now comes the tricky part: we need to write out metadata. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_COMMIT_RECORD&lt;/code&gt;&lt;br&gt;
&#x5F00;&#x59CB;&#x5199; write commit record and do cleanup.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;T_FINISHED&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;[Understanding the Linux Kernel, 3rd Edition]
All log records included in the transaction have been physically written onto the journal. When recovering from a system failure, e2fsck considers every complete transaction of the journal and writes the corresponding blocks into the filesystem. 
&#x56E0;&#x4E3A;checkpointing&#x4F1A;&#x5C06;transaction&#x4ECE;&#x65E5;&#x5FD7;&#x533A;&#x79FB;&#x9664;, &#x6240;&#x4EE5;, &#x5728;&#x65E5;&#x5FD7;&#x533A;&#x5C31;&#x9700;&#x8981;replay.&lt;/p&gt;

&lt;h1 id="toc_2"&gt;&lt;h4&gt;3. &#x4E3B;&#x8981;&#x8FC7;&#x7A0B;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;Phase 1: the transaction enters into the flush state (T_FLUSH).&lt;br&gt;
Phase 2: the actual buffers of the transaction are flushed to the disk. Data buffers go first. There are no complications here, as data buffers are not saved in the log area. Instead, they are flushed directly to their actual positions on the disk. This phase ends when the I/O completion notifications for all such buffers are received.&lt;br&gt;
date&#x4E0D;&#x4F1A;&#x5148;&#x5199;&#x5230;log&#x533A;&#x57DF;, &#x800C;&#x662F;&#x76F4;&#x63A5;&#x5199;&#x5F80;&#x5B9E;&#x9645;&#x7684;&#x78C1;&#x76D8;.&lt;/p&gt;

&lt;p&gt;(&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x5C42;&#x9762;&#x624D;&#x6709;data=writeback, ordered, journal&#x8FD9;&#x4E2A;&#x6982;&#x5FF5;, &#x6240;&#x4EE5;, &#x5728;jbd&#x770B;&#x6765;, data&#x4E0D;&#x4F1A;journal)&lt;/p&gt;

&lt;p&gt;Phase 3: all the data buffers are written to a disk but their metadata still is in the volatile memory.   &#x8FD9;&#x65F6;, metadata&#x8FD8;&#x5728;&#x6613;&#x5931;&#x6027;&#x5B58;&#x50A8;&#x4E2D;.  Metadata flushing is not as straightforward as data buffer flushing, because metadata needs to be written to the log area and the actual positions on the disk need to be remembered.  &#x5199;metadata, &#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x6620;&#x5C04;&#x5173;&#x7CFB;.
This phase starts with flushing these metadata buffers, for which a journal descriptor block is acquired. The journal descriptor block stores the mapping of each metadata buffer in the journal to its actual location on the disk in the form of tags. 
&#x4EE5;tag&#x65B9;&#x5F0F;&#x6765;&#x8BB0;&#x5F55;&#x6620;&#x5C04;&#x5173;&#x7CFB;.&lt;/p&gt;

&lt;p&gt;Phase 4 and Phase 5: both phase 4 and phase 5 wait on I/O completion notifications.  &lt;/p&gt;

&lt;p&gt;Phase 6: all the data and metadata is on safe storage, data at its actual locations and metadata in the journal. Now transactions need to be marked as committed so that it can be known that all the updates are safe in the journal. After this, the transaction is moved to the committed state, T_COMMIT.&lt;/p&gt;

&lt;p&gt;Phase 7:do checkpoint processing.
Phase 8: the transaction is marked as being in the finished state, T_FINISHED. &lt;/p&gt;

&lt;h1 id="toc_3"&gt;&lt;h4&gt;4. revoke(&#x64A4;&#x9500;)&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;For example consider the following sequence of steps when the filesystem is mounted in metadata only journalling mode. &#x8003;&#x8651;&#x5728;&#x4EC5;&#x5BF9;metadata&#x4F5C;&#x65E5;&#x5FD7;&#x4E0B;&#x7684;&#x5982;&#x4E0B;&#x60C5;&#x666F;:&lt;/p&gt;

&lt;p&gt;a) A metadata block &amp;#39;B&amp;#39; is journalled and contents are copied to journal.&lt;br&gt;
b) Later &amp;#39;B&amp;#39; gets freed&lt;br&gt;
c) &amp;#39;B&amp;#39; is now used to write contents of user data, this is not journalled.&lt;br&gt;
&#x539F;&#x5148;&#x5757;&#x5185;&#x5BB9;&#x662F;metadata, &#x540E;&#x6765;&#x6539;&#x5176;&#x7528;&#x9014;&#x4E3A;&#x5B58;&#x50A8;data.&lt;/p&gt;

&lt;p&gt;Now if we crash and replay, we need to avoid replaying the contents of block &amp;#39;B&amp;#39; in journal over the user contents.&lt;/p&gt;

&lt;p&gt;&#x5728;crash&#x4E4B;&#x540E;&#x7684;replay&#x4E2D;, &#x6211;&#x4EEC;&#x8981;&#x907F;&#x514D;&#x5BF9; &#x539F;&#x5148;&#x662F;&#x65E5;&#x5FD7;&#x5757;, &#x4E4B;&#x540E;&#x6539;&#x4F5C;&#x4ED6;&#x7528;&#x7684;&#x5757; &#x8FDB;&#x884C;&#x64CD;&#x4F5C;.&lt;/p&gt;

&lt;p&gt;If there are transactions for the block after the last revoke record of a block, these ops are safe to replay. Any transactions which appear before the revoke record aren&amp;#39;t replayed.
 &#x5757;&#x51FA;&#x73B0;&#x5728;revoke record&#x4E4B;&#x540E;&#x7684;&#x4E8B;&#x52A1;&#x4E2D;, &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5B89;&#x5168;&#x5730;replay.
 The basic idea is that you don&amp;#39;t want to replay ops corresponding to a block which may have been freed. Also note that if there are multiple revoke records corresponding to a block in a journal, we only need to worry about the latest record ie...one with highest transaction id.
&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#x4E0D;&#x8981;&#x5BF9;&#x5DF2;&#x7ECF;&#x91CA;&#x653E;&#x6389;&#x7684;&#x5757;&#x8FDB;&#x884C;replay&#x64CD;&#x4F5C;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;linux-3.10.86/fs/jbd/revoke.c&lt;/p&gt;

&lt;p&gt;Revoke is the mechanism used to prevent old log records for deleted metadata from being replayed on top of newer data(data&#x65E0;&#x9700;&#x65E5;&#x5FD7;) using the same  blocks.  The revoke mechanism is used in two separate places:&lt;br&gt;
 Commit: during commit we write the entire list of the current transaction&amp;#39;s revoked blocks to the journal&lt;br&gt;
 Recovery: during recovery we record the transaction ID of all revoked blocks.  If there are multiple revoke records in the log for a single block, only the last one counts, and if there is a log entry for a block beyond the last revoke(&#x8FD9;&#x91CC;&#x7684;beyond&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x5728;revoke&#x7684;&#x8303;&#x56F4;&#x4E4B;&#x5916;, &#x4E5F;&#x5C31;&#x662F;&#x65F6;&#x95F4;&#x4E0A;&#x53D1;&#x751F;&#x5728;revoke&#x4E4B;&#x540E;), then that log entry still  gets replayed.&lt;/p&gt;

&lt;p&gt;We can get interactions between revokes and new log data within a single transaction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Block is revoked and then journaled:&lt;br&gt;
The desired end result is the journaling of the new block, so we cancel the revoke before the transaction commits.&lt;br&gt;
&#x6211;&#x4EEC;&#x5148;&#x5BF9;&#x5757;revoked, &#x7136;&#x540E;&#x5BF9;&#x8BE5;&#x5757;journaled, &#x8FD9;&#x6837;, &#x8FD9;&#x4E2A;&#x5757;&#x7684;&#x6700;&#x7EC8;&#x6548;&#x679C;&#x662F;&#x8981;&#x8BB0;&#x5F55;&#x5230;log&#x533A;&#x57DF;.
&#x6240;&#x4EE5;, &#x5728;transaction commits&#x65F6;, &#x65E0;&#x9700;&#x8BB0;&#x5F55;&#x8FD9;&#x4E2A;revoked&#x52A8;&#x4F5C;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Block is journaled and then revoked:&lt;br&gt;
The revoke must take precedence over the write of the block, so we need either to cancel the journal entry or to write the revoke later in the log than the log block.  In this case(&#x6307;&#x7684;&#x662F;Block is journaled and then revoked), we choose the latter: journaling a block cancels any revoke record for that block in the current transaction, so any revoke for that block in the transaction must have happened after the block was journaled and so the revoke must take precedence(&#x4F18;&#x5148;&#x6743;).&lt;br&gt;
&#x6709;&#x4E24;&#x79CD;&#x5904;&#x7406;&#x65B9;&#x5F0F;, &#x7B2C;2&#x79CD;&#x662F; &#x5148;&#x5B8C;&#x6210;journaled, &#x4E4B;&#x540E;&#x5199;revoked. TODO &#x539F;&#x56E0;&#x7684;&#x8BDD;, &#x8FD9;&#x91CC;&#x7684;&#x89E3;&#x91CA;&#x8FD8;&#x6CA1;&#x770B;&#x61C2;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Block is revoked and then written as data:&lt;br&gt;
The data write is allowed to succeed, but the revoke is &lt;em&gt;not&lt;/em&gt; cancelled.  We still need to prevent old log records from overwriting the new data.  We don&amp;#39;t even need to clear the revoke bit here.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="toc_4"&gt;&lt;h4&gt;5. &#x53C2;&#x8003;&#x8D44;&#x6599;&lt;/h4&gt;&lt;/h1&gt;

&lt;p&gt;Linux: The Journaling Block Device
&lt;a href="https://web.archive.org/web/20070926223043/http://kerneltrap.org/node/6741"&gt;https://web.archive.org/web/20070926223043/http://kerneltrap.org/node/6741&lt;/a&gt;
&lt;a href="http://mkatiyar.blogspot.com/2011/07/journal-jbd-revoke-mechanism.html"&gt;http://mkatiyar.blogspot.com/2011/07/journal-jbd-revoke-mechanism.html&lt;/a&gt;&lt;br&gt;
Understanding the Linux Kernel, 3rd Edition&lt;/p&gt;
</description>
    </item>
    <item>
      <title>&#x6570;&#x636E;&#x5E93;recovery&#x7684;&#x4E00;&#x4E9B;&#x57FA;&#x672C;&#x6982;&#x5FF5;</title>
      <link>https://awakening-fong.github.io/posts/database/db_recovery_concept</link>
      <pubDate>2018-10-24</pubDate>
      <description>&lt;h2 id="toc_0"&gt;&lt;h5&gt;1. REDO, UNDO, checkpoint&lt;/h5&gt;&lt;/h2&gt;

&lt;p&gt;Write Ahead Logging (WAL) is a standard approach to transaction logging.  Briefly, WAL&amp;#39;s central concept is that changes to data files (where tables and indexes reside) must be written only after those changes have been logged - that is, when log records have been flushed to permanent storage. When we follow this procedure, we do not need to flush data pages to disk on every transaction commit, because we know that in the event of a crash we will be able to recover the database using the log: any changes that have not been applied to the data pages will first be redone from the log records (this is roll-forward recovery, also known as REDO) and then changes made by uncommitted transactions will be removed from the data pages (roll-backward recovery - UNDO).  [1]&lt;br&gt;
&#x5DF2;commit&#x4F46;&#x672A;apply&#x7684;, &#x6267;&#x884C;REDO, &#x800C;&#x7531; &#x672A;commit&#x7684;&#x4E8B;&#x52A1; &#x7684;&#x4FEE;&#x6539; &#x9700;&#x8981;&#x6267;&#x884C;UNDO.   &lt;/p&gt;

&lt;p&gt;------------------ &lt;/p&gt;

&lt;p&gt;Its transaction recovery log contains log records of the following form:&lt;br&gt;
&lt;code&gt;
&amp;lt;txnId, objectId, beforeValue, afterValue&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&#x6709;&#x5982;&#x4E0B;log:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 &amp;lt;T1 BEGIN&amp;gt;
2 &amp;lt;T1, X, 1, 2&amp;gt;
3 &amp;lt;T2 BEGIN&amp;gt;
4 &amp;lt;T3 BEGIN&amp;gt;
5 &amp;lt;T2, Y, 1, 2&amp;gt;
6 &amp;lt;T2 COMMIT&amp;gt;
7 &amp;lt;T1, Y, 2, 3&amp;gt;
8 &amp;lt;T3, Z, 1, 2&amp;gt;
9 &amp;lt;CHECKPOINT&amp;gt;
10 &amp;lt;T1, X, 2, 3&amp;gt;
11 &amp;lt;T1, Y, 3, 4&amp;gt;
12 &amp;lt;T3, Z, 2, 3&amp;gt;
13 &amp;lt;T3 COMMIT&amp;gt;
14 &amp;lt;T1, Z, 3, 4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assume that the DBMS flushes all dirty pages when the recovery process finishes. What are the values of X, Y, and Z after the DBMS recovers the state of the database ?&lt;br&gt;
&#x7B54;: X=1, Y=2, Z=3&lt;br&gt;
checkpoint &#x5E76;&#x4E0D;&#x6697;&#x793A;&#x7740;commit, &#x672C;&#x4F8B;&#x4E2D;&#x6CA1;&#x6709;&#x5BF9;T1&#x8FDB;&#x884C;commit,&lt;br&gt;
&#x6240;&#x4EE5;, x&#x7EF4;&#x6301;&#x65E7;&#x503C;, &#x4E3A;1.&lt;br&gt;
Y&#x7684;&#x8BDD;, &#x770B; 6 &lt;T2 COMMIT&gt; &#x4E4B;&#x524D;, &#x4E3A;2.&lt;br&gt;
Z&#x7684;&#x8BDD;, &#x770B; 13 &lt;T3 COMMIT&gt;&#x4E4B;&#x524D;, &#x4E3A;3.  &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;While doing deferred updates with WAL, if we prevent the DBMS from writing dirty records to disk until the transaction commits, then we do not need to store their original values.
fong:&#x7531;&#x4E8E;&#x4E0D;&#x662F;steal, &#x4E0D;commit&#x5C31;&#x4E0D;&#x4F1A;&#x56DE;&#x5199;, &#x8FD9;&#x6837;, &#x5C31;&#x4E0D;&#x9700;&#x8981;undo, &#x4E5F;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x65E7;&#x503C;.&lt;/p&gt;

&lt;p&gt;The undo operation not only restores the data items to their old value,
but also writes log records to record the updates performed as part of the undo process. These log records are special &lt;strong&gt;&lt;em&gt;redo-only log&lt;/em&gt;&lt;/strong&gt; records, since they do not need to contain the old-value of the updated data item. [2]
&#x4E4B;&#x6240;&#x4EE5;&#x79F0;&#x4E3A; redo-only log, &#x5728;recovery&#x65F6;, &#x65E0;&#x9700;&#x8FDB;&#x884C;undo&#x64CD;&#x4F5C;.
&#x6BD4;&#x5982;&#x8BF4;,&lt;br&gt;
T1, X, 1, 2  (&#x683C;&#x5F0F;&#x4E3A; &#x4E8B;&#x52A1;id, key, &#x65E7;&#x503C;1, &#x65B0;&#x503C;2)&lt;br&gt;
&#x6CA1;&#x6709;commit, &#x7136;&#x540E;&#x6389;&#x7535;(&#x7B2C;1&#x56DE;)&lt;br&gt;
&#x91CD;&#x542F;&#x540E;, &#x6267;&#x884C;recovery, &#x5BF9;&#x4E8E;T1, &#x751F;&#x6210;&lt;br&gt;
CLR undo T1 ....&lt;br&gt;
&#x7136;&#x540E;&#x8FD8;&#x6709;&#x5176;&#x4ED6;log&#x8981;recovery, &#x7ED3;&#x679C;&#x7A81;&#x7136;&#x6389;&#x7535;(&#x7B2C;2&#x56DE;)&#x4E86;,&lt;br&gt;
&#x91CD;&#x542F;&#x540E;, &#x6267;&#x884C;recovery, &#x770B;&#x5230;&#x6709;CLR undo T1 ....&lt;br&gt;
&#x5BF9;&#x4E8E;&#x8FD9;&#x6761;&#x8BB0;&#x5F55;&#x662F;&#x4E0D;&#x4F1A; undo such an undo operation, &#x6240;&#x4EE5;,&#x662F; redo-only log.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;&lt;h5&gt;2. no-steal, force policy&lt;/h5&gt;&lt;/h2&gt;

&lt;p&gt;One might expect that transactions would force-output all modified blocks to disk when they commit. Such a policy is called &lt;strong&gt;&lt;em&gt;the force policy&lt;/em&gt;&lt;/strong&gt;. The alternative, the no-force policy, allows a transaction to commit even if it has modified some blocks that have not yet been written back to disk. [2]&lt;br&gt;
&#x5982;&#x679C;&#x662F;the force policy, &#x90A3;&#x4E48;, &#x5F53;commit&#x65F6;, &#x5F3A;&#x5236;&#x8981;&#x6C42;&#x6240;&#x6709;&#x4FEE;&#x6539;&#x8FC7;&#x7684;&#x5757;&#x90FD;&#x5DF2;&#x7ECF;&#x5199;&#x5165;&#x78C1;&#x76D8;. &#x800C;no-force&#x7B56;&#x7565;, &#x5219;&#x4E0D;&#x8981;&#x6C42;&#x5DF2;&#x5199;&#x5165;&#x78C1;&#x76D8;, &#x5C31;&#x53EF;&#x4EE5;commit.  &lt;/p&gt;

&lt;p&gt;one might expect that blocks modified by a transaction that is still active should not be written to disk. This policy is called &lt;strong&gt;&lt;em&gt;the no-steal policy&lt;/em&gt;&lt;/strong&gt;. The alternative, &lt;strong&gt;&lt;em&gt;the steal policy&lt;/em&gt;&lt;/strong&gt;, allows the system to write modified blocks to disk even if the transactions that made those modifications have not all committed. [2]  &lt;/p&gt;

&lt;h2 id="toc_2"&gt;&lt;h5&gt;3. &#x53C2;&#x8003;&#x8D44;&#x6599;&lt;/h5&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.postgresql.org/docs/7.3/static/wal.html"&gt;https://www.postgresql.org/docs/7.3/static/wal.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Database System Concepts 6th edition&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
  </channel>
</rss>
